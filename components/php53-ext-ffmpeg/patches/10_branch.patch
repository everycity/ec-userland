# Revision 677

Property changes on: gd.h
___________________________________________________________________
Deleted: svn:keywords
   - Author Date Id Revision
Deleted: svn:eol-style
   - native


Property changes on: LICENSE
___________________________________________________________________
Deleted: svn:keywords
   - Author Date Id Revision
Deleted: svn:eol-style
   - native

Index: config.m4
===================================================================
--- a/config.m4	(.../branches/ffmpeg-php/ffmpeg-php-0.6.0)
+++ b/config.m4	(.../trunk/ffmpeg-php)
@@ -1,5 +1,5 @@
 PHP_ARG_WITH(ffmpeg,for ffmpeg support, 
-[  --with-ffmpeg[=DIR]       Include ffmpeg support (requires ffmpeg >= 0.49.0).])
+[  --with-ffmpeg[=DIR]       Include ffmpeg support (requires ffmpeg >= 0.5).])
 
 PHP_ARG_ENABLE(skip-gd-check, whether to force gd support in ffmpeg-php, [  --enable-skip-gd-check     skip checks for gd libs and assume they are present.], no, no)
 
@@ -106,7 +106,7 @@
   CFLAGS="$CFLAGS -Wall -fno-strict-aliasing"
 
   PHP_NEW_EXTENSION(ffmpeg, ffmpeg-php.c ffmpeg_movie.c ffmpeg_frame.c ffmpeg_errorhandler.c ffmpeg_tools.c, $ext_shared,, \\$(GDLIB_CFLAGS))
-  PHP_ADD_EXTENSION_DEP(ffmpeg, gd)
+dnl PHP_ADD_EXTENSION_DEP(ffmpeg, gd)
 
   PHP_SUBST(FFMPEG_SHARED_LIBADD)
   AC_DEFINE(HAVE_FFMPEG_PHP,1,[ ])

Property changes on: config.m4
___________________________________________________________________
Deleted: svn:keywords
   - Author Date Id Revision
Deleted: svn:eol-style
   - native

Index: ffmpeg_movie.c
===================================================================
--- a/ffmpeg_movie.c	(.../branches/ffmpeg-php/ffmpeg-php-0.6.0)
+++ b/ffmpeg_movie.c	(.../trunk/ffmpeg-php)
@@ -45,6 +45,7 @@
 
 #include "ffmpeg_frame.h"
 #include "ffmpeg_movie.h"
+#include "ffmpeg_tools.h"
    
 #define GET_MOVIE_RESOURCE(ff_movie_ctx) {\
     zval **_tmp_zval;\
@@ -122,7 +123,8 @@
     FFMPEG_PHP_MALIAS(ffmpeg_movie, getaudiobitrate,     getAudioBitRate,     NULL, 0)
     FFMPEG_PHP_MALIAS(ffmpeg_movie, getvideobitrate,     getVideoBitRate,     NULL, 0)
     FFMPEG_PHP_MALIAS(ffmpeg_movie, getpixelaspectratio, getPixelAspectRatio, NULL, 0)
-    {NULL, NULL, NULL, 0, 0}
+
+    FFMPEG_PHP_END_METHODS
 };
 /* }}} */
 
@@ -270,7 +272,7 @@
 /* {{{ proto object ffmpeg_movie(string filename) 
    Constructor for ffmpeg_movie objects
  */
-FFMPEG_PHP_METHOD(ffmpeg_movie, __construct)
+FFMPEG_PHP_CONSTRUCTOR(ffmpeg_movie, __construct)
 {
     int persistent = 0, hashkey_length = 0;
     char *filename = NULL, *fullpath = NULL, *hashkey = NULL;

Property changes on: ffmpeg_movie.c
___________________________________________________________________
Deleted: svn:keywords
   - Author Date Id Revision
Deleted: svn:eol-style
   - native

Index: ChangeLog
===================================================================
--- a/ChangeLog	(.../branches/ffmpeg-php/ffmpeg-php-0.6.0)
+++ b/ChangeLog	(.../trunk/ffmpeg-php)
@@ -1,5 +1,15 @@
 ChangeLog for ffmpeg-php (ffmpeg-php.sourceforge.net)
 
+version 0.6.3 (3/30/2009)
+    Bug Fixes
+    * Fixed compatibility with ffmpeg 0.5.0 release. ffmpeg-php is only
+    supporting offical releases from here on.
+
+version 0.6.2 (3/25/2009)
+    Bug Fixes
+    * Fixed building on php4
+    * Fixed compatibility with ffmpeg 0.5.0 release 
+
 version 0.6.0 (10/15/2008)
     New Features:
     * Support for ffmpeg swscale API

Property changes on: ChangeLog
___________________________________________________________________
Deleted: svn:keywords
   - Author Date Id Revision
Deleted: svn:eol-style
   - native


Property changes on: test_ffmpeg.php
___________________________________________________________________
Deleted: svn:keywords
   - Author Date Id Revision
Deleted: svn:eol-style
   - native

Index: ffmpeg_movie.h
===================================================================
--- a/ffmpeg_movie.h	(.../branches/ffmpeg-php/ffmpeg-php-0.6.0)
+++ b/ffmpeg_movie.h	(.../trunk/ffmpeg-php)
@@ -33,7 +33,7 @@
 #define FFMPEG_MOVIE_H
 
 /* movie constructor */
-FFMPEG_PHP_METHOD(ffmpeg_movie, __construct);
+FFMPEG_PHP_CONSTRUCTOR(ffmpeg_movie, __construct);
 
 /* movie methods */
 FFMPEG_PHP_METHOD(ffmpeg_movie, getDuration);

Property changes on: ffmpeg_movie.h
___________________________________________________________________
Deleted: svn:keywords
   - Author Date Id Revision
Deleted: svn:eol-style
   - native

Index: run-tests.php
===================================================================
--- a/run-tests.php	(.../branches/ffmpeg-php/ffmpeg-php-0.6.0)
+++ b/run-tests.php	(.../trunk/ffmpeg-php)
@@ -0,0 +1,2328 @@
+#!/usr/bin/php
+<?php
+/*
+   +----------------------------------------------------------------------+
+   | PHP Version 5, 6                                                     |
+   +----------------------------------------------------------------------+
+   | Copyright (c) 1997-2008 The PHP Group                                |
+   +----------------------------------------------------------------------+
+   | This source file is subject to version 3.01 of the PHP license,      |
+   | that is bundled with this package in the file LICENSE, and is        |
+   | available through the world-wide-web at the following url:           |
+   | http://www.php.net/license/3_01.txt                                  |
+   | If you did not receive a copy of the PHP license and are unable to   |
+   | obtain it through the world-wide-web, please send a note to          |
+   | license@php.net so we can mail you a copy immediately.               |
+   +----------------------------------------------------------------------+
+   | Authors: Ilia Alshanetsky <iliaa@php.net>                            |
+   |          Preston L. Bannister <pbannister@php.net>                   |
+   |          Marcus Boerger <helly@php.net>                              |
+   |          Derick Rethans <derick@php.net>                             |
+   |          Sander Roobol <sander@php.net>                              |
+   | (based on version by: Stig Bakken <ssb@php.net>)                     |
+   | (based on the PHP 3 test framework by Rasmus Lerdorf)                |
+   +----------------------------------------------------------------------+
+ */
+
+/* $Id: run-tests.php,v 1.226.2.37.2.51 2008/12/03 14:27:43 robinf Exp $ */
+
+/* Sanity check to ensure that pcre extension needed by this script is available.
+ * In the event it is not, print a nice error message indicating that this script will
+ * not run without it.
+ */
+
+if (!extension_loaded('pcre')) {
+	echo <<<NO_PCRE_ERROR
+
++-----------------------------------------------------------+
+|                       ! ERROR !                           |
+| The test-suite requires that you have pcre extension      |
+| enabled. To enable this extension either compile your PHP |
+| with --with-pcre-regex or if you've compiled pcre as a    |
+| shared module load it via php.ini.                        |
++-----------------------------------------------------------+
+
+NO_PCRE_ERROR;
+exit;
+}
+
+if (!function_exists('proc_open')) {
+	echo <<<NO_PROC_OPEN_ERROR
+
++-----------------------------------------------------------+
+|                       ! ERROR !                           |
+| The test-suite requires that proc_open() is available.    |
+| Please check if you disabled it in php.ini.               |
++-----------------------------------------------------------+
+
+NO_PROC_OPEN_ERROR;
+exit;
+}
+
+// If timezone is not set, use UTC.
+if (ini_get('date.timezone') == '') {
+	date_default_timezone_set('UTC');
+}
+
+// store current directory
+$CUR_DIR = getcwd();
+
+// change into the PHP source directory.
+
+if (getenv('TEST_PHP_SRCDIR')) {
+	@chdir(getenv('TEST_PHP_SRCDIR'));
+}
+
+// Delete some security related environment variables
+putenv('SSH_CLIENT=deleted');
+putenv('SSH_AUTH_SOCK=deleted');
+putenv('SSH_TTY=deleted');
+putenv('SSH_CONNECTION=deleted');
+
+$cwd = getcwd();
+set_time_limit(0);
+
+ini_set('pcre.backtrack_limit', PHP_INT_MAX);
+
+$valgrind_version = 0;
+$valgrind_header = '';
+
+// delete as much output buffers as possible
+while(@ob_end_clean());
+if (ob_get_level()) echo "Not all buffers were deleted.\n";
+
+error_reporting(E_ALL);
+if (PHP_MAJOR_VERSION < 6) {
+	ini_set('magic_quotes_runtime',0); // this would break tests by modifying EXPECT sections
+	if (ini_get('safe_mode')) {
+		echo <<< SAFE_MODE_WARNING
+
++-----------------------------------------------------------+
+|                       ! WARNING !                         |
+| You are running the test-suite with "safe_mode" ENABLED ! |
+|                                                           |
+| Chances are high that no test will work at all,           |
+| depending on how you configured "safe_mode" !             |
++-----------------------------------------------------------+
+
+
+SAFE_MODE_WARNING;
+	}
+}
+
+$environment = isset($_ENV) ? $_ENV : array();
+
+// Don't ever guess at the PHP executable location.
+// Require the explicit specification.
+// Otherwise we could end up testing the wrong file!
+
+$php = null;
+$php_cgi = null;
+
+if (getenv('TEST_PHP_EXECUTABLE')) {
+	$php = getenv('TEST_PHP_EXECUTABLE');
+
+	if ($php=='auto') {
+		$php = $cwd . '/sapi/cli/php';
+		putenv("TEST_PHP_EXECUTABLE=$php");
+
+		if (!getenv('TEST_PHP_CGI_EXECUTABLE')) {
+			$php_cgi = $cwd . '/sapi/cgi/php-cgi';
+
+			if (file_exists($php_cgi)) {
+				putenv("TEST_PHP_CGI_EXECUTABLE=$php_cgi");
+			} else {
+				$php_cgi = null;
+			}
+		}
+	}
+	$environment['TEST_PHP_EXECUTABLE'] = $php;
+}
+
+if (getenv('TEST_PHP_CGI_EXECUTABLE')) {
+	$php_cgi = getenv('TEST_PHP_CGI_EXECUTABLE');
+
+	if ($php_cgi=='auto') {
+		$php_cgi = $cwd . '/sapi/cgi/php-cgi';
+		putenv("TEST_PHP_CGI_EXECUTABLE=$php_cgi");
+	}
+
+	$environment['TEST_PHP_CGI_EXECUTABLE'] = $php_cgi;
+}
+
+function verify_config()
+{
+	global $php;
+
+	if (empty($php) || !file_exists($php)) {
+		error('environment variable TEST_PHP_EXECUTABLE must be set to specify PHP executable!');
+	}
+
+	if (function_exists('is_executable') && !is_executable($php)) {
+		error("invalid PHP executable specified by TEST_PHP_EXECUTABLE  = $php");
+	}
+}
+
+if (getenv('TEST_PHP_LOG_FORMAT')) {
+	$log_format = strtoupper(getenv('TEST_PHP_LOG_FORMAT'));
+} else {
+	$log_format = 'LEOD';
+}
+
+// Check whether a detailed log is wanted.
+if (getenv('TEST_PHP_DETAILED')) {
+	$DETAILED = getenv('TEST_PHP_DETAILED');
+} else {
+	$DETAILED = 0;
+}
+
+// Check whether user test dirs are requested.
+if (getenv('TEST_PHP_USER')) {
+	$user_tests = explode (',', getenv('TEST_PHP_USER'));
+} else {
+	$user_tests = array();
+}
+
+$exts_to_test = array();
+$ini_overwrites = array(
+		'output_handler=',
+		'open_basedir=',
+		'safe_mode=0',
+		'disable_functions=',
+		'output_buffering=Off',
+		'error_reporting=' . (E_ALL | E_STRICT),
+		'display_errors=1',
+		'display_startup_errors=1',
+		'log_errors=0',
+		'html_errors=0',
+		'track_errors=1',
+		'report_memleaks=1',
+		'report_zend_debug=0',
+		'docref_root=',
+		'docref_ext=.html',
+		'error_prepend_string=',
+		'error_append_string=',
+		'auto_prepend_file=',
+		'auto_append_file=',
+		'magic_quotes_runtime=0',
+		'ignore_repeated_errors=0',
+		'unicode.runtime_encoding=ISO-8859-1',
+		'unicode.script_encoding=UTF-8',
+		'unicode.output_encoding=UTF-8',
+		'unicode.from_error_mode=U_INVALID_SUBSTITUTE',
+	);
+
+function write_information($show_html)
+{
+	global $cwd, $php, $php_cgi, $php_info, $user_tests, $ini_overwrites, $pass_options, $exts_to_test, $leak_check, $valgrind_header;
+
+	// Get info from php
+	$info_file = realpath(dirname(__FILE__)) . '/run-test-info.php';
+	@unlink($info_file);
+	$php_info = '<?php echo "
+PHP_SAPI    : " , PHP_SAPI , "
+PHP_VERSION : " , phpversion() , "
+ZEND_VERSION: " , zend_version() , "
+PHP_OS      : " , PHP_OS , " - " , php_uname() , "
+INI actual  : " , realpath(get_cfg_var("cfg_file_path")) , "
+More .INIs  : " , (function_exists(\'php_ini_scanned_files\') ? str_replace("\n","", php_ini_scanned_files()) : "** not determined **"); ?>';
+	save_text($info_file, $php_info);
+	$info_params = array();
+	settings2array($ini_overwrites, $info_params);
+	settings2params($info_params);
+	$php_info = `$php $pass_options $info_params "$info_file"`;
+	define('TESTED_PHP_VERSION', `$php -n -r "echo PHP_VERSION;"`);
+
+	if ($php_cgi && $php != $php_cgi) {
+		$php_info_cgi = `$php_cgi $pass_options $info_params -q "$info_file"`;
+		$php_info_sep = "\n---------------------------------------------------------------------";
+		$php_cgi_info = "$php_info_sep\nPHP         : $php_cgi $php_info_cgi$php_info_sep";
+	} else {
+		$php_cgi_info = '';
+	}
+
+	@unlink($info_file);
+
+	// load list of enabled extensions
+	save_text($info_file, '<?php echo join(",", get_loaded_extensions()); ?>');
+	$exts_to_test = explode(',',`$php $pass_options $info_params "$info_file"`);
+	// check for extensions that need special handling and regenerate
+	$info_params_ex = array(
+		'session' => array('session.auto_start=0'),
+		'tidy' => array('tidy.clean_output=0'),
+		'zlib' => array('zlib.output_compression=Off'),
+		'xdebug' => array('xdebug.default_enable=0'),
+		'mbstring' => array('mbstring.func_overload=0'),
+	);
+
+	foreach($info_params_ex as $ext => $ini_overwrites_ex) {
+		if (in_array($ext, $exts_to_test)) {
+			$ini_overwrites = array_merge($ini_overwrites, $ini_overwrites_ex);
+		}
+	}
+
+	@unlink($info_file);
+
+	// Write test context information.
+	echo "
+=====================================================================
+PHP         : $php $php_info $php_cgi_info
+CWD         : $cwd
+Extra dirs  : ";
+	foreach ($user_tests as $test_dir) {
+		echo "{$test_dir}\n              ";
+	}
+	echo "
+VALGRIND    : " . ($leak_check ? $valgrind_header : 'Not used') . "
+=====================================================================
+";
+}
+
+define('PHP_QA_EMAIL', 'qa-reports@lists.php.net');
+define('QA_SUBMISSION_PAGE', 'http://qa.php.net/buildtest-process.php');
+
+function save_or_mail_results()
+{
+	global $sum_results, $just_save_results, $failed_test_summary,
+	       $PHP_FAILED_TESTS, $CUR_DIR, $php, $output_file, $compression;
+
+	/* We got failed Tests, offer the user to send an e-mail to QA team, unless NO_INTERACTION is set */
+	if (false) {
+		$fp = fopen("php://stdin", "r+");
+		if ($sum_results['FAILED'] || $sum_results['BORKED'] || $sum_results['WARNED'] || $sum_results['LEAKED'] || $sum_results['XFAILED']) {
+			echo "\nYou may have found a problem in PHP.";
+		}
+		echo "\nWe would like to send this report automatically to the\n";
+		echo "PHP QA team, to give us a better understanding of how\nthe test cases are doing. If you don't want to send it\n";
+		echo "immediately, you can choose \"s\" to save the report to\na file that you can send us later.\n";
+		echo "Do you want to send this report now? [Yns]: ";
+		flush();
+
+		$user_input = fgets($fp, 10);
+		$just_save_results = (strtolower($user_input[0]) == 's');
+	}
+
+	if ($just_save_results || false) {
+		if ($just_save_results || strlen(trim($user_input)) == 0 || strtolower($user_input[0]) == 'y') {
+			/*
+			 * Collect information about the host system for our report
+			 * Fetch phpinfo() output so that we can see the PHP enviroment
+			 * Make an archive of all the failed tests
+			 * Send an email
+			 */
+			if ($just_save_results) {
+				$user_input = 's';
+			}
+
+			/* Ask the user to provide an email address, so that QA team can contact the user */
+			if (!strncasecmp($user_input, 'y', 1) || strlen(trim($user_input)) == 0) {
+				echo "\nPlease enter your email address.\n(Your address will be mangled so that it will not go out on any\nmailinglist in plain text): ";
+				flush();
+				$user_email = trim(fgets($fp, 1024));
+				$user_email = str_replace("@", " at ", str_replace(".", " dot ", $user_email));
+			}
+
+			$failed_tests_data = '';
+			$sep = "\n" . str_repeat('=', 80) . "\n";
+			$failed_tests_data .= $failed_test_summary . "\n";
+			$failed_tests_data .= get_summary(true, false) . "\n";
+
+			if ($sum_results['FAILED']) {
+				foreach ($PHP_FAILED_TESTS['FAILED'] as $test_info) {
+					$failed_tests_data .= $sep . $test_info['name'] . $test_info['info'];
+					$failed_tests_data .= $sep . file_get_contents(realpath($test_info['output']));
+					$failed_tests_data .= $sep . file_get_contents(realpath($test_info['diff']));
+					$failed_tests_data .= $sep . "\n\n";
+				}
+				$status = "failed";
+			} else {
+				$status = "success";
+			}
+
+			$failed_tests_data .= "\n" . $sep . 'BUILD ENVIRONMENT' . $sep;
+			$failed_tests_data .= "OS:\n" . PHP_OS . " - " . php_uname() . "\n\n";
+			$ldd = $autoconf = $sys_libtool = $libtool = $compiler = 'N/A';
+
+			if (substr(PHP_OS, 0, 3) != "WIN") {
+				/* If PHP_AUTOCONF is set, use it; otherwise, use 'autoconf'. */
+				if (getenv('PHP_AUTOCONF')) {
+					$autoconf = shell_exec(getenv('PHP_AUTOCONF') . ' --version');
+				} else {
+					$autoconf = shell_exec('autoconf --version');
+				}
+
+				/* Always use the generated libtool - Mac OSX uses 'glibtool' */
+				$libtool = shell_exec($CUR_DIR . '/libtool --version');
+
+				/* Use shtool to find out if there is glibtool present (MacOSX) */
+				$sys_libtool_path = shell_exec(realpath(dirname(__FILE__)) . '/build/shtool path glibtool libtool');
+
+				if ($sys_libtool_path) {
+					$sys_libtool = shell_exec(str_replace("\n", "", $sys_libtool_path) . ' --version');
+				}
+
+				/* Try the most common flags for 'version' */
+				$flags = array('-v', '-V', '--version');
+				$cc_status = 0;
+
+				foreach($flags AS $flag) {
+					system(getenv('CC') . " $flag >/dev/null 2>&1", $cc_status);
+					if ($cc_status == 0) {
+						$compiler = shell_exec(getenv('CC') . " $flag 2>&1");
+						break;
+					}
+				}
+
+				$ldd = shell_exec("ldd $php 2>/dev/null");
+			}
+
+			$failed_tests_data .= "Autoconf:\n$autoconf\n";
+			$failed_tests_data .= "Bundled Libtool:\n$libtool\n";
+			$failed_tests_data .= "System Libtool:\n$sys_libtool\n";
+			$failed_tests_data .= "Compiler:\n$compiler\n";
+			$failed_tests_data .= "Bison:\n". shell_exec('bison --version 2>/dev/null') . "\n";
+			$failed_tests_data .= "Libraries:\n$ldd\n";
+			$failed_tests_data .= "\n";
+
+			if (isset($user_email)) {
+				$failed_tests_data .= "User's E-mail: " . $user_email . "\n\n";
+			}
+
+			$failed_tests_data .= $sep . "PHPINFO" . $sep;
+			$failed_tests_data .= shell_exec($php . ' -ddisplay_errors=stderr -dhtml_errors=0 -i 2> /dev/null');
+
+			if ($just_save_results || !mail_qa_team($failed_tests_data, $compression, $status)) {
+				file_put_contents($output_file, $failed_tests_data);
+
+				if (!$just_save_results) {
+					echo "\nThe test script was unable to automatically send the report to PHP's QA Team\n";
+				}
+
+				echo "Please send " . $output_file . " to " . PHP_QA_EMAIL . " manually, thank you.\n";
+			} else {
+				fwrite($fp, "\nThank you for helping to make PHP better.\n");
+				fclose($fp);
+			}
+		}
+	}
+}
+
+// Determine the tests to be run.
+
+$test_files = array();
+$redir_tests = array();
+$test_results = array();
+$PHP_FAILED_TESTS = array('BORKED' => array(), 'FAILED' => array(), 'WARNED' => array(), 'LEAKED' => array(), 'XFAILED' => array());
+
+// If parameters given assume they represent selected tests to run.
+$failed_tests_file= false;
+$pass_option_n = false;
+$pass_options = '';
+
+$compression = 0;
+$output_file = $CUR_DIR . '/php_test_results_' . date('Ymd_Hi') . '.txt';
+
+if ($compression) {
+	$output_file = 'compress.zlib://' . $output_file . '.gz';
+}
+
+$just_save_results = false;
+$leak_check = false;
+$html_output = false;
+$html_file = null;
+$temp_source = null;
+$temp_target = null;
+$temp_urlbase = null;
+$conf_passed = null;
+$no_clean = false;
+
+$cfgtypes = array('show', 'keep');
+$cfgfiles = array('skip', 'php', 'clean', 'out', 'diff', 'exp');
+$cfg = array();
+
+foreach($cfgtypes as $type) {
+	$cfg[$type] = array();
+
+	foreach($cfgfiles as $file) {
+		$cfg[$type][$file] = false;
+	}
+}
+
+if (getenv('TEST_PHP_ARGS')) {
+
+	if (!isset($argc) || !$argc || !isset($argv)) {
+		$argv = array(__FILE__);
+	}
+
+	$argv = array_merge($argv, split(' ', getenv('TEST_PHP_ARGS')));
+	$argc = count($argv);
+}
+
+if (isset($argc) && $argc > 1) {
+
+	for ($i=1; $i<$argc; $i++) {
+		$is_switch = false;
+		$switch = substr($argv[$i],1,1);
+		$repeat = substr($argv[$i],0,1) == '-';
+
+		while ($repeat) {
+
+			if (!$is_switch) {
+				$switch = substr($argv[$i],1,1);
+			}
+
+			$is_switch = true;
+
+			if ($repeat) {
+				foreach($cfgtypes as $type) {
+					if (strpos($switch, '--' . $type) === 0) {
+						foreach($cfgfiles as $file) {
+							if ($switch == '--' . $type . '-' . $file) {
+								$cfg[$type][$file] = true;
+								$is_switch = false;
+								break;
+							}
+						}
+					}
+				}
+			}
+
+			if (!$is_switch) {
+				$is_switch = true;
+				break;
+			}
+
+			$repeat = false;
+
+			switch($switch) {
+				case 'r':
+				case 'l':
+					$test_list = file($argv[++$i]);
+					if ($test_list) {
+						foreach($test_list as $test) {
+							$matches = array();
+							if (preg_match('/^#.*\[(.*)\]\:\s+(.*)$/', $test, $matches)) {
+								$redir_tests[] = array($matches[1], $matches[2]);
+							} else if (strlen($test)) {
+								$test_files[] = trim($test);
+							}
+						}
+					}
+					if ($switch != 'l') {
+						break;
+					}
+					$i--;
+					// break left intentionally
+				case 'w':
+					$failed_tests_file = fopen($argv[++$i], 'w+t');
+					break;
+				case 'a':
+					$failed_tests_file = fopen($argv[++$i], 'a+t');
+					break;
+				case 'c':
+					$conf_passed = $argv[++$i];
+					break;
+				case 'd':
+					$ini_overwrites[] = $argv[++$i];
+					break;
+				//case 'h'
+				case '--keep-all':
+					foreach($cfgfiles as $file) {
+						$cfg['keep'][$file] = true;
+					}
+					break;
+				//case 'l'
+				case 'm':
+					$leak_check = true;
+					$valgrind_cmd = "valgrind --version";
+					$valgrind_header = system_with_timeout($valgrind_cmd);
+					$replace_count = 0;
+					if (!$valgrind_header) {
+						error("Valgrind returned no version info, cannot proceed.\nPlease check if Valgrind is installed.");
+					} else {
+						$valgrind_version = preg_replace("/valgrind-([0-9])\.([0-9])\.([0-9]+)([.-]\w+)?(\s+)/", '$1$2$3', $valgrind_header, 1, $replace_count);
+						if ($replace_count != 1 || !is_numeric($valgrind_version)) {
+							error("Valgrind returned invalid version info (\"$valgrind_header\"), cannot proceed.");
+						}
+						$valgrind_header = trim($valgrind_header);
+					}
+					break;
+				case 'n':
+					if (!$pass_option_n) {
+						$pass_options .= ' -n';
+					}
+					$pass_option_n = true;
+					break;
+				case '--no-clean':
+					$no_clean = true;
+					break;
+				case 'p':
+					$php = $argv[++$i];
+					putenv("TEST_PHP_EXECUTABLE=$php");
+					break;
+				case 'q':
+					putenv('NO_INTERACTION=1');
+					break;
+				//case 'r'
+				case 's':
+					$output_file = $argv[++$i];
+					$just_save_results = true;
+					break;
+				case '--set-timeout':
+					$environment['TEST_TIMEOUT'] = $argv[++$i];
+					break;
+				case '--show-all':
+					foreach($cfgfiles as $file) {
+						$cfg['show'][$file] = true;
+					}
+					break;
+				case '--temp-source':
+					$temp_source = $argv[++$i];
+					break;
+				case '--temp-target':
+					$temp_target = $argv[++$i];
+					if ($temp_urlbase) {
+						$temp_urlbase = $temp_target;
+					}
+					break;
+				case '--temp-urlbase':
+					$temp_urlbase = $argv[++$i];
+					break;
+				case 'v':
+				case '--verbose':
+					$DETAILED = true;
+					break;
+				case 'x':
+					$environment['SKIP_SLOW_TESTS'] = 1;
+					break;
+				//case 'w'
+				case '-':
+					// repeat check with full switch
+					$switch = $argv[$i];
+					if ($switch != '-') {
+						$repeat = true;
+					}
+					break;
+				case '--html':
+					$html_file = fopen($argv[++$i], 'wt');
+					$html_output = is_resource($html_file);
+					break;
+				case '--version':
+					echo '$Revision: 1.226.2.37.2.51 $' . "\n";
+					exit(1);
+
+				default:
+					echo "Illegal switch '$switch' specified!\n";
+				case 'h':
+				case '-help':
+				case '--help':
+					echo <<<HELP
+Synopsis:
+    php run-tests.php [options] [files] [directories]
+
+Options:
+    -l <file>   Read the testfiles to be executed from <file>. After the test
+                has finished all failed tests are written to the same <file>.
+                If the list is empty and no further test is specified then
+                all tests are executed (same as: -r <file> -w <file>).
+
+    -r <file>   Read the testfiles to be executed from <file>.
+
+    -w <file>   Write a list of all failed tests to <file>.
+
+    -a <file>   Same as -w but append rather then truncating <file>.
+
+    -c <file>   Look for php.ini in directory <file> or use <file> as ini.
+
+    -n          Pass -n option to the php binary (Do not use a php.ini).
+
+    -d foo=bar  Pass -d option to the php binary (Define INI entry foo
+                with value 'bar').
+
+    -m          Test for memory leaks with Valgrind.
+
+    -p <php>    Specify PHP executable to run.
+
+    -q          Quiet, no user interaction (same as environment NO_INTERACTION).
+
+    -s <file>   Write output to <file>.
+
+    -x          Sets 'SKIP_SLOW_TESTS' environmental variable.
+
+    --verbose
+    -v          Verbose mode.
+
+    --help
+    -h          This Help.
+
+    --html <file> Generate HTML output.
+
+    --temp-source <sdir>  --temp-target <tdir> [--temp-urlbase <url>]
+                Write temporary files to <tdir> by replacing <sdir> from the
+                filenames to generate with <tdir>. If --html is being used and
+                <url> given then the generated links are relative and prefixed
+                with the given url. In general you want to make <sdir> the path
+                to your source files and <tdir> some pach in your web page
+                hierarchy with <url> pointing to <tdir>.
+
+    --keep-[all|php|skip|clean]
+                Do not delete 'all' files, 'php' test file, 'skip' or 'clean'
+                file.
+
+    --set-timeout [n]
+                Set timeout for individual tests, where [n] is the number of
+                seconds. The default value is 60 seconds, or 300 seconds when
+                testing for memory leaks.
+
+    --show-[all|php|skip|clean|exp|diff|out]
+                Show 'all' files, 'php' test file, 'skip' or 'clean' file. You
+                can also use this to show the output 'out', the expected result
+                'exp' or the difference between them 'diff'. The result types
+                get written independent of the log format, however 'diff' only
+                exists when a test fails.
+
+    --no-clean  Do not execute clean section if any.
+
+HELP;
+					exit(1);
+			}
+		}
+
+		if (!$is_switch) {
+			$testfile = realpath($argv[$i]);
+
+			if (!$testfile && strpos($argv[$i], '*') !== false && function_exists('glob')) {
+
+				if (preg_match("/\.phpt$/", $argv[$i])) {
+					$pattern_match = glob($argv[$i]);
+				} else if (preg_match("/\*$/", $argv[$i])) {
+					$pattern_match = glob($argv[$i] . '.phpt');
+				} else {
+					die("bogus test name " . $argv[$i] . "\n");
+				}
+
+				if (is_array($pattern_match)) {
+					$test_files = array_merge($test_files, $pattern_match);
+				}
+
+			} else if (is_dir($testfile)) {
+				find_files($testfile);
+			} else if (preg_match("/\.phpt$/", $testfile)) {
+				$test_files[] = $testfile;
+			} else {
+				die("bogus test name " . $argv[$i] . "\n");
+			}
+		}
+	}
+
+	if (strlen($conf_passed)) {
+		if (substr(PHP_OS, 0, 3) == "WIN") {
+			$pass_options .= " -c " . escapeshellarg($conf_passed);
+		} else {
+			$pass_options .= " -c '$conf_passed'";
+		}
+	}
+
+	$test_files = array_unique($test_files);
+	$test_files = array_merge($test_files, $redir_tests);
+
+	// Run selected tests.
+	$test_cnt = count($test_files);
+
+	if ($test_cnt) {
+		putenv('NO_INTERACTION=1');
+		verify_config();
+		write_information($html_output);
+		usort($test_files, "test_sort");
+		$start_time = time();
+
+		if (!$html_output) {
+			echo "Running selected tests.\n";
+		} else {
+			show_start($start_time);
+		}
+
+		$test_idx = 0;
+		run_all_tests($test_files, $environment);
+		$end_time = time();
+
+		if ($html_output) {
+			show_end($end_time);
+		}
+
+		if ($failed_tests_file) {
+			fclose($failed_tests_file);
+		}
+
+		if (count($test_files) || count($test_results)) {
+			compute_summary();
+			if ($html_output) {
+				fwrite($html_file, "<hr/>\n" . get_summary(false, true));
+			}
+			echo "=====================================================================";
+			echo get_summary(false, false);
+		}
+
+		if ($html_output) {
+			fclose($html_file);
+		}
+
+		if ($output_file != '' && $just_save_results) {
+			save_or_mail_results();
+		}
+
+		if (getenv('REPORT_EXIT_STATUS') == 1 and preg_match('/FAILED(?: |$)/', implode(' ', $test_results))) {
+			exit(1);
+		}
+
+		exit(0);
+	}
+}
+
+verify_config();
+write_information($html_output);
+
+// Compile a list of all test files (*.phpt).
+$test_files = array();
+$exts_tested = count($exts_to_test);
+$exts_skipped = 0;
+$ignored_by_ext = 0;
+sort($exts_to_test);
+$test_dirs = array();
+$optionals = array('tests', 'ext', 'Zend', 'ZendEngine2', 'sapi/cli', 'sapi/cgi');
+
+foreach($optionals as $dir) {
+	if (@filetype($dir) == 'dir') {
+		$test_dirs[] = $dir;
+	}
+}
+
+// Convert extension names to lowercase
+foreach ($exts_to_test as $key => $val) {
+	$exts_to_test[$key] = strtolower($val);
+}
+
+foreach ($test_dirs as $dir) {
+	find_files("{$cwd}/{$dir}", ($dir == 'ext'));
+}
+
+foreach ($user_tests as $dir) {
+	find_files($dir, ($dir == 'ext'));
+}
+
+function find_files($dir, $is_ext_dir = false, $ignore = false)
+{
+	global $test_files, $exts_to_test, $ignored_by_ext, $exts_skipped, $exts_tested;
+
+	$o = opendir($dir) or error("cannot open directory: $dir");
+
+	while (($name = readdir($o)) !== false) {
+
+		if (is_dir("{$dir}/{$name}") && !in_array($name, array('.', '..', 'CVS'))) {
+			$skip_ext = ($is_ext_dir && !in_array(strtolower($name), $exts_to_test));
+			if ($skip_ext) {
+				$exts_skipped++;
+			}
+			find_files("{$dir}/{$name}", false, $ignore || $skip_ext);
+		}
+
+		// Cleanup any left-over tmp files from last run.
+		if (substr($name, -4) == '.tmp') {
+			@unlink("$dir/$name");
+			continue;
+		}
+
+		// Otherwise we're only interested in *.phpt files.
+		if (substr($name, -5) == '.phpt') {
+			if ($ignore) {
+				$ignored_by_ext++;
+			} else {
+				$testfile = realpath("{$dir}/{$name}");
+				$test_files[] = $testfile;
+			}
+		}
+	}
+
+	closedir($o);
+}
+
+function test_name($name)
+{
+	if (is_array($name)) {
+		return $name[0] . ':' . $name[1];
+	} else {
+		return $name;
+	}
+}
+
+function test_sort($a, $b)
+{
+	global $cwd;
+
+	$a = test_name($a);
+	$b = test_name($b);
+
+	$ta = strpos($a, "{$cwd}/tests") === 0 ? 1 + (strpos($a, "{$cwd}/tests/run-test") === 0 ? 1 : 0) : 0;
+	$tb = strpos($b, "{$cwd}/tests") === 0 ? 1 + (strpos($b, "{$cwd}/tests/run-test") === 0 ? 1 : 0) : 0;
+
+	if ($ta == $tb) {
+		return strcmp($a, $b);
+	} else {
+		return $tb - $ta;
+	}
+}
+
+$test_files = array_unique($test_files);
+usort($test_files, "test_sort");
+
+$start_time = time();
+show_start($start_time);
+
+$test_cnt = count($test_files);
+$test_idx = 0;
+run_all_tests($test_files, $environment);
+$end_time = time();
+
+if ($failed_tests_file) {
+	fclose($failed_tests_file);
+}
+
+// Summarize results
+
+if (0 == count($test_results)) {
+	echo "No tests were run.\n";
+	return;
+}
+
+compute_summary();
+
+show_end($end_time);
+show_summary();
+
+if ($html_output) {
+	fclose($html_file);
+}
+
+save_or_mail_results();
+ 
+if (getenv('REPORT_EXIT_STATUS') == 1 and $sum_results['FAILED']) {
+	exit(1);
+}
+exit(0);
+
+//
+// Send Email to QA Team
+//
+
+function mail_qa_team($data, $compression, $status = false)
+{
+	$url_bits = parse_url(QA_SUBMISSION_PAGE);
+
+	if (empty($url_bits['port'])) {
+		$url_bits['port'] = 80;
+	}
+
+	$data = "php_test_data=" . urlencode(base64_encode(str_replace("\00", '[0x0]', $data)));
+	$data_length = strlen($data);
+
+	$fs = fsockopen($url_bits['host'], $url_bits['port'], $errno, $errstr, 10);
+
+	if (!$fs) {
+		return false;
+	}
+
+	$php_version = urlencode(TESTED_PHP_VERSION);
+
+	echo "\nPosting to {$url_bits['host']} {$url_bits['path']}\n";
+	fwrite($fs, "POST " . $url_bits['path'] . "?status=$status&version=$php_version HTTP/1.1\r\n");
+	fwrite($fs, "Host: " . $url_bits['host'] . "\r\n");
+	fwrite($fs, "User-Agent: QA Browser 0.1\r\n");
+	fwrite($fs, "Content-Type: application/x-www-form-urlencoded\r\n");
+	fwrite($fs, "Content-Length: " . $data_length . "\r\n\r\n");
+	fwrite($fs, $data);
+	fwrite($fs, "\r\n\r\n");
+	fclose($fs);
+
+	return 1;
+} 
+
+
+//
+//  Write the given text to a temporary file, and return the filename.
+//
+
+function save_text($filename, $text, $filename_copy = null)
+{
+	global $DETAILED;
+
+	if ($filename_copy && $filename_copy != $filename) {
+		if (file_put_contents($filename_copy, (binary) $text, FILE_BINARY) === false) {
+			error("Cannot open file '" . $filename_copy . "' (save_text)");
+		}
+	}
+
+	if (file_put_contents($filename, (binary) $text, FILE_BINARY) === false) {
+		error("Cannot open file '" . $filename . "' (save_text)");
+	}
+
+	if (1 < $DETAILED) echo "
+FILE $filename {{{
+$text
+}}} 
+";
+}
+
+//
+//  Write an error in a format recognizable to Emacs or MSVC.
+//
+
+function error_report($testname, $logname, $tested) 
+{
+	$testname = realpath($testname);
+	$logname  = realpath($logname);
+
+	switch (strtoupper(getenv('TEST_PHP_ERROR_STYLE'))) {
+		case 'MSVC':
+			echo $testname . "(1) : $tested\n";
+			echo $logname . "(1) :  $tested\n";
+			break;
+		case 'EMACS':
+			echo $testname . ":1: $tested\n";
+			echo $logname . ":1:  $tested\n";
+			break;
+	}
+}
+
+function system_with_timeout($commandline, $env = null, $stdin = null)
+{
+	global $leak_check;
+
+	$data = '';
+
+	$proc = proc_open($commandline, array(
+		0 => array('pipe', 'r'),
+		1 => array('pipe', 'w'),
+		2 => array('pipe', 'w')
+		), $pipes, null, $env, array('suppress_errors' => true, 'binary_pipes' => true));
+
+	if (!$proc) {
+		return false;
+	}
+
+	if (!is_null($stdin)) {
+		fwrite($pipes[0], (binary) $stdin);
+	}
+	fclose($pipes[0]);
+	
+	$timeout = $leak_check ? 300 : (isset($env['TEST_TIMEOUT']) ? $env['TEST_TIMEOUT'] : 60);
+
+	while (true) {
+		/* hide errors from interrupted syscalls */
+		$r = $pipes;
+		$w = null;
+		$e = null;
+
+		$n = @stream_select($r, $w, $e, $timeout);
+
+		if ($n === false) {
+			break;
+		} else if ($n === 0) {
+			/* timed out */
+			$data .= "\n ** ERROR: process timed out **\n";
+			proc_terminate($proc);
+			return $data;
+		} else if ($n > 0) {
+			$line = fread($pipes[1], 8192);
+			if (strlen($line) == 0) {
+				/* EOF */
+				break;
+			}
+			$data .= (binary) $line;
+		}
+	}
+
+	$stat = proc_get_status($proc);
+
+	if ($stat['signaled']) {
+		$data .= "\nTermsig=" . $stat['stopsig'];
+	}
+
+	$code = proc_close($proc);
+	return $data;
+}
+
+function run_all_tests($test_files, $env, $redir_tested = null)
+{
+	global $test_results, $failed_tests_file, $php, $test_cnt, $test_idx;
+
+	foreach($test_files as $name) {
+
+		if (is_array($name)) {
+			$index = "# $name[1]: $name[0]";
+
+			if ($redir_tested) {
+				$name = $name[0];
+			}
+		} else if ($redir_tested) {
+			$index = "# $redir_tested: $name";
+		} else {
+			$index = $name;
+		}
+		$test_idx++;
+		$result = run_test($php, $name, $env);
+
+		if (!is_array($name) && $result != 'REDIR') {
+			$test_results[$index] = $result;
+			if ($failed_tests_file && ($result == 'XFAILED' || $result == 'FAILED' || $result == 'WARNED' || $result == 'LEAKED')) {
+				fwrite($failed_tests_file, "$index\n");
+			}
+		}
+	}
+}
+
+//
+//  Show file or result block
+//
+function show_file_block($file, $block, $section = null)
+{
+	global $cfg;
+
+	if ($cfg['show'][$file]) {
+
+		if (is_null($section)) {
+			$section = strtoupper($file);
+		}
+
+		echo "\n========" . $section . "========\n";
+		echo rtrim($block);
+		echo "\n========DONE========\n";
+	}
+}
+
+//
+//  Run an individual test case.
+//
+function run_test($php, $file, $env)
+{
+	global $log_format, $info_params, $ini_overwrites, $cwd, $PHP_FAILED_TESTS;
+	global $pass_options, $DETAILED, $IN_REDIRECT, $test_cnt, $test_idx;
+	global $leak_check, $temp_source, $temp_target, $cfg, $environment;
+	global $no_clean;
+	global $valgrind_version;
+
+	$temp_filenames = null;
+	$org_file = $file;
+
+	if (isset($env['TEST_PHP_CGI_EXECUTABLE'])) {
+		$php_cgi = $env['TEST_PHP_CGI_EXECUTABLE'];
+	}
+
+	if (is_array($file)) {
+		$file = $file[0];
+	}
+
+	if ($DETAILED) echo "
+=================
+TEST $file
+";
+
+	// Load the sections of the test file.
+	$section_text = array('TEST' => '');
+
+	$fp = fopen($file, "rt") or error("Cannot open test file: $file");
+
+	$borked = false;
+	$bork_info = '';
+
+	if (!feof($fp)) {
+		$line = fgets($fp);
+
+		if ($line === false) {
+			$bork_info = "cannot read test";
+			$borked = true;
+		}
+	} else {
+		$bork_info = "empty test [$file]";
+		$borked = true;
+	}
+	if (!$borked && strncmp('--TEST--', $line, 8)) {
+		$bork_info = "tests must start with --TEST-- [$file]";
+		$borked = true;
+	}
+
+	$section = 'TEST';
+	$secfile = false;
+	$secdone = false;
+
+	while (!feof($fp)) {
+		$line = fgets($fp);
+
+		// Match the beginning of a section.
+		if (preg_match('/^--([_A-Z]+)--/', $line, $r)) {
+			$section = $r[1];
+
+			if (isset($section_text[$section])) {
+				$bork_info = "duplicated $section section";
+				$borked    = true;
+			}
+
+			$section_text[$section] = '';
+			$secfile = $section == 'FILE' || $section == 'FILEEOF' || $section == 'FILE_EXTERNAL';
+			$secdone = false;
+			continue;
+		}
+
+		// Add to the section text.
+		if (!$secdone) {
+			$section_text[$section] .= $line;
+		}
+
+		// End of actual test?
+		if ($secfile && preg_match('/^===DONE===\s*$/', $line)) {
+			$secdone = true;
+		}
+	}
+
+	// the redirect section allows a set of tests to be reused outside of
+	// a given test dir
+	if (!$borked) {
+		if (@count($section_text['REDIRECTTEST']) == 1) {
+
+			if ($IN_REDIRECT) {
+				$borked = true;
+				$bork_info = "Can't redirect a test from within a redirected test";
+			} else {
+				$borked = false;
+			}
+
+		} else {
+
+			if (@count($section_text['FILE']) + @count($section_text['FILEEOF']) + @count($section_text['FILE_EXTERNAL']) != 1) {
+				$bork_info = "missing section --FILE--";
+				$borked = true;
+			}
+
+			if (@count($section_text['FILEEOF']) == 1) {
+				$section_text['FILE'] = preg_replace("/[\r\n]+$/", '', $section_text['FILEEOF']);
+				unset($section_text['FILEEOF']);
+			}
+
+			if (@count($section_text['FILE_EXTERNAL']) == 1) {
+				// don't allow tests to retrieve files from anywhere but this subdirectory
+				$section_text['FILE_EXTERNAL'] = dirname($file) . '/' . trim(str_replace('..', '', $section_text['FILE_EXTERNAL']));
+
+				if (file_exists($section_text['FILE_EXTERNAL'])) {
+					$section_text['FILE'] = file_get_contents($section_text['FILE_EXTERNAL']);
+					unset($section_text['FILE_EXTERNAL']);
+				} else {
+					$bork_info = "could not load --FILE_EXTERNAL-- " . dirname($file) . '/' . trim($section_text['FILE_EXTERNAL']);
+					$borked = true;
+				}
+			}
+
+			if ((@count($section_text['EXPECT']) + @count($section_text['EXPECTF']) + @count($section_text['EXPECTREGEX'])) != 1) {
+				$bork_info = "missing section --EXPECT--, --EXPECTF-- or --EXPECTREGEX--";
+				$borked = true;
+			}
+		}
+	}
+	fclose($fp);
+
+	$shortname = str_replace($cwd . '/', '', $file);
+	$tested_file = $shortname;
+
+	if ($borked) {
+		show_result("BORK", $bork_info, $tested_file);
+		$PHP_FAILED_TESTS['BORKED'][] = array (
+								'name'      => $file,
+								'test_name' => '',
+								'output'    => '',
+								'diff'      => '',
+								'info'      => "$bork_info [$file]",
+		);
+		return 'BORKED';
+	}
+
+	$tested = trim($section_text['TEST']);
+
+	/* For GET/POST tests, check if cgi sapi is available and if it is, use it. */
+	if (!empty($section_text['GET']) || !empty($section_text['POST']) || !empty($section_text['POST_RAW']) || !empty($section_text['COOKIE']) || !empty($section_text['EXPECTHEADERS'])) {
+		if (isset($php_cgi)) {
+			$old_php = $php;
+			$php = $php_cgi . ' -C ';
+		} else if (!strncasecmp(PHP_OS, "win", 3) && file_exists(dirname($php) . "/php-cgi.exe")) {
+			$old_php = $php;
+			$php = realpath(dirname($php) . "/php-cgi.exe") . ' -C ';
+		} else {
+			if (file_exists(dirname($php) . "/../../sapi/cgi/php-cgi")) {
+				$old_php = $php;
+				$php = realpath(dirname($php) . "/../../sapi/cgi/php-cgi") . ' -C ';
+			} else if (file_exists("./sapi/cgi/php-cgi")) {
+				$old_php = $php;
+				$php = realpath("./sapi/cgi/php-cgi") . ' -C ';
+			} else {
+				show_result('SKIP', $tested, $tested_file, "reason: CGI not available");
+				return 'SKIPPED';
+			}
+		}
+	}
+
+	show_test($test_idx, $shortname);
+
+	if (is_array($IN_REDIRECT)) {
+		$temp_dir = $test_dir = $IN_REDIRECT['dir'];
+	} else {
+		$temp_dir = $test_dir = realpath(dirname($file));
+	}
+
+	if ($temp_source && $temp_target) {
+		$temp_dir = str_replace($temp_source, $temp_target, $temp_dir);
+	}
+
+	$main_file_name = basename($file,'phpt');
+
+	$diff_filename     = $temp_dir . DIRECTORY_SEPARATOR . $main_file_name . 'diff';
+	$log_filename      = $temp_dir . DIRECTORY_SEPARATOR . $main_file_name . 'log';
+	$exp_filename      = $temp_dir . DIRECTORY_SEPARATOR . $main_file_name . 'exp';
+	$output_filename   = $temp_dir . DIRECTORY_SEPARATOR . $main_file_name . 'out';
+	$memcheck_filename = $temp_dir . DIRECTORY_SEPARATOR . $main_file_name . 'mem';
+	$temp_file         = $temp_dir . DIRECTORY_SEPARATOR . $main_file_name . 'php';
+	$test_file         = $test_dir . DIRECTORY_SEPARATOR . $main_file_name . 'php';
+	$temp_skipif       = $temp_dir . DIRECTORY_SEPARATOR . $main_file_name . 'skip.php';
+	$test_skipif       = $test_dir . DIRECTORY_SEPARATOR . $main_file_name . 'skip.php';
+	$temp_clean        = $temp_dir . DIRECTORY_SEPARATOR . $main_file_name . 'clean.php';
+	$test_clean        = $test_dir . DIRECTORY_SEPARATOR . $main_file_name . 'clean.php';
+	$tmp_post          = $temp_dir . DIRECTORY_SEPARATOR . uniqid('/phpt.');
+	$tmp_relative_file = str_replace(realpath(dirname(__FILE__)) . DIRECTORY_SEPARATOR, '', $test_file) . 't';
+
+	if ($temp_source && $temp_target) {
+		$temp_skipif  .= 's';
+		$temp_file    .= 's';
+		$temp_clean   .= 's';
+		$copy_file     = $temp_dir . DIRECTORY_SEPARATOR . basename(is_array($file) ? $file[1] : $file) . '.phps';
+
+		if (!is_dir(dirname($copy_file))) {
+			mkdir(dirname($copy_file), 0777, true) or error("Cannot create output directory - " . dirname($copy_file));
+		}
+
+		if (isset($section_text['FILE'])) {
+			save_text($copy_file, $section_text['FILE']);
+		}
+
+		$temp_filenames = array(
+			'file' => $copy_file,
+			'diff' => $diff_filename,
+			'log'  => $log_filename,
+			'exp'  => $exp_filename,
+			'out'  => $output_filename,
+			'mem'  => $memcheck_filename,
+			'php'  => $temp_file,
+			'skip' => $temp_skipif,
+			'clean'=> $temp_clean);
+	}
+
+	if (is_array($IN_REDIRECT)) {
+		$tested = $IN_REDIRECT['prefix'] . ' ' . trim($section_text['TEST']);
+		$tested_file = $tmp_relative_file;
+		$section_text['FILE'] = "# original source file: $shortname\n" . $section_text['FILE'];
+	}
+
+	// unlink old test results
+	@unlink($diff_filename);
+	@unlink($log_filename);
+	@unlink($exp_filename);
+	@unlink($output_filename);
+	@unlink($memcheck_filename);
+	@unlink($temp_file);
+	@unlink($test_file);
+	@unlink($temp_skipif);
+	@unlink($test_skipif);
+	@unlink($tmp_post);
+	@unlink($temp_clean);
+	@unlink($test_clean);
+
+	// Reset environment from any previous test.
+	$env['REDIRECT_STATUS'] = '';
+	$env['QUERY_STRING']    = '';
+	$env['PATH_TRANSLATED'] = '';
+	$env['SCRIPT_FILENAME'] = '';
+	$env['REQUEST_METHOD']  = '';
+	$env['CONTENT_TYPE']    = '';
+	$env['CONTENT_LENGTH']  = '';
+
+	if (!empty($section_text['ENV'])) {
+
+		foreach(explode("\n", trim($section_text['ENV'])) as $e) {
+			$e = explode('=', trim($e), 2);
+
+			if (!empty($e[0]) && isset($e[1])) {
+				$env[$e[0]] = $e[1];
+			}
+		}
+	}
+
+	// Default ini settings
+	$ini_settings = array();
+	// additional ini overwrites
+	//$ini_overwrites[] = 'setting=value';
+	settings2array($ini_overwrites, $ini_settings);
+
+	// Any special ini settings
+	// these may overwrite the test defaults...
+	if (array_key_exists('INI', $section_text)) {
+		if (strpos($section_text['INI'], '{PWD}') !== false) {
+			$section_text['INI'] = str_replace('{PWD}', dirname($file), $section_text['INI']);
+		}
+		settings2array(preg_split( "/[\n\r]+/", $section_text['INI']), $ini_settings);
+	}
+
+	settings2params($ini_settings);
+
+	// Check if test should be skipped.
+	$info = '';
+	$warn = false;
+
+	if (array_key_exists('SKIPIF', $section_text)) {
+
+		if (trim($section_text['SKIPIF'])) {
+			show_file_block('skip', $section_text['SKIPIF']);
+			save_text($test_skipif, $section_text['SKIPIF'], $temp_skipif);
+			$extra = substr(PHP_OS, 0, 3) !== "WIN" ?
+				"unset REQUEST_METHOD; unset QUERY_STRING; unset PATH_TRANSLATED; unset SCRIPT_FILENAME; unset REQUEST_METHOD;": "";
+
+			if ($leak_check) {
+				$env['USE_ZEND_ALLOC'] = '0';
+			} else {
+				$env['USE_ZEND_ALLOC'] = '1';
+			}
+
+			$output = system_with_timeout("$extra $php $pass_options -q $ini_settings $test_skipif", $env);
+
+			if (!$cfg['keep']['skip']) {
+				@unlink($test_skipif);
+			}
+
+			if (!strncasecmp('skip', ltrim($output), 4)) {
+
+				if (preg_match('/^\s*skip\s*(.+)\s*/i', $output, $m)) {
+					show_result('SKIP', $tested, $tested_file, "reason: $m[1]", $temp_filenames);
+				} else {
+					show_result('SKIP', $tested, $tested_file, '', $temp_filenames);
+				}
+
+				if (isset($old_php)) {
+					$php = $old_php;
+				}
+
+				if (!$cfg['keep']['skip']) {
+					@unlink($test_skipif);
+				}
+
+				return 'SKIPPED';
+			}
+
+			if (!strncasecmp('info', ltrim($output), 4)) {
+				if (preg_match('/^\s*info\s*(.+)\s*/i', $output, $m)) {
+					$info = " (info: $m[1])";
+				}
+			}
+
+			if (!strncasecmp('warn', ltrim($output), 4)) {
+				if (preg_match('/^\s*warn\s*(.+)\s*/i', $output, $m)) {
+					$warn = true; /* only if there is a reason */
+					$info = " (warn: $m[1])";
+				}
+			}
+		}
+	}
+
+	if (@count($section_text['REDIRECTTEST']) == 1) {
+		$test_files = array();
+
+		$IN_REDIRECT = eval($section_text['REDIRECTTEST']);
+		$IN_REDIRECT['via'] = "via [$shortname]\n\t";
+		$IN_REDIRECT['dir'] = realpath(dirname($file));
+		$IN_REDIRECT['prefix'] = trim($section_text['TEST']);
+
+		if (count($IN_REDIRECT['TESTS']) == 1) {
+
+			if (is_array($org_file)) {
+				$test_files[] = $org_file[1];
+			} else {
+				$GLOBALS['test_files'] = $test_files;
+				find_files($IN_REDIRECT['TESTS']);
+
+				foreach($GLOBALS['test_files'] as $f) {
+					$test_files[] = array($f, $file);
+				}
+			}
+			$test_cnt += @count($test_files) - 1;
+			$test_idx--;
+
+			show_redirect_start($IN_REDIRECT['TESTS'], $tested, $tested_file);
+
+			// set up environment
+			$redirenv = array_merge($environment, $IN_REDIRECT['ENV']);
+			$redirenv['REDIR_TEST_DIR'] = realpath($IN_REDIRECT['TESTS']) . DIRECTORY_SEPARATOR;
+
+			usort($test_files, "test_sort");
+			run_all_tests($test_files, $redirenv, $tested);
+
+			show_redirect_ends($IN_REDIRECT['TESTS'], $tested, $tested_file);
+
+			// a redirected test never fails
+			$IN_REDIRECT = false;
+			return 'REDIR';
+
+		} else {
+
+			$bork_info = "Redirect info must contain exactly one TEST string to be used as redirect directory.";
+			show_result("BORK", $bork_info, '', $temp_filenames);
+			$PHP_FAILED_TESTS['BORKED'][] = array (
+									'name' => $file,
+									'test_name' => '',
+									'output' => '',
+									'diff'   => '',
+									'info'   => "$bork_info [$file]",
+			);
+		}
+	}
+
+	if (is_array($org_file) || @count($section_text['REDIRECTTEST']) == 1) {
+
+		if (is_array($org_file)) {
+			$file = $org_file[0];
+		}
+
+		$bork_info = "Redirected test did not contain redirection info";
+		show_result("BORK", $bork_info, '', $temp_filenames);
+		$PHP_FAILED_TESTS['BORKED'][] = array (
+								'name' => $file,
+								'test_name' => '',
+								'output' => '',
+								'diff'   => '',
+								'info'   => "$bork_info [$file]",
+		);
+		return 'BORKED';
+	}
+
+	// We've satisfied the preconditions - run the test!
+	show_file_block('php', $section_text['FILE'], 'TEST');
+	save_text($test_file, $section_text['FILE'], $temp_file);
+
+	if (array_key_exists('GET', $section_text)) {
+		$query_string = trim($section_text['GET']);
+	} else {
+		$query_string = '';
+	}
+
+	$env['REDIRECT_STATUS'] = '1';
+	$env['QUERY_STRING']    = $query_string;
+	$env['PATH_TRANSLATED'] = $test_file;
+	$env['SCRIPT_FILENAME'] = $test_file;
+
+	if (array_key_exists('COOKIE', $section_text)) {
+		$env['HTTP_COOKIE'] = trim($section_text['COOKIE']);
+	} else {
+		$env['HTTP_COOKIE'] = '';
+	}
+
+	$args = isset($section_text['ARGS']) ? ' -- ' . $section_text['ARGS'] : '';
+
+	if (array_key_exists('POST_RAW', $section_text) && !empty($section_text['POST_RAW'])) {
+
+		$post = trim($section_text['POST_RAW']);
+		$raw_lines = explode("\n", $post);
+
+		$request = '';
+		$started = false;
+
+		foreach ($raw_lines as $line) {
+
+			if (empty($env['CONTENT_TYPE']) && preg_match('/^Content-Type:(.*)/i', $line, $res)) {
+				$env['CONTENT_TYPE'] = trim(str_replace("\r", '', $res[1]));
+				continue;
+			}
+
+			if ($started) {
+				$request .= "\n";
+			}
+
+			$started = true;
+			$request .= $line;
+		}
+
+		$env['CONTENT_LENGTH'] = strlen($request);
+		$env['REQUEST_METHOD'] = 'POST';
+
+		if (empty($request)) {
+			return 'BORKED';
+		}
+
+		save_text($tmp_post, $request);
+		$cmd = "$php $pass_options $ini_settings -f \"$test_file\" 2>&1 < $tmp_post";
+
+	} else if (array_key_exists('POST', $section_text) && !empty($section_text['POST'])) {
+
+		$post = trim($section_text['POST']);
+
+		if (array_key_exists('GZIP_POST', $section_text) && function_exists('gzencode')) {
+			$post = gzencode($post, 9, FORCE_GZIP);
+			$env['HTTP_CONTENT_ENCODING'] = 'gzip';
+		} else if (array_key_exists('DEFLATE_POST', $section_text) && function_exists('gzcompress')) {
+			$post = gzcompress($post, 9);
+			$env['HTTP_CONTENT_ENCODING'] = 'deflate';
+		}
+
+		save_text($tmp_post, $post);
+		$content_length = strlen($post);
+
+		$env['REQUEST_METHOD'] = 'POST';
+		$env['CONTENT_TYPE']   = 'application/x-www-form-urlencoded';
+		$env['CONTENT_LENGTH'] = $content_length;
+
+		$cmd = "$php $pass_options $ini_settings -f \"$test_file\" 2>&1 < $tmp_post";
+
+	} else {
+
+		$env['REQUEST_METHOD'] = 'GET';
+		$env['CONTENT_TYPE']   = '';
+		$env['CONTENT_LENGTH'] = '';
+
+		$cmd = "$php $pass_options $ini_settings -f \"$test_file\" $args 2>&1";
+	}
+
+	if ($leak_check) {
+		$env['USE_ZEND_ALLOC'] = '0';
+
+		if ($valgrind_version >= 330) {
+			/* valgrind 3.3.0+ doesn't have --log-file-exactly option */
+			$cmd = "valgrind -q --tool=memcheck --trace-children=yes --log-file=$memcheck_filename $cmd";
+		} else {
+			$cmd = "valgrind -q --tool=memcheck --trace-children=yes --log-file-exactly=$memcheck_filename $cmd";
+		}
+
+	} else {
+		$env['USE_ZEND_ALLOC'] = '1';
+	}
+
+	if ($DETAILED) echo "
+CONTENT_LENGTH  = " . $env['CONTENT_LENGTH'] . "
+CONTENT_TYPE    = " . $env['CONTENT_TYPE'] . "
+PATH_TRANSLATED = " . $env['PATH_TRANSLATED'] . "
+QUERY_STRING    = " . $env['QUERY_STRING'] . "
+REDIRECT_STATUS = " . $env['REDIRECT_STATUS'] . "
+REQUEST_METHOD  = " . $env['REQUEST_METHOD'] . "
+SCRIPT_FILENAME = " . $env['SCRIPT_FILENAME'] . "
+HTTP_COOKIE     = " . $env['HTTP_COOKIE'] . "
+COMMAND $cmd
+";
+
+	$out = system_with_timeout($cmd, $env, isset($section_text['STDIN']) ? $section_text['STDIN'] : null);
+
+	if (array_key_exists('CLEAN', $section_text) && (!$no_clean || $cfg['keep']['clean'])) {
+
+		if (trim($section_text['CLEAN'])) {
+			show_file_block('clean', $section_text['CLEAN']);
+			save_text($test_clean, trim($section_text['CLEAN']), $temp_clean);
+
+			if (!$no_clean) {
+				$clean_params = array();
+				settings2array($ini_overwrites, $clean_params);
+				settings2params($clean_params);
+				$extra = substr(PHP_OS, 0, 3) !== "WIN" ?
+					"unset REQUEST_METHOD; unset QUERY_STRING; unset PATH_TRANSLATED; unset SCRIPT_FILENAME; unset REQUEST_METHOD;": "";
+				system_with_timeout("$extra $php $pass_options -q $clean_params $test_clean", $env);
+			}
+
+			if (!$cfg['keep']['clean']) {
+				@unlink($test_clean);
+			}
+		}
+	}
+
+	@unlink($tmp_post);
+
+	$leaked = false;
+	$passed = false;
+
+	if ($leak_check) { // leak check
+		$leaked = filesize($memcheck_filename) > 0;
+
+		if (!$leaked) {
+			@unlink($memcheck_filename);
+		}
+	}
+
+	// Does the output match what is expected?
+	$output = preg_replace("/\r\n/", "\n", trim($out));
+
+	/* when using CGI, strip the headers from the output */
+	$headers = "";
+
+	if (isset($old_php) && preg_match("/^(.*?)\r?\n\r?\n(.*)/s", $out, $match)) {
+		$output = trim($match[2]);
+		$rh = preg_split("/[\n\r]+/", $match[1]);
+		$headers = array();
+
+		foreach ($rh as $line) {
+			if (strpos($line, ':') !== false) {
+				$line = explode(':', $line, 2);
+				$headers[trim($line[0])] = trim($line[1]);
+			}
+		}
+	}
+
+	$failed_headers = false;
+
+	if (isset($section_text['EXPECTHEADERS'])) {
+		$want = array();
+		$wanted_headers = array();
+		$lines = preg_split("/[\n\r]+/", $section_text['EXPECTHEADERS']);
+
+		foreach($lines as $line) {
+			if (strpos($line, ':') !== false) {
+				$line = explode(':', $line, 2);
+				$want[trim($line[0])] = trim($line[1]);
+				$wanted_headers[] = trim($line[0]) . ': ' . trim($line[1]);
+			}
+		}
+
+		$org_headers = $headers;
+		$headers = array();
+		$output_headers = array();
+
+		foreach($want as $k => $v) {
+
+			if (isset($org_headers[$k])) {
+				$headers = $org_headers[$k];
+				$output_headers[] = $k . ': ' . $org_headers[$k];
+			}
+
+			if (!isset($org_headers[$k]) || $org_headers[$k] != $v) {
+				$failed_headers = true;
+			}
+		}
+
+		ksort($wanted_headers);
+		$wanted_headers = join("\n", $wanted_headers);
+		ksort($output_headers);
+		$output_headers = join("\n", $output_headers);
+	}
+
+	show_file_block('out', $output);
+
+	if (isset($section_text['EXPECTF']) || isset($section_text['EXPECTREGEX'])) {
+
+		if (isset($section_text['EXPECTF'])) {
+			$wanted = trim($section_text['EXPECTF']);
+		} else {
+			$wanted = trim($section_text['EXPECTREGEX']);
+		}
+
+		show_file_block('exp', $wanted);
+		$wanted_re = preg_replace('/\r\n/', "\n", $wanted);
+
+		if (isset($section_text['EXPECTF'])) {
+			$wanted_re = preg_quote($wanted_re, '/');
+			$wanted_re = str_replace(
+				array('%unicode_string_optional%'),
+				version_compare(PHP_VERSION, '6.0.0-dev') == -1 ? 'string' : 'Unicode string',
+				$wanted_re
+			);
+			$wanted_re = str_replace(
+				array('%unicode\|string%', '%string\|unicode%'),
+				version_compare(PHP_VERSION, '6.0.0-dev') == -1 ? 'string' : 'unicode',
+				$wanted_re
+			);
+			$wanted_re = str_replace(
+				array('%u\|b%', '%b\|u%'),
+				version_compare(PHP_VERSION, '6.0.0-dev') == -1 ? '' : 'u',
+				$wanted_re
+			);
+			// Stick to basics
+			$wanted_re = str_replace('%e', '\\' . DIRECTORY_SEPARATOR, $wanted_re);
+			$wanted_re = str_replace('%s', '[^\r\n]+', $wanted_re);
+			$wanted_re = str_replace('%a', '.+', $wanted_re);
+			$wanted_re = str_replace('%w', '\s*', $wanted_re);
+			$wanted_re = str_replace('%i', '[+-]?\d+', $wanted_re);
+			$wanted_re = str_replace('%d', '\d+', $wanted_re);
+			$wanted_re = str_replace('%x', '[0-9a-fA-F]+', $wanted_re);
+			$wanted_re = str_replace('%f', '[+-]?\.?\d+\.?\d*(?:[Ee][+-]?\d+)?', $wanted_re);
+			$wanted_re = str_replace('%c', '.', $wanted_re);
+			// %f allows two points "-.0.0" but that is the best *simple* expression
+		}
+/* DEBUG YOUR REGEX HERE
+		var_dump($wanted_re);
+		print(str_repeat('=', 80) . "\n");
+		var_dump($output);
+*/
+		if (preg_match((binary) "/^$wanted_re\$/s", $output)) {
+			$passed = true;
+			if (!$cfg['keep']['php']) {
+				@unlink($test_file);
+			}
+			if (isset($old_php)) {
+				$php = $old_php;
+			}
+			if (!$leaked && !$failed_headers) {
+				show_result("PASS", $tested, $tested_file, '', $temp_filenames);
+				return 'PASSED';
+			}
+		}
+
+	} else {
+
+		$wanted = trim($section_text['EXPECT']);
+		$wanted = preg_replace('/\r\n/',"\n", $wanted);
+		show_file_block('exp', $wanted);
+
+		// compare and leave on success
+		if (!strcmp($output, $wanted)) {
+			$passed = true;
+
+			if (!$cfg['keep']['php']) {
+				@unlink($test_file);
+			}
+
+			if (isset($old_php)) {
+				$php = $old_php;
+			}
+
+			if (!$leaked && !$failed_headers) {
+				show_result("PASS", $tested, $tested_file, '', $temp_filenames);
+				return 'PASSED';
+			}
+		}
+
+		$wanted_re = null;
+	}
+
+	// Test failed so we need to report details.
+	if ($failed_headers) {
+		$passed = false;
+		$wanted = $wanted_headers . "\n--HEADERS--\n" . $wanted;
+		$output = $output_headers . "\n--HEADERS--\n" . $output;
+
+		if (isset($wanted_re)) {
+			$wanted_re = preg_quote($wanted_headers . "\n--HEADERS--\n", '/') . $wanted_re;
+		}
+	}
+
+	if ($leaked) {
+		$restype[] = 'LEAK';
+	}
+
+	if ($warn) {
+		$restype[] = 'WARN';
+	}
+
+	if (!$passed) {
+		if (isset($section_text['XFAIL'])) {
+			$restype[] = 'XFAIL';
+		} else {
+			$restype[] = 'FAIL';
+		}
+	}
+
+	if (!$passed) {
+
+		// write .exp
+		if (strpos($log_format, 'E') !== false && file_put_contents($exp_filename, (binary) $wanted, FILE_BINARY) === false) {
+			error("Cannot create expected test output - $exp_filename");
+		}
+
+		// write .out
+		if (strpos($log_format, 'O') !== false && file_put_contents($output_filename, (binary) $output, FILE_BINARY) === false) {
+			error("Cannot create test output - $output_filename");
+		}
+
+		// write .diff
+		$diff = generate_diff($wanted, $wanted_re, $output);
+		show_file_block('diff', $diff);
+		if (strpos($log_format, 'D') !== false && file_put_contents($diff_filename, (binary) $diff, FILE_BINARY) === false) {
+			error("Cannot create test diff - $diff_filename");
+		}
+
+		// write .log
+		if (strpos($log_format, 'L') !== false && file_put_contents($log_filename, b"
+---- EXPECTED OUTPUT
+$wanted
+---- ACTUAL OUTPUT
+$output
+---- FAILED
+", FILE_BINARY) === false) {
+			error("Cannot create test log - $log_filename");
+			error_report($file, $log_filename, $tested);
+		}
+	}
+
+	show_result(implode('&', $restype), $tested, $tested_file, $info, $temp_filenames);
+
+	foreach ($restype as $type) {
+		$PHP_FAILED_TESTS[$type.'ED'][] = array (
+			'name'      => $file,
+			'test_name' => (is_array($IN_REDIRECT) ? $IN_REDIRECT['via'] : '') . $tested . " [$tested_file]",
+			'output'    => $output_filename,
+			'diff'      => $diff_filename,
+			'info'      => $info,
+		);
+	}
+
+	if (isset($old_php)) {
+		$php = $old_php;
+	}
+
+	return $restype[0] . 'ED';
+}
+
+function comp_line($l1, $l2, $is_reg)
+{
+	if ($is_reg) {
+		return preg_match((binary) "/^$l1$/s", (binary) $l2);
+	} else {
+		return !strcmp((binary) $l1, (binary) $l2);
+	}
+}
+
+function count_array_diff($ar1, $ar2, $is_reg, $w, $idx1, $idx2, $cnt1, $cnt2, $steps)
+{
+	$equal = 0;
+
+	while ($idx1 < $cnt1 && $idx2 < $cnt2 && comp_line($ar1[$idx1], $ar2[$idx2], $is_reg)) {
+		$idx1++;
+		$idx2++;
+		$equal++;
+		$steps--;
+	}
+	if (--$steps > 0) {
+		$eq1 = 0;
+		$st = $steps / 2;
+
+		for ($ofs1 = $idx1 + 1; $ofs1 < $cnt1 && $st-- > 0; $ofs1++) {
+			$eq = @count_array_diff($ar1, $ar2, $is_reg, $w, $ofs1, $idx2, $cnt1, $cnt2, $st);
+
+			if ($eq > $eq1) {
+				$eq1 = $eq;
+			}
+		}
+
+		$eq2 = 0;
+		$st = $steps;
+
+		for ($ofs2 = $idx2 + 1; $ofs2 < $cnt2 && $st-- > 0; $ofs2++) {
+			$eq = @count_array_diff($ar1, $ar2, $is_reg, $w, $idx1, $ofs2, $cnt1, $cnt2, $st);
+			if ($eq > $eq2) {
+				$eq2 = $eq;
+			}
+		}
+
+		if ($eq1 > $eq2) {
+			$equal += $eq1;
+		} else if ($eq2 > 0) {
+			$equal += $eq2;
+		}
+	}
+
+	return $equal;
+}
+
+function generate_array_diff($ar1, $ar2, $is_reg, $w)
+{
+	$idx1 = 0; $ofs1 = 0; $cnt1 = @count($ar1);
+	$idx2 = 0; $ofs2 = 0; $cnt2 = @count($ar2);
+	$diff = array();
+	$old1 = array();
+	$old2 = array();
+
+	while ($idx1 < $cnt1 && $idx2 < $cnt2) {
+
+		if (comp_line($ar1[$idx1], $ar2[$idx2], $is_reg)) {
+			$idx1++;
+			$idx2++;
+			continue;
+		} else {
+
+			$c1 = @count_array_diff($ar1, $ar2, $is_reg, $w, $idx1+1, $idx2, $cnt1, $cnt2, 10);
+			$c2 = @count_array_diff($ar1, $ar2, $is_reg, $w, $idx1, $idx2+1, $cnt1,  $cnt2, 10);
+
+			if ($c1 > $c2) {
+				$old1[$idx1] = (binary) sprintf("%03d- ", $idx1+1) . $w[$idx1++];
+				$last = 1;
+			} else if ($c2 > 0) {
+				$old2[$idx2] = (binary) sprintf("%03d+ ", $idx2+1) . $ar2[$idx2++];
+				$last = 2;
+			} else {
+				$old1[$idx1] = (binary) sprintf("%03d- ", $idx1+1) . $w[$idx1++];
+				$old2[$idx2] = (binary) sprintf("%03d+ ", $idx2+1) . $ar2[$idx2++];
+			}
+		}
+	}
+
+	reset($old1); $k1 = key($old1); $l1 = -2;
+	reset($old2); $k2 = key($old2); $l2 = -2;
+
+	while ($k1 !== null || $k2 !== null) {
+
+		if ($k1 == $l1 + 1 || $k2 === null) {
+			$l1 = $k1;
+			$diff[] = current($old1);
+			$k1 = next($old1) ? key($old1) : null;
+		} else if ($k2 == $l2 + 1 || $k1 === null) {
+			$l2 = $k2;
+			$diff[] = current($old2);
+			$k2 = next($old2) ? key($old2) : null;
+		} else if ($k1 < $k2) {
+			$l1 = $k1;
+			$diff[] = current($old1);
+			$k1 = next($old1) ? key($old1) : null;
+		} else {
+			$l2 = $k2;
+			$diff[] = current($old2);
+			$k2 = next($old2) ? key($old2) : null;
+		}
+	}
+
+	while ($idx1 < $cnt1) {
+		$diff[] = (binary) sprintf("%03d- ", $idx1 + 1) . $w[$idx1++];
+	}
+
+	while ($idx2 < $cnt2) {
+		$diff[] = (binary) sprintf("%03d+ ", $idx2 + 1) . $ar2[$idx2++];
+	}
+
+	return $diff;
+}
+
+function generate_diff($wanted, $wanted_re, $output)
+{
+	$w = explode(b"\n", $wanted);
+	$o = explode(b"\n", $output);
+	$r = is_null($wanted_re) ? $w : explode(b"\n", $wanted_re);
+	$diff = generate_array_diff($r, $o, !is_null($wanted_re), $w);
+
+	return implode(b"\r\n", $diff);
+}
+
+function error($message)
+{
+	echo "ERROR: {$message}\n";
+	exit(1);
+}
+
+function settings2array($settings, &$ini_settings)
+{
+	foreach($settings as $setting) {
+
+		if (strpos($setting, '=') !== false) {
+			$setting = explode("=", $setting, 2);
+			$name = trim(strtolower($setting[0]));
+			$value = trim($setting[1]);
+
+			if ($name == 'extension') {
+
+				if (!isset($ini_settings[$name])) {
+					$ini_settings[$name] = array();
+				}
+
+				$ini_settings[$name][] = $value;
+
+			} else {
+				$ini_settings[$name] = $value;
+			}
+		}
+	}
+}
+
+function settings2params(&$ini_settings)
+{
+	$settings = '';
+
+	foreach($ini_settings as $name => $value) {
+
+		if (is_array($value)) {
+			foreach($value as $val) {
+				$val = addslashes($val);
+				$settings .= " -d \"$name=$val\"";
+			}
+		} else {
+			$value = addslashes($value);
+			$settings .= " -d \"$name=$value\"";
+		}
+	}
+
+	$ini_settings = $settings;
+}
+
+function compute_summary()
+{
+	global $n_total, $test_results, $ignored_by_ext, $sum_results, $percent_results;
+
+	$n_total = count($test_results);
+	$n_total += $ignored_by_ext;
+	$sum_results = array(
+		'PASSED'  => 0,
+		'WARNED'  => 0,
+		'SKIPPED' => 0,
+		'FAILED'  => 0,
+		'BORKED'  => 0,
+		'LEAKED'  => 0,
+		'XFAILED' => 0
+	);
+
+	foreach ($test_results as $v) {
+		$sum_results[$v]++;
+	}
+
+	$sum_results['SKIPPED'] += $ignored_by_ext;
+	$percent_results = array();
+
+	while (list($v, $n) = each($sum_results)) {
+		$percent_results[$v] = (100.0 * $n) / $n_total;
+	}
+}
+
+function get_summary($show_ext_summary, $show_html)
+{
+	global $exts_skipped, $exts_tested, $n_total, $sum_results, $percent_results, $end_time, $start_time, $failed_test_summary, $PHP_FAILED_TESTS, $leak_check;
+
+	$x_total = $n_total - $sum_results['SKIPPED'] - $sum_results['BORKED'];
+
+	if ($x_total) {
+		$x_warned = (100.0 * $sum_results['WARNED']) / $x_total;
+		$x_failed = (100.0 * $sum_results['FAILED']) / $x_total;
+		$x_xfailed = (100.0 * $sum_results['XFAILED']) / $x_total;
+		$x_leaked = (100.0 * $sum_results['LEAKED']) / $x_total;
+		$x_passed = (100.0 * $sum_results['PASSED']) / $x_total;
+	} else {
+		$x_warned = $x_failed = $x_passed = $x_leaked = $x_xfailed = 0;
+	}
+
+	$summary = '';
+
+	if ($show_html) {
+		$summary .= "<pre>\n";
+	}
+	
+	if ($show_ext_summary) {
+		$summary .= '
+=====================================================================
+TEST RESULT SUMMARY
+---------------------------------------------------------------------
+Exts skipped    : ' . sprintf('%4d', $exts_skipped) . '
+Exts tested     : ' . sprintf('%4d', $exts_tested) . '
+---------------------------------------------------------------------
+';
+	}
+
+	$summary .= '
+Number of tests : ' . sprintf('%4d', $n_total) . '          ' . sprintf('%8d', $x_total);
+
+	if ($sum_results['BORKED']) {
+		$summary .= '
+Tests borked    : ' . sprintf('%4d (%5.1f%%)', $sum_results['BORKED'], $percent_results['BORKED']) . ' --------';
+	}
+
+	$summary .= '
+Tests skipped   : ' . sprintf('%4d (%5.1f%%)', $sum_results['SKIPPED'], $percent_results['SKIPPED']) . ' --------
+Tests warned    : ' . sprintf('%4d (%5.1f%%)', $sum_results['WARNED'], $percent_results['WARNED']) . ' ' . sprintf('(%5.1f%%)', $x_warned) . '
+Tests failed    : ' . sprintf('%4d (%5.1f%%)', $sum_results['FAILED'], $percent_results['FAILED']) . ' ' . sprintf('(%5.1f%%)', $x_failed) . '
+Expected fail   : ' . sprintf('%4d (%5.1f%%)', $sum_results['XFAILED'], $percent_results['XFAILED']) . ' ' . sprintf('(%5.1f%%)', $x_xfailed);
+
+	if ($leak_check) {
+		$summary .= '
+Tests leaked    : ' . sprintf('%4d (%5.1f%%)', $sum_results['LEAKED'], $percent_results['LEAKED']) . ' ' . sprintf('(%5.1f%%)', $x_leaked);
+	}
+
+	$summary .= '
+Tests passed    : ' . sprintf('%4d (%5.1f%%)', $sum_results['PASSED'], $percent_results['PASSED']) . ' ' . sprintf('(%5.1f%%)', $x_passed) . '
+---------------------------------------------------------------------
+Time taken      : ' . sprintf('%4d seconds', $end_time - $start_time) . '
+=====================================================================
+';
+	$failed_test_summary = '';
+
+	if (count($PHP_FAILED_TESTS['BORKED'])) {
+		$failed_test_summary .= '
+=====================================================================
+BORKED TEST SUMMARY
+---------------------------------------------------------------------
+';
+		foreach ($PHP_FAILED_TESTS['BORKED'] as $failed_test_data) {
+			$failed_test_summary .= $failed_test_data['info'] . "\n";
+		}
+
+		$failed_test_summary .=  "=====================================================================\n";
+	}
+
+	if (count($PHP_FAILED_TESTS['FAILED'])) {
+		$failed_test_summary .= '
+=====================================================================
+FAILED TEST SUMMARY
+---------------------------------------------------------------------
+';
+		foreach ($PHP_FAILED_TESTS['FAILED'] as $failed_test_data) {
+			$failed_test_summary .= $failed_test_data['test_name'] . $failed_test_data['info'] . "\n";
+		}
+		$failed_test_summary .=  "=====================================================================\n";
+	}
+	if (count($PHP_FAILED_TESTS['XFAILED'])) {
+		$failed_test_summary .= '
+=====================================================================
+EXPECTED FAILED TEST SUMMARY
+---------------------------------------------------------------------
+';
+		foreach ($PHP_FAILED_TESTS['XFAILED'] as $failed_test_data) {
+			$failed_test_summary .= $failed_test_data['test_name'] . $failed_test_data['info'] . "\n";
+		}
+		$failed_test_summary .=  "=====================================================================\n";
+	}
+
+	if (count($PHP_FAILED_TESTS['LEAKED'])) {
+		$failed_test_summary .= '
+=====================================================================
+LEAKED TEST SUMMARY
+---------------------------------------------------------------------
+';
+		foreach ($PHP_FAILED_TESTS['LEAKED'] as $failed_test_data) {
+			$failed_test_summary .= $failed_test_data['test_name'] . $failed_test_data['info'] . "\n";
+		}
+
+		$failed_test_summary .=  "=====================================================================\n";
+	}
+
+	if ($failed_test_summary && !getenv('NO_PHPTEST_SUMMARY')) {
+		$summary .= $failed_test_summary;
+	}
+
+	if ($show_html) {
+		$summary .= "</pre>";
+	}
+
+	return $summary;
+}
+
+function show_start($start_time)
+{
+	global $html_output, $html_file;
+
+	if ($html_output) {
+		fwrite($html_file, "<h2>Time Start: " . date('Y-m-d H:i:s', $start_time) . "</h2>\n");
+		fwrite($html_file, "<table>\n");
+	}
+
+	echo "TIME START " . date('Y-m-d H:i:s', $start_time) . "\n=====================================================================\n";
+}
+
+function show_end($end_time)
+{
+	global $html_output, $html_file;
+
+	if ($html_output) {
+		fwrite($html_file, "</table>\n");
+		fwrite($html_file, "<h2>Time End: " . date('Y-m-d H:i:s', $end_time) . "</h2>\n");
+	}
+
+	echo "=====================================================================\nTIME END " . date('Y-m-d H:i:s', $end_time) . "\n";
+}
+
+function show_summary()
+{
+	global $html_output, $html_file;
+
+	if ($html_output) {
+		fwrite($html_file, "<hr/>\n" . get_summary(true, true));
+	}
+
+	echo get_summary(true, false);
+}
+
+function show_redirect_start($tests, $tested, $tested_file)
+{
+	global $html_output, $html_file;
+
+	if ($html_output) {
+		fwrite($html_file, "<tr><td colspan='3'>---&gt; $tests ($tested [$tested_file]) begin</td></tr>\n");
+	}
+
+	echo "---> $tests ($tested [$tested_file]) begin\n";
+}
+
+function show_redirect_ends($tests, $tested, $tested_file)
+{
+	global $html_output, $html_file;
+
+	if ($html_output) {
+		fwrite($html_file, "<tr><td colspan='3'>---&gt; $tests ($tested [$tested_file]) done</td></tr>\n");
+	}
+
+	echo "---> $tests ($tested [$tested_file]) done\n";
+}
+
+function show_test($test_idx, $shortname)
+{
+	global $test_cnt;
+
+	echo "TEST $test_idx/$test_cnt [$shortname]\r";
+	flush();
+}
+
+function show_result($result, $tested, $tested_file, $extra = '', $temp_filenames = null)
+{
+	global $html_output, $html_file, $temp_target, $temp_urlbase;
+
+	echo "$result $tested [$tested_file] $extra\n";
+
+	if ($html_output) {
+
+		if (isset($temp_filenames['file']) && file_exists($temp_filenames['file'])) {
+			$url = str_replace($temp_target, $temp_urlbase, $temp_filenames['file']);
+			$tested = "<a href='$url'>$tested</a>";
+		}
+
+		if (isset($temp_filenames['skip']) && file_exists($temp_filenames['skip'])) {
+
+			if (empty($extra)) {
+				$extra = "skipif";
+			}
+
+			$url = str_replace($temp_target, $temp_urlbase, $temp_filenames['skip']);
+			$extra = "<a href='$url'>$extra</a>";
+
+		} else if (empty($extra)) {
+			$extra = "&nbsp;";
+		}
+
+		if (isset($temp_filenames['diff']) && file_exists($temp_filenames['diff'])) {
+			$url = str_replace($temp_target, $temp_urlbase, $temp_filenames['diff']);
+			$diff = "<a href='$url'>diff</a>";
+		} else {
+			$diff = "&nbsp;";
+		}
+
+		if (isset($temp_filenames['mem']) && file_exists($temp_filenames['mem'])) {
+			$url = str_replace($temp_target, $temp_urlbase, $temp_filenames['mem']);
+			$mem = "<a href='$url'>leaks</a>";
+		} else {
+			$mem = "&nbsp;";
+		}
+
+		fwrite($html_file, 
+			"<tr>" .
+			"<td>$result</td>" .
+			"<td>$tested</td>" .
+			"<td>$extra</td>" .
+			"<td>$diff</td>" . 
+			"<td>$mem</td>" .
+			"</tr>\n");
+	}
+}
+
+/*
+ * Local variables:
+ * tab-width: 4
+ * c-basic-offset: 4
+ * End:
+ * vim: noet sw=4 ts=4
+ */
+?>
Index: ffmpeg-phpinfo.php
===================================================================
--- a/ffmpeg-phpinfo.php	(.../branches/ffmpeg-php/ffmpeg-php-0.6.0)
+++ b/ffmpeg-phpinfo.php	(.../trunk/ffmpeg-php)
@@ -0,0 +1,166 @@
+<?
+/*
+ * browser * copy this file and the tests directory into your web root and point 
+ * your browser at it.
+ */
+
+ob_start();
+
+echo '<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">';
+echo '<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">';
+echo '<head>';
+echo '<title>Ffmpeg-php Extension Test Page</title>';
+echo '<meta http-equiv="Content-Type" content="text/html;charset=utf-8" />';
+echo '<style type="text/css">';
+echo '
+
+.hor-minimalist-a
+{
+	font-family: "Lucida Sans Unicode", "Lucida Grande", Sans-Serif;
+	font-size: 12px;
+	background: #fff;
+	margin: 45px;
+	width: 480px;
+	border-collapse: collapse;
+	text-align: left;
+}
+
+
+.hor-minimalist-a caption { font-size: 16px; font-weight: bold; color: #039; padding: 10px 8px; }
+.hor-minimalist-a th { font-size: 14px; font-weight: normal; color: #039; padding: 10px 8px;
+	border-bottom: 2px solid #6678b1;
+}
+
+.hor-minimalist-a td { color: #669; padding: 9px 8px 0px 8px; }
+.hor-minimalist-a tbody tr:hover td { color: #009; }';
+
+echo '</style>';
+echo '</head>';
+echo '<body><div align="center">';
+echo '<table width="340" class="hor-minimalist-a">';
+echo "<tr><th>Ffmpeg-php Extension Version Info<br/></th></tr>";
+echo "<tr><td>";
+printf("Ffmpeg-php version string: %s<br/>", FFMPEG_PHP_VERSION_STRING);
+printf("libavcodec build number: %d<br/>", LIBAVCODEC_BUILD_NUMBER);
+printf("libavcodec version number: %d<br/>", LIBAVCODEC_VERSION_NUMBER);
+printf("libavcodec build number: %d<br/>", LIBAVCODEC_BUILD_NUMBER);
+echo "</td></tr></table>";
+
+echo "<p/>";
+print_class_methods("ffmpeg_movie");
+echo "<p/>";
+print_class_methods("ffmpeg_frame");
+
+// get an array for movies from the test media directory 
+$movies = getDirFiles(dirname(__FILE__) . '/tests/test_media');
+
+$i = 1;
+foreach($movies as $movie) {        
+    $mov = new ffmpeg_movie($movie);
+
+    echo '<table width="90%" class="hor-minimalist-a">';
+    printf('<caption>Processing Test File: %s...</caption>', basename($mov->getFilename()));
+    printf('<thead><tr><th width="150">Method</th><th>Result<br/></th></tr></thead>', $mov->getFileName());
+    printf("<tr><td>file name:</td><td>%s<br/></td></tr>", $mov->getFileName());
+    printf("<tr><td>duration</td><td>%s seconds<br/></td></tr>", $mov->getDuration());
+    printf("<tr><td>frame count</td><td>%s<br/></td></tr>", $mov->getFrameCount());
+    printf("<tr><td>frame rate</td><td>%0.3f fps<br/></td></tr>", $mov->getFrameRate());
+    printf("<tr><td>comment</td><td>%s<br/></td></tr>", $mov->getComment());
+    printf("<tr><td>title</td><td>%s<br/></td></tr>", $mov->getTitle());
+    printf("<tr><td>author</td><td>%s<br/></td></tr>", $mov->getAuthor());
+    printf("<tr><td>copyright</td><td>%s<br/></td></tr>", $mov->getCopyright());
+    printf("<tr><td>get bit rate</td><td>%d<br/></td></tr>", $mov->getBitRate());
+    printf("<tr><td>has audio</td><td>%s<br/></td></tr>", $mov->hasAudio() == 0 ? 'No' : 'Yes');
+    if ($mov->hasAudio()) {
+        printf("<tr><td>get audio stream id</td><td>%s<br/></td></tr>", $mov->getAudioStreamId());
+        printf("<tr><td>get audio codec</td><td>%s<br/></td></tr>", $mov->getAudioCodec());
+        printf("<tr><td>get audio bit rate</td><td>%d<br/></td></tr>", $mov->getAudioBitRate());
+        printf("<tr><td>get audio sample rate</td><td>%d<br/></td></tr>", $mov->getAudioSampleRate());
+        printf("<tr><td>get audio channels</td><td>%s<br/></td></tr>", $mov->getAudioChannels());
+    }
+    printf("<tr><td>has video</td><td>%s<br/></td></tr>", $mov->hasVideo() == 0 ? 'No' : 'Yes');
+    if ($mov->hasVideo()) {
+        printf("<tr><td>frame height</td><td>%d pixels<br/></td></tr>", $mov->getFrameHeight());
+        printf("<tr><td>frame width</td><td>%d pixels<br/></td></tr>", $mov->getFrameWidth());
+        printf("<tr><td>get video stream id</td><td>%s<br/></td></tr>", $mov->getVideoStreamId());
+        printf("<tr><td>get video codec</td><td>%s<br/></td></tr>", $mov->getVideoCodec());
+        printf("<tr><td>get video bit rate</td><td>%d<br/></td></tr>", $mov->getVideoBitRate());
+        printf("<tr><td>get pixel format</td><td>%s<br/></td></tr>", $mov->getPixelFormat());
+        printf("<tr><td>get pixel aspect ratio</td><td>%s<br/></td></tr>", $mov->getPixelAspectRatio());
+        printf("<tr><td>get frame</td><td>%s<br/></td></tr>", is_object($mov->getFrame(10)) ? 'true' : 'false');
+        printf("<tr><td>get frame number</td><td>%d<br/></td></tr>", $mov->getFrameNumber());
+	$thumbpath = "$i.png";
+	if (make_test_thumbnail(rand(1,100), $mov->getFilename(), $thumbpath)) {
+		printf('<tr><td>Random Thumbnail</td><td><img alt="Test Image" src="%s"/></td></tr>', $thumbpath);
+	}
+    }
+    
+    echo "</table>";
+    echo "<p/><p/>";
+    $i++;
+}
+
+echo '</div></body></html>';
+
+if (php_sapi_name() == 'cli') {
+	$content = ob_get_clean();
+	$content = br2nl($content);
+	$content = strip_tags($content);
+	echo $content;
+} else {
+	ob_end_flush();
+}
+
+function make_test_thumbnail($frame, $input, $outpath) {
+
+	$mov = new ffmpeg_movie($input);
+	$ff_frame = $mov->getFrame($frame);
+	if ($ff_frame) {
+		$gd_image = $ff_frame->toGDImage();
+		if ($gd_image) {
+			imagepng($gd_image, $outpath);
+			imagedestroy($gd_image);
+		} else {
+			return false;
+		}
+	} else {
+		return false;
+	}
+	return true;
+}
+
+
+function print_class_methods($class) {
+	$methods = get_class_methods($class);
+	echo '<table width="340" class="hor-minimalist-a">';
+	echo "<thead><tr><th>Methods available in class '$class'</th></tr></thead>";
+	if (is_array($methods)) {
+		foreach($methods as $method) {
+			echo "<tr><td>$method<br/></td></tr>";
+		}
+	} else {
+		echo "<tr><td>No Methods Defined<br/></td></tr>";
+	}
+	echo "</table>";
+}
+
+function getDirFiles($dirPath)
+{
+    if ($handle = opendir($dirPath))
+    {
+        while (false !== ($file = readdir($handle))) {
+            $fullpath = $dirPath . '/' . $file;
+            if (!is_dir($fullpath) && $file != "CVS" && $file != "." && $file != "..")
+                $filesArr[] = trim($fullpath);
+        }
+        closedir($handle);
+    } 
+
+    return $filesArr;   
+}
+
+function br2nl($string) {
+    return preg_replace('/\<br(\s*)?\/?\>/i', "\n", $string);
+}
+
+?>

Property changes on: ffmpeg-phpinfo.php
___________________________________________________________________
Added: svn:executable
   + *

Index: ffmpeg_errorhandler.c
===================================================================
--- a/ffmpeg_errorhandler.c	(.../branches/ffmpeg-php/ffmpeg-php-0.6.0)
+++ b/ffmpeg_errorhandler.c	(.../trunk/ffmpeg-php)
@@ -59,6 +59,16 @@
 }
 /* }}} */
 
+
+/* {{{ ffmpeg_hide_errors()
+ */
+void ffmpeg_hide_errors(void *ptr, int level, const char *msg, va_list args)
+{
+    // NO OP
+}
+/* }}} */
+
+
 /*
  * Local variables:
  * tab-width: 4

Property changes on: ffmpeg_errorhandler.c
___________________________________________________________________
Deleted: svn:eol-style
   - LF


Property changes on: CREDITS
___________________________________________________________________
Deleted: svn:keywords
   - Author Date Id Revision
Deleted: svn:eol-style
   - native


Property changes on: EXPERIMENTAL
___________________________________________________________________
Deleted: svn:keywords
   - Author Date Id Revision
Deleted: svn:eol-style
   - native

Index: ffmpeg_frame.c
===================================================================
--- a/ffmpeg_frame.c	(.../branches/ffmpeg-php/ffmpeg-php-0.6.0)
+++ b/ffmpeg_frame.c	(.../trunk/ffmpeg-php)
@@ -31,7 +31,7 @@
    obligated to do so. If you do not wish to do so, delete this exception
    statement from your version.
 
- */
+*/
 
 #include "php.h"
 #include "php_ini.h"
@@ -47,11 +47,15 @@
 #include "ffmpeg_frame.h"
 #include "ffmpeg_tools.h"
 
+#ifdef HAVE_CONFIG_H
+#include "config.h"
+#endif
+
 /* 
    include gd header from local include dir. This is a copy of gd.h that is 
    distributed with php-5.2.5. It is distributed along with ffmpeg-php to
    allow ffmpeg-php to be built without access to the php sources
- */
+   */
 #if HAVE_LIBGD20
 #include "gd.h" 
 
@@ -60,11 +64,14 @@
     ZEND_FETCH_RESOURCE(gd_img, gdImagePtr, ret, -1, "Image", le_gd); \
 }
 
-// Borrowed from gd.c
-#define gdImageBoundsSafeMacro(im, x, y) (!((((y) < (im)->cy1) || ((y) > (im)->cy2)) || (((x) < (im)->cx1) || ((x) > (im)->cx2))))
+#if PIX_FMT_RGBA32
+#define FFMPEG_PHP_FFMPEG_RGB_PIX_FORMAT PIX_FMT_RGBA32
+#else
+#define FFMPEG_PHP_FFMPEG_RGB_PIX_FORMAT PIX_FMT_RGB32
+#endif
 
 static int le_gd; // this is only valid after calling 
-                  // FFMPEG_PHP_FETCH_IMAGE_RESOURCE() 
+// FFMPEG_PHP_FETCH_IMAGE_RESOURCE() 
 
 #endif // HAVE_LIBGD20
 
@@ -72,39 +79,42 @@
 
 static zend_class_entry *ffmpeg_frame_class_entry_ptr;
 zend_class_entry ffmpeg_frame_class_entry;
- 
+
 /* {{{ ffmpeg_frame methods[]
-    Methods of the ffmpeg_frame class 
-*/
+   Methods of the ffmpeg_frame class 
+   */
 zend_function_entry ffmpeg_frame_class_methods[] = {
-    
+
     /* object can't be created from user space so no PHP constructor */
     //PHP_ME(ffmpeg_frame, __construct, NULL, 0)
-  
+
 #if HAVE_LIBGD20
     /* gd methods */
-    PHP_MALIAS(ffmpeg_frame, togdimage,      toGDImage,     NULL, 0)
+    FFMPEG_PHP_MALIAS(ffmpeg_frame, togdimage,      toGDImage,     NULL, 0)
+
+
 #endif // HAVE_LIBGD20
 
     /* methods */
-    PHP_MALIAS(ffmpeg_frame, getwidth,                    getWidth,                   NULL, 0)
-    PHP_MALIAS(ffmpeg_frame, getheight,                   getHeight,                  NULL, 0)
-    PHP_MALIAS(ffmpeg_frame, iskeyframe,                  isKeyFrame,                 NULL, 0)
-    PHP_MALIAS(ffmpeg_frame, getpresentationtimestamp,    getPresentationTimestamp,   NULL, 0)
-    PHP_MALIAS(ffmpeg_frame, getpts,                      getPresentationTimestamp,   NULL, 0)
-	{NULL, NULL, NULL}
+    FFMPEG_PHP_MALIAS(ffmpeg_frame, getwidth,                    getWidth,                   NULL, 0)
+    FFMPEG_PHP_MALIAS(ffmpeg_frame, getheight,                   getHeight,                  NULL, 0)
+    FFMPEG_PHP_MALIAS(ffmpeg_frame, resize,                      resize,                     NULL, 0)
+    FFMPEG_PHP_MALIAS(ffmpeg_frame, iskeyframe,                  isKeyFrame,                 NULL, 0)
+    FFMPEG_PHP_MALIAS(ffmpeg_frame, getpresentationtimestamp,    getPresentationTimestamp,   NULL, 0)
+    FFMPEG_PHP_MALIAS(ffmpeg_frame, getpts,                      getPresentationTimestamp,   NULL, 0)
+    FFMPEG_PHP_END_METHODS
 };
 /* }}} */
 
 
 /* {{{ _php_alloc_ff_frame()
- */
+*/
 static ff_frame_context* _php_alloc_ff_frame()
 {
     ff_frame_context *ff_frame = NULL;
 
     ff_frame = emalloc(sizeof(ff_frame_context));
-    
+
     if (!ff_frame) {
         zend_error(E_ERROR, "Error allocating ffmpeg_frame");
     }
@@ -123,16 +133,16 @@
    creates an ffmpeg_frame object, adds a ffmpeg_frame resource to the
    object, registers the resource and returns a direct pointer to the 
    resource.
- */
+   */
 ff_frame_context* _php_create_ffmpeg_frame(INTERNAL_FUNCTION_PARAMETERS)
 {
     int ret;
-	ff_frame_context *ff_frame;
-    
+    ff_frame_context *ff_frame;
+
     ff_frame = _php_alloc_ff_frame();
-    
-	ret = ZEND_REGISTER_RESOURCE(NULL, ff_frame, le_ffmpeg_frame);
-    
+
+    ret = ZEND_REGISTER_RESOURCE(NULL, ff_frame, le_ffmpeg_frame);
+
     object_init_ex(return_value, ffmpeg_frame_class_entry_ptr);
     add_property_resource(return_value, "ffmpeg_frame", ret);
     return ff_frame;
@@ -141,7 +151,7 @@
 
 
 /* {{{ _php_free_av_frame()
- */
+*/
 static void _php_free_av_frame(AVFrame *av_frame)
 {
     if (av_frame) {
@@ -156,7 +166,7 @@
 
 
 /* {{{ _php_free_ffmpeg_frame()
- */
+*/
 static void _php_free_ffmpeg_frame(zend_rsrc_list_entry *rsrc TSRMLS_DC)
 {
     ff_frame_context *ff_frame = (ff_frame_context*)rsrc->ptr;    
@@ -167,7 +177,7 @@
 
 
 /* {{{ register_ffmpeg_frame_class()
- */
+*/
 void register_ffmpeg_frame_class(int module_number)
 {
     TSRMLS_FETCH();
@@ -187,36 +197,33 @@
 
 /* {{{ _php_convert_frame()
 */
-int _php_convert_frame(ff_frame_context *ff_frame_ctx, int dst_fmt) {
-    AVFrame *src_frame;
+int _php_convert_frame(ff_frame_context *ff_frame, int dst_fmt) {
     AVFrame *dst_frame;
     int result = 0;
 
-    if (!ff_frame_ctx->av_frame) {
+    if (!ff_frame->av_frame) {
         return -1;
     }
 
-    src_frame = ff_frame_ctx->av_frame;
+    if (dst_fmt == ff_frame->pixel_format) {
+        return 0; // NOP
+    }
 
     dst_frame = avcodec_alloc_frame();
-    avpicture_alloc((AVPicture*)dst_frame, dst_fmt, ff_frame_ctx->width,
-            ff_frame_ctx->height);
+    avpicture_alloc((AVPicture*)dst_frame, dst_fmt, ff_frame->width,
+            ff_frame->height);
 
-    result = ffmpeg_img_convert((AVPicture*)dst_frame, dst_fmt, 
-                (AVPicture *)src_frame, 
-                ff_frame_ctx->pixel_format, ff_frame_ctx->width, 
-                ff_frame_ctx->height);
+    result = img_convert( (AVPicture *)dst_frame, dst_fmt,
+            (AVPicture *) ff_frame->av_frame, ff_frame->pixel_format, ff_frame->width, ff_frame->height);
 
     if (result) {
         zend_error(E_ERROR, "Error converting frame");
-        goto fail;
+        _php_free_av_frame(dst_frame);
+    } else {
+        ff_frame->av_frame = dst_frame;
+        ff_frame->pixel_format = dst_fmt;
     }
 
-    ff_frame_ctx->av_frame = dst_frame;
-    ff_frame_ctx->pixel_format = dst_fmt;
-
-fail:
-    _php_free_av_frame(src_frame);
     return result;
 }
 /* }}} */
@@ -224,7 +231,7 @@
 #if HAVE_LIBGD20
 
 /* {{{ _php_get_gd_image()
- */
+*/
 static int _php_get_gd_image(int w, int h)
 {
     zval *function_name, *width, *height;
@@ -234,7 +241,7 @@
     char *function_cname = "imagecreatetruecolor";
     int ret;
     TSRMLS_FETCH();
-   
+
     if (zend_hash_find(EG(function_table), function_cname, 
                 strlen(function_cname) + 1, (void **)&func) == FAILURE) {
         zend_error(E_ERROR, "Error can't find %s function", function_cname);
@@ -255,11 +262,11 @@
                 &retval, 2, argv, 0, NULL TSRMLS_CC) == FAILURE) {
         zend_error(E_ERROR, "Error calling %s function", function_cname);
     }
-    
+
     FREE_ZVAL(function_name); 
     FREE_ZVAL(width); 
     FREE_ZVAL(height); 
-    
+
     if (!retval || retval->type != IS_RESOURCE) {
         php_error_docref(NULL TSRMLS_CC, E_ERROR,
                 "Error creating GD Image");
@@ -277,7 +284,7 @@
 
 
 /* {{{ _php_avframe_to_gd_image()
- */
+*/
 static int _php_avframe_to_gd_image(AVFrame *frame, gdImage *dest, int width, 
         int height)
 {
@@ -286,13 +293,8 @@
 
     for (y = 0; y < height; y++) {
         for (x = 0; x < width; x++) {
-		
-			if (gdImageBoundsSafeMacro(dest, x, y)) {
-                /* copy pixel to gdimage buffer zeroing the alpha channel */
-                dest->tpixels[y][x] = src[x] & 0x00ffffff;
-            } else {
-                return -1;
-            }
+            /* copy pixel to gdimage buffer zeroing the alpha channel */
+            gdImageSetPixel(dest, x, y, src[x] & 0x00FFFFFF);
         }
         src += width;
     }
@@ -302,7 +304,7 @@
 
 
 /* {{{ _php_gd_image_to_avframe()
- */
+*/
 static int _php_gd_image_to_avframe(gdImage *src, AVFrame *frame, int width, 
         int height) 
 {
@@ -311,11 +313,7 @@
 
     for (y = 0; y < height; y++) {
         for (x = 0; x < width; x++) {
-            if (gdImageBoundsSafeMacro(src, x, y)) {
-                dest[x] = src->tpixels[y][x];
-            } else {
-                return -1;
-            }
+            dest[x] = src->tpixels[y][x];
         }
         dest += width;
     }
@@ -325,7 +323,7 @@
 
 
 /* {{{ proto resource toGDImage()
- */
+*/
 FFMPEG_PHP_METHOD(ffmpeg_frame, toGDImage)
 {
     ff_frame_context *ff_frame;
@@ -333,7 +331,7 @@
 
     GET_FRAME_RESOURCE(getThis(), ff_frame);
 
-    _php_convert_frame(ff_frame, PIX_FMT_RGBA32);
+    _php_convert_frame(ff_frame, FFMPEG_PHP_FFMPEG_RGB_PIX_FORMAT);
 
     return_value->value.lval = _php_get_gd_image(ff_frame->width, 
             ff_frame->height);
@@ -343,36 +341,15 @@
     FFMPEG_PHP_FETCH_IMAGE_RESOURCE(gd_img, &return_value);
 
     if (_php_avframe_to_gd_image(ff_frame->av_frame, gd_img,
-            ff_frame->width, ff_frame->height)) {
+                ff_frame->width, ff_frame->height)) {
         zend_error(E_ERROR, "failed to convert frame to gd image");
     }
 }
 /* }}} */
 
 
-/* {{{ proto object _php_read_frame_from_file(mixed)
- */
-/*_php_read_frame_from_file(ff_frame_context *ff_frame, char* filename)
-{
-    AVFrame *frame = NULL;
-    AVFormatContext *ic;
-    AVFormatParameters *ap;
-    int err;
-
-    // open the input file with generic libav function
-    err = av_open_input_file(&ic, filename, NULL, 0, ap);
-    if (err < 0) {
-        zend_error(E_ERROR, "Can't open image file %d, %d", err, 
-        AVERROR_NOFMT);
-    }
-
-    
-}*/
-/* }}} */
-
-
 /* {{{ proto object ffmpeg_frame(mixed)
- */
+*/
 FFMPEG_PHP_METHOD(ffmpeg_frame, ffmpeg_frame)
 {
     zval **argv[1];
@@ -392,17 +369,17 @@
     }
 
     ff_frame = _php_alloc_ff_frame();
-    
-	ret = ZEND_REGISTER_RESOURCE(NULL, ff_frame, le_ffmpeg_frame);
-    
+
+    ret = ZEND_REGISTER_RESOURCE(NULL, ff_frame, le_ffmpeg_frame);
+
     object_init_ex(getThis(), ffmpeg_frame_class_entry_ptr);
     add_property_resource(getThis(), "ffmpeg_frame", ret);
-    
+
     switch (Z_TYPE_PP(argv[0])) {
         case IS_STRING:
             convert_to_string_ex(argv[0]);
             zend_error(E_ERROR, 
-                  "Creating an ffmpeg_frame from a file is not implemented\n");
+                    "Creating an ffmpeg_frame from a file is not implemented\n");
             //_php_read_frame_from_file(ff_frame, Z_STRVAL_PP(argv[0]));
             break;
         case IS_RESOURCE:
@@ -418,18 +395,18 @@
 
             /* create a an av_frame and allocate space for it */
             frame = avcodec_alloc_frame();
-            avpicture_alloc((AVPicture*)frame, PIX_FMT_RGBA32, width, height);
+            avpicture_alloc((AVPicture*)frame, FFMPEG_PHP_FFMPEG_RGB_PIX_FORMAT, width, height);
 
             /* copy the gd image to the av_frame */
             _php_gd_image_to_avframe(gd_img, frame, width, height);
-            
+
             /* set the ffmepg_frame to point to this av_frame */
             ff_frame->av_frame = frame;
-            
+
             /* set the ffpmeg_frame's properties */
             ff_frame->width = width;
             ff_frame->height = height;
-            ff_frame->pixel_format = PIX_FMT_RGBA32;
+            ff_frame->pixel_format = FFMPEG_PHP_FFMPEG_RGB_PIX_FORMAT;
             break;
         default:
             zend_error(E_ERROR, "Invalid argument\n");
@@ -441,57 +418,302 @@
 
 
 /* {{{ proto int getPresentationTimestamp()
- */
+*/
 FFMPEG_PHP_METHOD(ffmpeg_frame, getPresentationTimestamp)
 {
     ff_frame_context *ff_frame;
 
     GET_FRAME_RESOURCE(getThis(), ff_frame);
-    
+
     RETURN_DOUBLE((double)ff_frame->pts / AV_TIME_BASE);
 }
 /* }}} */
 
 
 /* {{{ proto int isKeyFrame()
- */
+*/
 FFMPEG_PHP_METHOD(ffmpeg_frame, isKeyFrame)
 {
     ff_frame_context *ff_frame;
 
     GET_FRAME_RESOURCE(getThis(), ff_frame);
-    
+
     RETURN_LONG(ff_frame->keyframe);
 }
 /* }}} */
 
 
 /* {{{ proto int getWidth()
- */
+*/
 FFMPEG_PHP_METHOD(ffmpeg_frame, getWidth)
 {
     ff_frame_context *ff_frame;
 
     GET_FRAME_RESOURCE(getThis(), ff_frame);
-    
+
     RETURN_LONG(ff_frame->width);
 }
 /* }}} */
 
 
 /* {{{ proto int getHeight()
- */
+*/
 FFMPEG_PHP_METHOD(ffmpeg_frame, getHeight)
 {
     ff_frame_context *ff_frame;
 
     GET_FRAME_RESOURCE(getThis(), ff_frame);
-    
+
     RETURN_LONG(ff_frame->height);
 }
 /* }}} */
 
 
+/* {{{ _php_resample_frame()
+*/
+int _php_resample_frame(ff_frame_context *ff_frame,
+        int wanted_width, int wanted_height, int crop_top, int crop_bottom,
+        int crop_left, int crop_right)
+{
+    AVFrame *resampled_frame;
+    ImgReSampleContext *img_resample_ctx = NULL;
+
+    if (!ff_frame->av_frame) {
+        return -1;
+    }
+
+    /* 
+     * do nothing if width and height are the same as the frame and no 
+     * cropping was specified
+     * */
+    if (wanted_width == ff_frame->width && 
+            wanted_height == ff_frame->height &&
+            (!crop_left && !crop_right && !crop_top && !crop_bottom)) {
+        return 0;
+    }
+
+    /* convert to PIX_FMT_YUV420P required for resampling */
+    _php_convert_frame(ff_frame, PIX_FMT_YUV420P);
+
+    img_resample_ctx = img_resample_full_init(
+            wanted_width, wanted_height,
+            ff_frame->width, ff_frame->height,
+            crop_top, crop_bottom, crop_left, crop_right,
+            0, 0, 0, 0);
+    if (!img_resample_ctx) {
+        return -1;
+    }
+
+    resampled_frame = avcodec_alloc_frame();
+    avpicture_alloc((AVPicture*)resampled_frame, PIX_FMT_YUV420P, 
+            wanted_width, wanted_height);
+
+    img_resample(img_resample_ctx, (AVPicture*)resampled_frame, 
+            (AVPicture*)ff_frame->av_frame);
+
+    _php_free_av_frame(ff_frame->av_frame);
+
+    img_resample_close(img_resample_ctx);
+
+    ff_frame->av_frame = resampled_frame;
+    ff_frame->width = wanted_width;
+    ff_frame->height = wanted_height;
+
+    return 0;
+}
+/* }}} */
+
+
+/* {{{ proto boolean resize(int width, int height [, int crop_top [, int crop_bottom [, int crop_left [, int crop_right ]]]])
+*/
+FFMPEG_PHP_METHOD(ffmpeg_frame, resize)
+{
+    zval ***argv;
+    ff_frame_context *ff_frame = NULL;
+    int wanted_width = 0, wanted_height = 0;
+    int crop_top = 0, crop_bottom = 0, crop_left = 0, crop_right = 0;
+
+    GET_FRAME_RESOURCE(getThis(), ff_frame);
+
+    /* retrieve arguments */ 
+    argv = (zval ***) safe_emalloc(sizeof(zval **), ZEND_NUM_ARGS(), 0);
+
+    if (zend_get_parameters_array_ex(ZEND_NUM_ARGS(), argv) != SUCCESS) {
+        efree(argv);
+        php_error_docref(NULL TSRMLS_CC, E_ERROR,
+                "Error parsing arguments");
+    }
+
+    switch (ZEND_NUM_ARGS()) {
+        case 6:
+            convert_to_long_ex(argv[5]);
+            crop_right = Z_LVAL_PP(argv[5]);
+
+            /* crop right must be even number for lavc cropping */
+            if (crop_right % 2) {
+                php_error_docref(NULL TSRMLS_CC, E_ERROR,
+                        "Crop right must be an even number");
+            }
+            /* fallthru */
+        case 5:
+            convert_to_long_ex(argv[4]);
+            crop_left = Z_LVAL_PP(argv[4]);
+
+            /*  crop left must be even number for lavc cropping */
+            if (crop_left % 2) {
+                php_error_docref(NULL TSRMLS_CC, E_ERROR,
+                        "Crop left must be an even number");
+            }
+
+            /* fallthru */
+        case 4:
+            convert_to_long_ex(argv[3]);
+            crop_bottom = Z_LVAL_PP(argv[3]);
+
+            /*  crop bottom must be even number for lavc cropping */
+            if (crop_bottom % 2) {
+                php_error_docref(NULL TSRMLS_CC, E_ERROR,
+                        "Crop bottom must be an even number");
+            }
+
+            /* fallthru */
+        case 3:
+            convert_to_long_ex(argv[2]);
+            crop_top = Z_LVAL_PP(argv[2]);
+
+            /*  crop top must be even number for lavc cropping */
+            if (crop_top % 2) {
+                php_error_docref(NULL TSRMLS_CC, E_ERROR,
+                        "Crop top must be an even number");
+            }
+
+            /* fallthru */
+        case 2:
+            /* height arg */
+            convert_to_long_ex(argv[1]);
+            wanted_height = Z_LVAL_PP(argv[1]);
+
+            /* bounds check wanted height */
+            if (wanted_height < 1) {
+                php_error_docref(NULL TSRMLS_CC, E_ERROR,
+                        "Frame height must be greater than zero");
+            }
+
+            /* wanted height must be even number for lavc resample */
+            if (wanted_height % 2) {
+                php_error_docref(NULL TSRMLS_CC, E_ERROR,
+                        "Frame height must be an even number");
+            }
+            /* fallthru */
+        case 1:
+            /* width arg */
+            convert_to_long_ex(argv[0]);
+            wanted_width = Z_LVAL_PP(argv[0]);
+
+            /* bounds check wanted width */
+            if (wanted_width < 1) {
+                php_error_docref(NULL TSRMLS_CC, E_ERROR,
+                        "Frame width must be greater than zero");
+            }
+
+            /* wanted width must be even number for lavc resample */
+            if (wanted_width % 2) {
+                php_error_docref(NULL TSRMLS_CC, E_ERROR,
+                        "Frame width must be an even number");
+            }
+            break;
+        default:
+            WRONG_PARAM_COUNT;
+    } 
+
+    efree(argv);
+
+    /* resize frame */
+    _php_resample_frame(ff_frame, wanted_width, wanted_height, 
+            crop_top, crop_bottom, crop_left, crop_right);
+
+    RETURN_TRUE;
+}
+/* }}} */
+
+
+/* {{{ proto boolean crop([, int crop_top [, int crop_bottom [, int crop_left [, int crop_right ]]]])
+*/
+PHP_FUNCTION(crop)
+{
+    zval ***argv;
+    ff_frame_context *ff_frame;
+    int crop_top = 0, crop_bottom = 0, crop_left = 0, crop_right = 0;
+
+    GET_FRAME_RESOURCE(getThis(), ff_frame);
+
+    /* retrieve arguments */ 
+    argv = (zval ***) safe_emalloc(sizeof(zval **), ZEND_NUM_ARGS(), 0);
+
+    if (zend_get_parameters_array_ex(ZEND_NUM_ARGS(), argv) != SUCCESS) {
+        efree(argv);
+        php_error_docref(NULL TSRMLS_CC, E_ERROR,
+                "Error parsing arguments");
+    }
+
+    switch (ZEND_NUM_ARGS()) {
+        case 4:
+            convert_to_long_ex(argv[3]);
+            crop_right = Z_LVAL_PP(argv[3]);
+
+            /* crop right must be even number for lavc cropping */
+            if (crop_right % 2) {
+                php_error_docref(NULL TSRMLS_CC, E_ERROR,
+                        "Crop right must be an even number");
+            }
+            /* fallthru */
+        case 3:
+            convert_to_long_ex(argv[2]);
+            crop_left = Z_LVAL_PP(argv[2]);
+
+            /*  crop left must be even number for lavc cropping */
+            if (crop_left % 2) {
+                php_error_docref(NULL TSRMLS_CC, E_ERROR,
+                        "Crop left must be an even number");
+            }
+
+            /* fallthru */
+        case 2:
+            convert_to_long_ex(argv[1]);
+            crop_bottom = Z_LVAL_PP(argv[1]);
+
+            /*  crop bottom must be even number for lavc cropping */
+            if (crop_bottom % 2) {
+                php_error_docref(NULL TSRMLS_CC, E_ERROR,
+                        "Crop bottom must be an even number");
+            }
+
+            /* fallthru */
+        case 1:
+            convert_to_long_ex(argv[0]);
+            crop_top = Z_LVAL_PP(argv[0]);
+
+            /*  crop top  must be even number for lavc cropping */
+            if (crop_top % 2) {
+                php_error_docref(NULL TSRMLS_CC, E_ERROR,
+                        "Crop top must be an even number");
+            }
+            break;
+        default:
+            WRONG_PARAM_COUNT;
+    } 
+
+    efree(argv);
+
+    /* resample with same dimensions */
+    _php_resample_frame(ff_frame, ff_frame->width, ff_frame->height, 
+            crop_top, crop_bottom, crop_left, crop_right);
+
+    RETURN_TRUE;
+}
+/* }}} */
+
+
 /*
  * Local variables:
  * tab-width: 4

Property changes on: ffmpeg_frame.c
___________________________________________________________________
Deleted: svn:keywords
   - Author Date Id Revision
Deleted: svn:eol-style
   - native

Index: php_ffmpeg.h
===================================================================
--- a/php_ffmpeg.h	(.../branches/ffmpeg-php/ffmpeg-php-0.6.0)
+++ b/php_ffmpeg.h	(.../trunk/ffmpeg-php)
@@ -43,16 +43,24 @@
  * PHP-4 doesn't have the METHOD, ME and MALIAS macros so map them back
  * to the function macros for PHP-4
  */
-#if PHP_MAJOR_VERSION <= 4
+
+#if PHP_MAJOR_VERSION <= 4 // PHP4; use FUNCTION macros
+#define FFMPEG_PHP_CONSTRUCTOR(a,b) PHP_FUNCTION(a)
 #define FFMPEG_PHP_METHOD(a,b) PHP_FUNCTION(b)
 #define FFMPEG_PHP_ME(a,b,c,d) PHP_FE(a,c)
-#define FFMPEG_PHP_MALIAS(a,b,c,d,e) PHP_FALIAS(b,c)
-#else /* Use METHOD macros for PHP-5 */
+#define FFMPEG_PHP_MALIAS(a,b,c,d,e) PHP_FALIAS(b,c,d)
+#define FFMPEG_PHP_END_METHODS {NULL, NULL, NULL}
+#else /* PHP5; Use METHOD macros */
+#define FFMPEG_PHP_CONSTRUCTOR(a,b) PHP_METHOD(a,b)
 #define FFMPEG_PHP_METHOD(a,b) PHP_METHOD(a,b)
 #define FFMPEG_PHP_ME(a,b,c,d) PHP_ME(a,b,c,d)
 #define FFMPEG_PHP_MALIAS(a,b,c,d,e) PHP_MALIAS(a,b,c,d,e)
+#define FFMPEG_PHP_END_METHODS {NULL, NULL, NULL, 0, 0}
 #endif
 
+
+
+
 #define SAFE_STRING(s) ((s)?(s):"")
 
 #ifndef safe_emalloc

Property changes on: php_ffmpeg.h
___________________________________________________________________
Deleted: svn:keywords
   - Author Date Id Revision
Deleted: svn:eol-style
   - native

Index: ffmpeg_errorhandler.h
===================================================================
--- a/ffmpeg_errorhandler.h	(.../branches/ffmpeg-php/ffmpeg-php-0.6.0)
+++ b/ffmpeg_errorhandler.h	(.../trunk/ffmpeg-php)
@@ -0,0 +1,38 @@
+/*
+   This file is part of ffmpeg-php
+
+   Copyright (C) 2004-2008 Alexey Zakhlestin <indeyets@gmail.com>
+
+   This program is free software; you can redistribute it and/or modify
+   it under the terms of the GNU General Public License as published by
+   the Free Software Foundation; either version 2 of the License, or
+   (at your option) any later version.
+
+   This program is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+   GNU General Public License for more details.
+
+   You should have received a copy of the GNU General Public License
+   along with this program; if not, write to the Free Software
+   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+
+   In addition, as a special exception, the copyright holders of ffmpeg-php 
+   give you permission to combine ffmpeg-php with code included in the 
+   standard release of PHP under the PHP license (or modified versions of 
+   such code, with unchanged license). You may copy and distribute such a 
+   system following the terms of the GNU GPL for ffmpeg-php and the licenses 
+   of the other code concerned, provided that you include the source code of 
+   that other code when and as the GNU GPL requires distribution of source code.
+
+   You must obey the GNU General Public License in all respects for all of the 
+   code used other than standard release of PHP. If you modify this file, you 
+   may extend this exception to your version of the file, but you are not 
+   obligated to do so. If you do not wish to do so, delete this exception 
+   statement from your version.
+
+ */
+
+
+void ffmpeg_errorhandler(void *ptr, int level, const char *msg, va_list args);
+void ffmpeg_hide_errors(void *ptr, int level, const char *msg, va_list args);
Index: tests/getFramesBackwards.phpt
===================================================================
--- a/tests/getFramesBackwards.phpt	(.../branches/ffmpeg-php/ffmpeg-php-0.6.0)
+++ b/tests/getFramesBackwards.phpt	(.../trunk/ffmpeg-php)
@@ -1,264 +0,0 @@
---TEST--
-ffmpeg getFrame backwards test
---SKIPIF--
-<?php 
-extension_loaded('ffmpeg') or die("skip ffmpeg extension not loaded"); 
-extension_loaded('gd') or die("skip gd extension not avaliable.");
-function_exists("imagecreatetruecolor") or die("skip function imagecreatetruecolor unavailable");
-?>
---FILE--
-<?php
-$mov = new ffmpeg_movie(dirname(__FILE__) . '/test_media/robot.avi');
-
-$framecount = $mov->getFrameCount();
-for($i = $framecount; $i > 0; $i--) {
-    $img = sprintf("%s/test-%04d.png", dirname(__FILE__), $i);
-    $frame = $mov->getFrame($i);
-    $image = $frame->toGDImage();
-    imagepng($image, $img);
-    printf("ffmpeg getFramesBackward($i): md5 = %s\n", md5(file_get_contents($img)));
-    imagedestroy($image);
-    unlink($img);
-}
-?>
---EXPECT--
-ffmpeg getFramesBackward(240): md5 = 7e80bfd9c95b8f46e4ffcc1acacd478d
-ffmpeg getFramesBackward(239): md5 = 7e80bfd9c95b8f46e4ffcc1acacd478d
-ffmpeg getFramesBackward(238): md5 = 7e80bfd9c95b8f46e4ffcc1acacd478d
-ffmpeg getFramesBackward(237): md5 = 972e660b84a02fb883809c93f1ffdbf8
-ffmpeg getFramesBackward(236): md5 = 972e660b84a02fb883809c93f1ffdbf8
-ffmpeg getFramesBackward(235): md5 = 972e660b84a02fb883809c93f1ffdbf8
-ffmpeg getFramesBackward(234): md5 = f513c73faf87cbfe1fff854d97f8f492
-ffmpeg getFramesBackward(233): md5 = f513c73faf87cbfe1fff854d97f8f492
-ffmpeg getFramesBackward(232): md5 = f513c73faf87cbfe1fff854d97f8f492
-ffmpeg getFramesBackward(231): md5 = 92b0f153f17e6a387535ba873c245ef2
-ffmpeg getFramesBackward(230): md5 = 92b0f153f17e6a387535ba873c245ef2
-ffmpeg getFramesBackward(229): md5 = 92b0f153f17e6a387535ba873c245ef2
-ffmpeg getFramesBackward(228): md5 = 03fe855c91fbaabe9e260a23ca4fa6cd
-ffmpeg getFramesBackward(227): md5 = 03fe855c91fbaabe9e260a23ca4fa6cd
-ffmpeg getFramesBackward(226): md5 = 03fe855c91fbaabe9e260a23ca4fa6cd
-ffmpeg getFramesBackward(225): md5 = bb894534f0fbb93ae13effea4ae7778c
-ffmpeg getFramesBackward(224): md5 = bb894534f0fbb93ae13effea4ae7778c
-ffmpeg getFramesBackward(223): md5 = bb894534f0fbb93ae13effea4ae7778c
-ffmpeg getFramesBackward(222): md5 = d60ad82118cc3d82d61380e8c1c35821
-ffmpeg getFramesBackward(221): md5 = d60ad82118cc3d82d61380e8c1c35821
-ffmpeg getFramesBackward(220): md5 = d60ad82118cc3d82d61380e8c1c35821
-ffmpeg getFramesBackward(219): md5 = c9b92c3b3043cadf83b634aaa9967af2
-ffmpeg getFramesBackward(218): md5 = c9b92c3b3043cadf83b634aaa9967af2
-ffmpeg getFramesBackward(217): md5 = c9b92c3b3043cadf83b634aaa9967af2
-ffmpeg getFramesBackward(216): md5 = 916130d3a9a0b5291dd80c3f905f3cfe
-ffmpeg getFramesBackward(215): md5 = 916130d3a9a0b5291dd80c3f905f3cfe
-ffmpeg getFramesBackward(214): md5 = 916130d3a9a0b5291dd80c3f905f3cfe
-ffmpeg getFramesBackward(213): md5 = ccc8aa4b659a072ef3e94005e982e197
-ffmpeg getFramesBackward(212): md5 = ccc8aa4b659a072ef3e94005e982e197
-ffmpeg getFramesBackward(211): md5 = ccc8aa4b659a072ef3e94005e982e197
-ffmpeg getFramesBackward(210): md5 = 10230400f9cdb8a4785082ed133f4c40
-ffmpeg getFramesBackward(209): md5 = 10230400f9cdb8a4785082ed133f4c40
-ffmpeg getFramesBackward(208): md5 = 10230400f9cdb8a4785082ed133f4c40
-ffmpeg getFramesBackward(207): md5 = 3081db2af3ff5bc76f938f9b80ec72bb
-ffmpeg getFramesBackward(206): md5 = 3081db2af3ff5bc76f938f9b80ec72bb
-ffmpeg getFramesBackward(205): md5 = 3081db2af3ff5bc76f938f9b80ec72bb
-ffmpeg getFramesBackward(204): md5 = c9584d3d2c2480fb480953e9bc317cb0
-ffmpeg getFramesBackward(203): md5 = c9584d3d2c2480fb480953e9bc317cb0
-ffmpeg getFramesBackward(202): md5 = c9584d3d2c2480fb480953e9bc317cb0
-ffmpeg getFramesBackward(201): md5 = 35335bb3cbc1cb75aff8416a26df8f39
-ffmpeg getFramesBackward(200): md5 = 35335bb3cbc1cb75aff8416a26df8f39
-ffmpeg getFramesBackward(199): md5 = 35335bb3cbc1cb75aff8416a26df8f39
-ffmpeg getFramesBackward(198): md5 = 6851e0793856841f31acc6a5f704650c
-ffmpeg getFramesBackward(197): md5 = 6851e0793856841f31acc6a5f704650c
-ffmpeg getFramesBackward(196): md5 = 6851e0793856841f31acc6a5f704650c
-ffmpeg getFramesBackward(195): md5 = 5221475c9ea8970258feb9dab1392049
-ffmpeg getFramesBackward(194): md5 = 5221475c9ea8970258feb9dab1392049
-ffmpeg getFramesBackward(193): md5 = 5221475c9ea8970258feb9dab1392049
-ffmpeg getFramesBackward(192): md5 = b900f912fbe898801a4c8356638dcf54
-ffmpeg getFramesBackward(191): md5 = b900f912fbe898801a4c8356638dcf54
-ffmpeg getFramesBackward(190): md5 = b900f912fbe898801a4c8356638dcf54
-ffmpeg getFramesBackward(189): md5 = a53b0c4d2c023f1019b3190b35216c60
-ffmpeg getFramesBackward(188): md5 = a53b0c4d2c023f1019b3190b35216c60
-ffmpeg getFramesBackward(187): md5 = a53b0c4d2c023f1019b3190b35216c60
-ffmpeg getFramesBackward(186): md5 = 965909c3829a19aa301ff7dc98f1ca90
-ffmpeg getFramesBackward(185): md5 = 965909c3829a19aa301ff7dc98f1ca90
-ffmpeg getFramesBackward(184): md5 = 965909c3829a19aa301ff7dc98f1ca90
-ffmpeg getFramesBackward(183): md5 = 93bdda9b26422cf7791154d54667812e
-ffmpeg getFramesBackward(182): md5 = 93bdda9b26422cf7791154d54667812e
-ffmpeg getFramesBackward(181): md5 = 93bdda9b26422cf7791154d54667812e
-ffmpeg getFramesBackward(180): md5 = 7def27ec8a2136e344b24b12337f3a0c
-ffmpeg getFramesBackward(179): md5 = 7def27ec8a2136e344b24b12337f3a0c
-ffmpeg getFramesBackward(178): md5 = 7def27ec8a2136e344b24b12337f3a0c
-ffmpeg getFramesBackward(177): md5 = 50d636deb9cdca5c88842653d3e62463
-ffmpeg getFramesBackward(176): md5 = 50d636deb9cdca5c88842653d3e62463
-ffmpeg getFramesBackward(175): md5 = 50d636deb9cdca5c88842653d3e62463
-ffmpeg getFramesBackward(174): md5 = a469093f43c0fdd6016ee5ef932b7ca4
-ffmpeg getFramesBackward(173): md5 = a469093f43c0fdd6016ee5ef932b7ca4
-ffmpeg getFramesBackward(172): md5 = a469093f43c0fdd6016ee5ef932b7ca4
-ffmpeg getFramesBackward(171): md5 = bab883284018046ddfa2e638785615aa
-ffmpeg getFramesBackward(170): md5 = bab883284018046ddfa2e638785615aa
-ffmpeg getFramesBackward(169): md5 = bab883284018046ddfa2e638785615aa
-ffmpeg getFramesBackward(168): md5 = c790f8cc0f715ca0ec31845c9ef7397a
-ffmpeg getFramesBackward(167): md5 = c790f8cc0f715ca0ec31845c9ef7397a
-ffmpeg getFramesBackward(166): md5 = c790f8cc0f715ca0ec31845c9ef7397a
-ffmpeg getFramesBackward(165): md5 = fe0cdb9314d1628af56e6c3662deb24f
-ffmpeg getFramesBackward(164): md5 = fe0cdb9314d1628af56e6c3662deb24f
-ffmpeg getFramesBackward(163): md5 = fe0cdb9314d1628af56e6c3662deb24f
-ffmpeg getFramesBackward(162): md5 = 254d01500e3ec7f6ae402747761c0a95
-ffmpeg getFramesBackward(161): md5 = 254d01500e3ec7f6ae402747761c0a95
-ffmpeg getFramesBackward(160): md5 = 254d01500e3ec7f6ae402747761c0a95
-ffmpeg getFramesBackward(159): md5 = 7dee4d143138fce530917488cc337c8c
-ffmpeg getFramesBackward(158): md5 = 7dee4d143138fce530917488cc337c8c
-ffmpeg getFramesBackward(157): md5 = 7dee4d143138fce530917488cc337c8c
-ffmpeg getFramesBackward(156): md5 = 7862bd022cc4e9c3976b2f4758e5cd30
-ffmpeg getFramesBackward(155): md5 = 7862bd022cc4e9c3976b2f4758e5cd30
-ffmpeg getFramesBackward(154): md5 = 7862bd022cc4e9c3976b2f4758e5cd30
-ffmpeg getFramesBackward(153): md5 = cd42cff504053e23c5db378119a40b3f
-ffmpeg getFramesBackward(152): md5 = cd42cff504053e23c5db378119a40b3f
-ffmpeg getFramesBackward(151): md5 = cd42cff504053e23c5db378119a40b3f
-ffmpeg getFramesBackward(150): md5 = c76afdadc9099d8bd173f0e08807ee3d
-ffmpeg getFramesBackward(149): md5 = c76afdadc9099d8bd173f0e08807ee3d
-ffmpeg getFramesBackward(148): md5 = c76afdadc9099d8bd173f0e08807ee3d
-ffmpeg getFramesBackward(147): md5 = 31038504cc4c1e664de89c257b1fa1b0
-ffmpeg getFramesBackward(146): md5 = 31038504cc4c1e664de89c257b1fa1b0
-ffmpeg getFramesBackward(145): md5 = 31038504cc4c1e664de89c257b1fa1b0
-ffmpeg getFramesBackward(144): md5 = 51a73cbaf315c9faf8263627455fd5d5
-ffmpeg getFramesBackward(143): md5 = 51a73cbaf315c9faf8263627455fd5d5
-ffmpeg getFramesBackward(142): md5 = 51a73cbaf315c9faf8263627455fd5d5
-ffmpeg getFramesBackward(141): md5 = 814b8a64a6a08093b3a81063bffffed4
-ffmpeg getFramesBackward(140): md5 = 814b8a64a6a08093b3a81063bffffed4
-ffmpeg getFramesBackward(139): md5 = 814b8a64a6a08093b3a81063bffffed4
-ffmpeg getFramesBackward(138): md5 = 948fd5fd379679006c2ca2ba3bc52048
-ffmpeg getFramesBackward(137): md5 = 948fd5fd379679006c2ca2ba3bc52048
-ffmpeg getFramesBackward(136): md5 = 948fd5fd379679006c2ca2ba3bc52048
-ffmpeg getFramesBackward(135): md5 = 3445a37f0effaef1a9c4e788f5ce54e5
-ffmpeg getFramesBackward(134): md5 = 3445a37f0effaef1a9c4e788f5ce54e5
-ffmpeg getFramesBackward(133): md5 = 3445a37f0effaef1a9c4e788f5ce54e5
-ffmpeg getFramesBackward(132): md5 = 3ead3c1a402a7e26ee248cd8f9c96647
-ffmpeg getFramesBackward(131): md5 = 3ead3c1a402a7e26ee248cd8f9c96647
-ffmpeg getFramesBackward(130): md5 = 3ead3c1a402a7e26ee248cd8f9c96647
-ffmpeg getFramesBackward(129): md5 = ffdc385768b0b1fcbb9908c9c9bffe21
-ffmpeg getFramesBackward(128): md5 = ffdc385768b0b1fcbb9908c9c9bffe21
-ffmpeg getFramesBackward(127): md5 = ffdc385768b0b1fcbb9908c9c9bffe21
-ffmpeg getFramesBackward(126): md5 = 36cbf250ecf8c5a5538bd0a5f2eb9333
-ffmpeg getFramesBackward(125): md5 = 36cbf250ecf8c5a5538bd0a5f2eb9333
-ffmpeg getFramesBackward(124): md5 = 36cbf250ecf8c5a5538bd0a5f2eb9333
-ffmpeg getFramesBackward(123): md5 = 22caa03aaa35e0aed2f0a3d4a3375b24
-ffmpeg getFramesBackward(122): md5 = 22caa03aaa35e0aed2f0a3d4a3375b24
-ffmpeg getFramesBackward(121): md5 = 22caa03aaa35e0aed2f0a3d4a3375b24
-ffmpeg getFramesBackward(120): md5 = 21f287b5f3334a7aaed0aeeb55230621
-ffmpeg getFramesBackward(119): md5 = 21f287b5f3334a7aaed0aeeb55230621
-ffmpeg getFramesBackward(118): md5 = 21f287b5f3334a7aaed0aeeb55230621
-ffmpeg getFramesBackward(117): md5 = 80e13931ccc6ace3a5a7ae256e048a61
-ffmpeg getFramesBackward(116): md5 = 80e13931ccc6ace3a5a7ae256e048a61
-ffmpeg getFramesBackward(115): md5 = 80e13931ccc6ace3a5a7ae256e048a61
-ffmpeg getFramesBackward(114): md5 = 5f9109436658f422ec1841247acf835e
-ffmpeg getFramesBackward(113): md5 = 5f9109436658f422ec1841247acf835e
-ffmpeg getFramesBackward(112): md5 = 5f9109436658f422ec1841247acf835e
-ffmpeg getFramesBackward(111): md5 = 9e5e0b70bfc1c90f2c5092428bc384ee
-ffmpeg getFramesBackward(110): md5 = 9e5e0b70bfc1c90f2c5092428bc384ee
-ffmpeg getFramesBackward(109): md5 = 9e5e0b70bfc1c90f2c5092428bc384ee
-ffmpeg getFramesBackward(108): md5 = 86f50526473282524be5c092f77950a5
-ffmpeg getFramesBackward(107): md5 = 86f50526473282524be5c092f77950a5
-ffmpeg getFramesBackward(106): md5 = 86f50526473282524be5c092f77950a5
-ffmpeg getFramesBackward(105): md5 = 395b50b5c8615cdb4b905aa0b3b2e669
-ffmpeg getFramesBackward(104): md5 = 395b50b5c8615cdb4b905aa0b3b2e669
-ffmpeg getFramesBackward(103): md5 = 395b50b5c8615cdb4b905aa0b3b2e669
-ffmpeg getFramesBackward(102): md5 = a98e967bbda4b6dcaa19fd52d9fdef12
-ffmpeg getFramesBackward(101): md5 = a98e967bbda4b6dcaa19fd52d9fdef12
-ffmpeg getFramesBackward(100): md5 = a98e967bbda4b6dcaa19fd52d9fdef12
-ffmpeg getFramesBackward(99): md5 = c97ea8a480b98c52f8b726b811f9714d
-ffmpeg getFramesBackward(98): md5 = c97ea8a480b98c52f8b726b811f9714d
-ffmpeg getFramesBackward(97): md5 = c97ea8a480b98c52f8b726b811f9714d
-ffmpeg getFramesBackward(96): md5 = c8ed36df36fb8cea156212a5d5952d33
-ffmpeg getFramesBackward(95): md5 = c8ed36df36fb8cea156212a5d5952d33
-ffmpeg getFramesBackward(94): md5 = c8ed36df36fb8cea156212a5d5952d33
-ffmpeg getFramesBackward(93): md5 = afa2f0bab3ba2b34806b2a52aea98bce
-ffmpeg getFramesBackward(92): md5 = afa2f0bab3ba2b34806b2a52aea98bce
-ffmpeg getFramesBackward(91): md5 = afa2f0bab3ba2b34806b2a52aea98bce
-ffmpeg getFramesBackward(90): md5 = 41b5423e725b29fdacc5ee40faa4776c
-ffmpeg getFramesBackward(89): md5 = 41b5423e725b29fdacc5ee40faa4776c
-ffmpeg getFramesBackward(88): md5 = 41b5423e725b29fdacc5ee40faa4776c
-ffmpeg getFramesBackward(87): md5 = ceafeaf93812d8f5fd48f6fa242d5e36
-ffmpeg getFramesBackward(86): md5 = ceafeaf93812d8f5fd48f6fa242d5e36
-ffmpeg getFramesBackward(85): md5 = ceafeaf93812d8f5fd48f6fa242d5e36
-ffmpeg getFramesBackward(84): md5 = 92ecabfab41f2715a05f3847e2484b60
-ffmpeg getFramesBackward(83): md5 = 92ecabfab41f2715a05f3847e2484b60
-ffmpeg getFramesBackward(82): md5 = 92ecabfab41f2715a05f3847e2484b60
-ffmpeg getFramesBackward(81): md5 = 8004f62b065a0d55150220972821be96
-ffmpeg getFramesBackward(80): md5 = 8004f62b065a0d55150220972821be96
-ffmpeg getFramesBackward(79): md5 = 8004f62b065a0d55150220972821be96
-ffmpeg getFramesBackward(78): md5 = d502f1afe81ec69de3222d3b56b3d516
-ffmpeg getFramesBackward(77): md5 = d502f1afe81ec69de3222d3b56b3d516
-ffmpeg getFramesBackward(76): md5 = d502f1afe81ec69de3222d3b56b3d516
-ffmpeg getFramesBackward(75): md5 = 8c9cbc1183504e1d1fee262e83775e01
-ffmpeg getFramesBackward(74): md5 = 8c9cbc1183504e1d1fee262e83775e01
-ffmpeg getFramesBackward(73): md5 = 8c9cbc1183504e1d1fee262e83775e01
-ffmpeg getFramesBackward(72): md5 = afe384b15e07ea544fa7a1cdada288c0
-ffmpeg getFramesBackward(71): md5 = afe384b15e07ea544fa7a1cdada288c0
-ffmpeg getFramesBackward(70): md5 = afe384b15e07ea544fa7a1cdada288c0
-ffmpeg getFramesBackward(69): md5 = db77eae1c1395ba1c794ae1281d68868
-ffmpeg getFramesBackward(68): md5 = db77eae1c1395ba1c794ae1281d68868
-ffmpeg getFramesBackward(67): md5 = db77eae1c1395ba1c794ae1281d68868
-ffmpeg getFramesBackward(66): md5 = 3b8248dcafbc02ecab8f5a3065e61f03
-ffmpeg getFramesBackward(65): md5 = 3b8248dcafbc02ecab8f5a3065e61f03
-ffmpeg getFramesBackward(64): md5 = 3b8248dcafbc02ecab8f5a3065e61f03
-ffmpeg getFramesBackward(63): md5 = 86d1330ec92bb2c672db8cfacef7c128
-ffmpeg getFramesBackward(62): md5 = 86d1330ec92bb2c672db8cfacef7c128
-ffmpeg getFramesBackward(61): md5 = 86d1330ec92bb2c672db8cfacef7c128
-ffmpeg getFramesBackward(60): md5 = 954c1013975c1fc29ab8bbaf9208069a
-ffmpeg getFramesBackward(59): md5 = 954c1013975c1fc29ab8bbaf9208069a
-ffmpeg getFramesBackward(58): md5 = 954c1013975c1fc29ab8bbaf9208069a
-ffmpeg getFramesBackward(57): md5 = 1c72b33fd6f829b293a83acd9dd6ba3e
-ffmpeg getFramesBackward(56): md5 = 1c72b33fd6f829b293a83acd9dd6ba3e
-ffmpeg getFramesBackward(55): md5 = 1c72b33fd6f829b293a83acd9dd6ba3e
-ffmpeg getFramesBackward(54): md5 = e256491e34893b935d9a3839536d2587
-ffmpeg getFramesBackward(53): md5 = e256491e34893b935d9a3839536d2587
-ffmpeg getFramesBackward(52): md5 = e256491e34893b935d9a3839536d2587
-ffmpeg getFramesBackward(51): md5 = ac35fe74cc8150970d6b8d6b6615ee7d
-ffmpeg getFramesBackward(50): md5 = ac35fe74cc8150970d6b8d6b6615ee7d
-ffmpeg getFramesBackward(49): md5 = ac35fe74cc8150970d6b8d6b6615ee7d
-ffmpeg getFramesBackward(48): md5 = 9d6241b89b0320d045c81564ae392df1
-ffmpeg getFramesBackward(47): md5 = 9d6241b89b0320d045c81564ae392df1
-ffmpeg getFramesBackward(46): md5 = 9d6241b89b0320d045c81564ae392df1
-ffmpeg getFramesBackward(45): md5 = 1560e32dc970140780155a3b9b8a5458
-ffmpeg getFramesBackward(44): md5 = 1560e32dc970140780155a3b9b8a5458
-ffmpeg getFramesBackward(43): md5 = 1560e32dc970140780155a3b9b8a5458
-ffmpeg getFramesBackward(42): md5 = b8ae52b0bd25ff1ccddfffd61c2aee5a
-ffmpeg getFramesBackward(41): md5 = b8ae52b0bd25ff1ccddfffd61c2aee5a
-ffmpeg getFramesBackward(40): md5 = b8ae52b0bd25ff1ccddfffd61c2aee5a
-ffmpeg getFramesBackward(39): md5 = ae68f48c14a76e4dc2f9c7f2183c7787
-ffmpeg getFramesBackward(38): md5 = ae68f48c14a76e4dc2f9c7f2183c7787
-ffmpeg getFramesBackward(37): md5 = ae68f48c14a76e4dc2f9c7f2183c7787
-ffmpeg getFramesBackward(36): md5 = f614e07399921150044dfdaf880afa17
-ffmpeg getFramesBackward(35): md5 = f614e07399921150044dfdaf880afa17
-ffmpeg getFramesBackward(34): md5 = f614e07399921150044dfdaf880afa17
-ffmpeg getFramesBackward(33): md5 = 30f0dff87230a9f3b1ebdc08b40aa0a7
-ffmpeg getFramesBackward(32): md5 = 30f0dff87230a9f3b1ebdc08b40aa0a7
-ffmpeg getFramesBackward(31): md5 = 30f0dff87230a9f3b1ebdc08b40aa0a7
-ffmpeg getFramesBackward(30): md5 = 0f54b4e8a9e3cbbc6c5e1729f4793b2f
-ffmpeg getFramesBackward(29): md5 = 0f54b4e8a9e3cbbc6c5e1729f4793b2f
-ffmpeg getFramesBackward(28): md5 = 0f54b4e8a9e3cbbc6c5e1729f4793b2f
-ffmpeg getFramesBackward(27): md5 = c9ec47e51edb4a58c1c76a2202d7147f
-ffmpeg getFramesBackward(26): md5 = c9ec47e51edb4a58c1c76a2202d7147f
-ffmpeg getFramesBackward(25): md5 = c9ec47e51edb4a58c1c76a2202d7147f
-ffmpeg getFramesBackward(24): md5 = 74c553e7c88fd2479610cd2093d75717
-ffmpeg getFramesBackward(23): md5 = 74c553e7c88fd2479610cd2093d75717
-ffmpeg getFramesBackward(22): md5 = 74c553e7c88fd2479610cd2093d75717
-ffmpeg getFramesBackward(21): md5 = 3411d97fd52b27b7105a4cf91a7b181e
-ffmpeg getFramesBackward(20): md5 = 3411d97fd52b27b7105a4cf91a7b181e
-ffmpeg getFramesBackward(19): md5 = 3411d97fd52b27b7105a4cf91a7b181e
-ffmpeg getFramesBackward(18): md5 = 337873cd3a4b8529dae4da4aac38874c
-ffmpeg getFramesBackward(17): md5 = 337873cd3a4b8529dae4da4aac38874c
-ffmpeg getFramesBackward(16): md5 = 337873cd3a4b8529dae4da4aac38874c
-ffmpeg getFramesBackward(15): md5 = 5415f831017e32afa73e5ceb32344f4d
-ffmpeg getFramesBackward(14): md5 = 5415f831017e32afa73e5ceb32344f4d
-ffmpeg getFramesBackward(13): md5 = 5415f831017e32afa73e5ceb32344f4d
-ffmpeg getFramesBackward(12): md5 = 966a1fb1d649d8fdc6552ce6fa0e735f
-ffmpeg getFramesBackward(11): md5 = 966a1fb1d649d8fdc6552ce6fa0e735f
-ffmpeg getFramesBackward(10): md5 = 966a1fb1d649d8fdc6552ce6fa0e735f
-ffmpeg getFramesBackward(9): md5 = 157cf8c54851ee90bda8b2398b077c28
-ffmpeg getFramesBackward(8): md5 = 157cf8c54851ee90bda8b2398b077c28
-ffmpeg getFramesBackward(7): md5 = 157cf8c54851ee90bda8b2398b077c28
-ffmpeg getFramesBackward(6): md5 = 9770f3afe55297ea35c9f06a0e4334ea
-ffmpeg getFramesBackward(5): md5 = 9770f3afe55297ea35c9f06a0e4334ea
-ffmpeg getFramesBackward(4): md5 = 9770f3afe55297ea35c9f06a0e4334ea
-ffmpeg getFramesBackward(3): md5 = abdf9f281de68cef4b77a5a7a899b60a
-ffmpeg getFramesBackward(2): md5 = abdf9f281de68cef4b77a5a7a899b60a
-ffmpeg getFramesBackward(1): md5 = abdf9f281de68cef4b77a5a7a899b60a
Index: tests/getPTS.phpt
===================================================================
--- a/tests/getPTS.phpt	(.../branches/ffmpeg-php/ffmpeg-php-0.6.0)
+++ b/tests/getPTS.phpt	(.../trunk/ffmpeg-php)
@@ -2,6 +2,7 @@
 ffmpeg getPTS test (Fixme: This test is no good with robot.avi)
 --SKIPIF--
 <?php 
+die("Skip because robot.avi doesn't have reasonable pts info");
 extension_loaded('ffmpeg') or die("skip ffmpeg extension not loaded"); 
 extension_loaded('gd') or die("skip gd extension not avaliable.");
 function_exists("imagecreatetruecolor") or die("skip function imagecreatetruecolor unavailable");
Index: tests/getFrameResampled.phpt
===================================================================
--- a/tests/getFrameResampled.phpt	(.../branches/ffmpeg-php/ffmpeg-php-0.6.0)
+++ b/tests/getFrameResampled.phpt	(.../trunk/ffmpeg-php)
@@ -0,0 +1,31 @@
+--TEST--
+ffmpeg getFrameResampled test
+--SKIPIF--
+<?php 
+extension_loaded('ffmpeg') or die("skip ffmpeg extension not loaded"); 
+extension_loaded('gd') or die("skip gd extension not avaliable.");
+function_exists("imagecreatetruecolor") or die("skip function imagecreatetruecolor unavailable");
+?>
+--FILE--
+<?php
+$frame = 70;
+$mov = new ffmpeg_movie(dirname(__FILE__) . '/test_media/robot.avi');
+$img = sprintf("%s/test-%04d.png", dirname(__FILE__), $frame);
+
+$ff_frame = $mov->getFrame($frame);
+if ($ff_frame) {
+    $ff_frame->resize(360, 460);
+    $gd_image = $ff_frame->toGDImage();
+    if ($gd_image) {
+        imagepng($gd_image, $img);
+        imagedestroy($gd_image);
+        // generate md5 of file (NOTE: different versions of ffmpeg may produce different
+        // md5 hashes since resampling has been changed slightly due to a fix. Need to
+        // use EXPECTREX to test for both md5 possibilities.
+        printf("ffmpeg getFrameResampled(): md5 = %s\n", md5(file_get_contents($img)));
+//        unlink($img);
+    }
+}
+?>
+--EXPECT--
+ffmpeg getFrameResampled(): md5 = 9901af04cb0a276b11fa73eebb7df291
Index: tests/getFramesForwardPassedEnd.phpt
===================================================================
--- a/tests/getFramesForwardPassedEnd.phpt	(.../branches/ffmpeg-php/ffmpeg-php-0.6.0)
+++ b/tests/getFramesForwardPassedEnd.phpt	(.../trunk/ffmpeg-php)
@@ -25,245 +25,244 @@
 }
 ?>
 --EXPECT--
-ffmpeg getFrame(1): md5 = abdf9f281de68cef4b77a5a7a899b60a
-ffmpeg getFrame(2): md5 = abdf9f281de68cef4b77a5a7a899b60a
-ffmpeg getFrame(3): md5 = abdf9f281de68cef4b77a5a7a899b60a
-ffmpeg getFrame(4): md5 = 9770f3afe55297ea35c9f06a0e4334ea
-ffmpeg getFrame(5): md5 = 9770f3afe55297ea35c9f06a0e4334ea
-ffmpeg getFrame(6): md5 = 9770f3afe55297ea35c9f06a0e4334ea
-ffmpeg getFrame(7): md5 = 157cf8c54851ee90bda8b2398b077c28
-ffmpeg getFrame(8): md5 = 157cf8c54851ee90bda8b2398b077c28
-ffmpeg getFrame(9): md5 = 157cf8c54851ee90bda8b2398b077c28
-ffmpeg getFrame(10): md5 = 966a1fb1d649d8fdc6552ce6fa0e735f
-ffmpeg getFrame(11): md5 = 966a1fb1d649d8fdc6552ce6fa0e735f
-ffmpeg getFrame(12): md5 = 966a1fb1d649d8fdc6552ce6fa0e735f
-ffmpeg getFrame(13): md5 = 5415f831017e32afa73e5ceb32344f4d
-ffmpeg getFrame(14): md5 = 5415f831017e32afa73e5ceb32344f4d
-ffmpeg getFrame(15): md5 = 5415f831017e32afa73e5ceb32344f4d
-ffmpeg getFrame(16): md5 = 337873cd3a4b8529dae4da4aac38874c
-ffmpeg getFrame(17): md5 = 337873cd3a4b8529dae4da4aac38874c
-ffmpeg getFrame(18): md5 = 337873cd3a4b8529dae4da4aac38874c
-ffmpeg getFrame(19): md5 = 3411d97fd52b27b7105a4cf91a7b181e
-ffmpeg getFrame(20): md5 = 3411d97fd52b27b7105a4cf91a7b181e
-ffmpeg getFrame(21): md5 = 3411d97fd52b27b7105a4cf91a7b181e
-ffmpeg getFrame(22): md5 = 74c553e7c88fd2479610cd2093d75717
-ffmpeg getFrame(23): md5 = 74c553e7c88fd2479610cd2093d75717
-ffmpeg getFrame(24): md5 = 74c553e7c88fd2479610cd2093d75717
-ffmpeg getFrame(25): md5 = c9ec47e51edb4a58c1c76a2202d7147f
-ffmpeg getFrame(26): md5 = c9ec47e51edb4a58c1c76a2202d7147f
-ffmpeg getFrame(27): md5 = c9ec47e51edb4a58c1c76a2202d7147f
-ffmpeg getFrame(28): md5 = 0f54b4e8a9e3cbbc6c5e1729f4793b2f
-ffmpeg getFrame(29): md5 = 0f54b4e8a9e3cbbc6c5e1729f4793b2f
-ffmpeg getFrame(30): md5 = 0f54b4e8a9e3cbbc6c5e1729f4793b2f
-ffmpeg getFrame(31): md5 = 30f0dff87230a9f3b1ebdc08b40aa0a7
-ffmpeg getFrame(32): md5 = 30f0dff87230a9f3b1ebdc08b40aa0a7
-ffmpeg getFrame(33): md5 = 30f0dff87230a9f3b1ebdc08b40aa0a7
-ffmpeg getFrame(34): md5 = f614e07399921150044dfdaf880afa17
-ffmpeg getFrame(35): md5 = f614e07399921150044dfdaf880afa17
-ffmpeg getFrame(36): md5 = f614e07399921150044dfdaf880afa17
-ffmpeg getFrame(37): md5 = ae68f48c14a76e4dc2f9c7f2183c7787
-ffmpeg getFrame(38): md5 = ae68f48c14a76e4dc2f9c7f2183c7787
-ffmpeg getFrame(39): md5 = ae68f48c14a76e4dc2f9c7f2183c7787
-ffmpeg getFrame(40): md5 = b8ae52b0bd25ff1ccddfffd61c2aee5a
-ffmpeg getFrame(41): md5 = b8ae52b0bd25ff1ccddfffd61c2aee5a
-ffmpeg getFrame(42): md5 = b8ae52b0bd25ff1ccddfffd61c2aee5a
-ffmpeg getFrame(43): md5 = 1560e32dc970140780155a3b9b8a5458
-ffmpeg getFrame(44): md5 = 1560e32dc970140780155a3b9b8a5458
-ffmpeg getFrame(45): md5 = 1560e32dc970140780155a3b9b8a5458
-ffmpeg getFrame(46): md5 = 9d6241b89b0320d045c81564ae392df1
-ffmpeg getFrame(47): md5 = 9d6241b89b0320d045c81564ae392df1
-ffmpeg getFrame(48): md5 = 9d6241b89b0320d045c81564ae392df1
-ffmpeg getFrame(49): md5 = ac35fe74cc8150970d6b8d6b6615ee7d
-ffmpeg getFrame(50): md5 = ac35fe74cc8150970d6b8d6b6615ee7d
-ffmpeg getFrame(51): md5 = ac35fe74cc8150970d6b8d6b6615ee7d
-ffmpeg getFrame(52): md5 = e256491e34893b935d9a3839536d2587
-ffmpeg getFrame(53): md5 = e256491e34893b935d9a3839536d2587
-ffmpeg getFrame(54): md5 = e256491e34893b935d9a3839536d2587
-ffmpeg getFrame(55): md5 = 1c72b33fd6f829b293a83acd9dd6ba3e
-ffmpeg getFrame(56): md5 = 1c72b33fd6f829b293a83acd9dd6ba3e
-ffmpeg getFrame(57): md5 = 1c72b33fd6f829b293a83acd9dd6ba3e
-ffmpeg getFrame(58): md5 = 954c1013975c1fc29ab8bbaf9208069a
-ffmpeg getFrame(59): md5 = 954c1013975c1fc29ab8bbaf9208069a
-ffmpeg getFrame(60): md5 = 954c1013975c1fc29ab8bbaf9208069a
-ffmpeg getFrame(61): md5 = 86d1330ec92bb2c672db8cfacef7c128
-ffmpeg getFrame(62): md5 = 86d1330ec92bb2c672db8cfacef7c128
-ffmpeg getFrame(63): md5 = 86d1330ec92bb2c672db8cfacef7c128
-ffmpeg getFrame(64): md5 = 3b8248dcafbc02ecab8f5a3065e61f03
-ffmpeg getFrame(65): md5 = 3b8248dcafbc02ecab8f5a3065e61f03
-ffmpeg getFrame(66): md5 = 3b8248dcafbc02ecab8f5a3065e61f03
-ffmpeg getFrame(67): md5 = db77eae1c1395ba1c794ae1281d68868
-ffmpeg getFrame(68): md5 = db77eae1c1395ba1c794ae1281d68868
-ffmpeg getFrame(69): md5 = db77eae1c1395ba1c794ae1281d68868
-ffmpeg getFrame(70): md5 = afe384b15e07ea544fa7a1cdada288c0
-ffmpeg getFrame(71): md5 = afe384b15e07ea544fa7a1cdada288c0
-ffmpeg getFrame(72): md5 = afe384b15e07ea544fa7a1cdada288c0
-ffmpeg getFrame(73): md5 = 8c9cbc1183504e1d1fee262e83775e01
-ffmpeg getFrame(74): md5 = 8c9cbc1183504e1d1fee262e83775e01
-ffmpeg getFrame(75): md5 = 8c9cbc1183504e1d1fee262e83775e01
-ffmpeg getFrame(76): md5 = d502f1afe81ec69de3222d3b56b3d516
-ffmpeg getFrame(77): md5 = d502f1afe81ec69de3222d3b56b3d516
-ffmpeg getFrame(78): md5 = d502f1afe81ec69de3222d3b56b3d516
-ffmpeg getFrame(79): md5 = 8004f62b065a0d55150220972821be96
-ffmpeg getFrame(80): md5 = 8004f62b065a0d55150220972821be96
-ffmpeg getFrame(81): md5 = 8004f62b065a0d55150220972821be96
-ffmpeg getFrame(82): md5 = 92ecabfab41f2715a05f3847e2484b60
-ffmpeg getFrame(83): md5 = 92ecabfab41f2715a05f3847e2484b60
-ffmpeg getFrame(84): md5 = 92ecabfab41f2715a05f3847e2484b60
-ffmpeg getFrame(85): md5 = ceafeaf93812d8f5fd48f6fa242d5e36
-ffmpeg getFrame(86): md5 = ceafeaf93812d8f5fd48f6fa242d5e36
-ffmpeg getFrame(87): md5 = ceafeaf93812d8f5fd48f6fa242d5e36
-ffmpeg getFrame(88): md5 = 41b5423e725b29fdacc5ee40faa4776c
-ffmpeg getFrame(89): md5 = 41b5423e725b29fdacc5ee40faa4776c
-ffmpeg getFrame(90): md5 = 41b5423e725b29fdacc5ee40faa4776c
-ffmpeg getFrame(91): md5 = afa2f0bab3ba2b34806b2a52aea98bce
-ffmpeg getFrame(92): md5 = afa2f0bab3ba2b34806b2a52aea98bce
-ffmpeg getFrame(93): md5 = afa2f0bab3ba2b34806b2a52aea98bce
-ffmpeg getFrame(94): md5 = c8ed36df36fb8cea156212a5d5952d33
-ffmpeg getFrame(95): md5 = c8ed36df36fb8cea156212a5d5952d33
-ffmpeg getFrame(96): md5 = c8ed36df36fb8cea156212a5d5952d33
-ffmpeg getFrame(97): md5 = c97ea8a480b98c52f8b726b811f9714d
-ffmpeg getFrame(98): md5 = c97ea8a480b98c52f8b726b811f9714d
-ffmpeg getFrame(99): md5 = c97ea8a480b98c52f8b726b811f9714d
-ffmpeg getFrame(100): md5 = a98e967bbda4b6dcaa19fd52d9fdef12
-ffmpeg getFrame(101): md5 = a98e967bbda4b6dcaa19fd52d9fdef12
-ffmpeg getFrame(102): md5 = a98e967bbda4b6dcaa19fd52d9fdef12
-ffmpeg getFrame(103): md5 = 395b50b5c8615cdb4b905aa0b3b2e669
-ffmpeg getFrame(104): md5 = 395b50b5c8615cdb4b905aa0b3b2e669
-ffmpeg getFrame(105): md5 = 395b50b5c8615cdb4b905aa0b3b2e669
-ffmpeg getFrame(106): md5 = 86f50526473282524be5c092f77950a5
-ffmpeg getFrame(107): md5 = 86f50526473282524be5c092f77950a5
-ffmpeg getFrame(108): md5 = 86f50526473282524be5c092f77950a5
-ffmpeg getFrame(109): md5 = 9e5e0b70bfc1c90f2c5092428bc384ee
-ffmpeg getFrame(110): md5 = 9e5e0b70bfc1c90f2c5092428bc384ee
-ffmpeg getFrame(111): md5 = 9e5e0b70bfc1c90f2c5092428bc384ee
-ffmpeg getFrame(112): md5 = 5f9109436658f422ec1841247acf835e
-ffmpeg getFrame(113): md5 = 5f9109436658f422ec1841247acf835e
-ffmpeg getFrame(114): md5 = 5f9109436658f422ec1841247acf835e
-ffmpeg getFrame(115): md5 = 80e13931ccc6ace3a5a7ae256e048a61
-ffmpeg getFrame(116): md5 = 80e13931ccc6ace3a5a7ae256e048a61
-ffmpeg getFrame(117): md5 = 80e13931ccc6ace3a5a7ae256e048a61
-ffmpeg getFrame(118): md5 = 21f287b5f3334a7aaed0aeeb55230621
-ffmpeg getFrame(119): md5 = 21f287b5f3334a7aaed0aeeb55230621
-ffmpeg getFrame(120): md5 = 21f287b5f3334a7aaed0aeeb55230621
-ffmpeg getFrame(121): md5 = 22caa03aaa35e0aed2f0a3d4a3375b24
-ffmpeg getFrame(122): md5 = 22caa03aaa35e0aed2f0a3d4a3375b24
-ffmpeg getFrame(123): md5 = 22caa03aaa35e0aed2f0a3d4a3375b24
-ffmpeg getFrame(124): md5 = 36cbf250ecf8c5a5538bd0a5f2eb9333
-ffmpeg getFrame(125): md5 = 36cbf250ecf8c5a5538bd0a5f2eb9333
-ffmpeg getFrame(126): md5 = 36cbf250ecf8c5a5538bd0a5f2eb9333
-ffmpeg getFrame(127): md5 = ffdc385768b0b1fcbb9908c9c9bffe21
-ffmpeg getFrame(128): md5 = ffdc385768b0b1fcbb9908c9c9bffe21
-ffmpeg getFrame(129): md5 = ffdc385768b0b1fcbb9908c9c9bffe21
-ffmpeg getFrame(130): md5 = 3ead3c1a402a7e26ee248cd8f9c96647
-ffmpeg getFrame(131): md5 = 3ead3c1a402a7e26ee248cd8f9c96647
-ffmpeg getFrame(132): md5 = 3ead3c1a402a7e26ee248cd8f9c96647
-ffmpeg getFrame(133): md5 = 3445a37f0effaef1a9c4e788f5ce54e5
-ffmpeg getFrame(134): md5 = 3445a37f0effaef1a9c4e788f5ce54e5
-ffmpeg getFrame(135): md5 = 3445a37f0effaef1a9c4e788f5ce54e5
-ffmpeg getFrame(136): md5 = 948fd5fd379679006c2ca2ba3bc52048
-ffmpeg getFrame(137): md5 = 948fd5fd379679006c2ca2ba3bc52048
-ffmpeg getFrame(138): md5 = 948fd5fd379679006c2ca2ba3bc52048
-ffmpeg getFrame(139): md5 = 814b8a64a6a08093b3a81063bffffed4
-ffmpeg getFrame(140): md5 = 814b8a64a6a08093b3a81063bffffed4
-ffmpeg getFrame(141): md5 = 814b8a64a6a08093b3a81063bffffed4
-ffmpeg getFrame(142): md5 = 51a73cbaf315c9faf8263627455fd5d5
-ffmpeg getFrame(143): md5 = 51a73cbaf315c9faf8263627455fd5d5
-ffmpeg getFrame(144): md5 = 51a73cbaf315c9faf8263627455fd5d5
-ffmpeg getFrame(145): md5 = 31038504cc4c1e664de89c257b1fa1b0
-ffmpeg getFrame(146): md5 = 31038504cc4c1e664de89c257b1fa1b0
-ffmpeg getFrame(147): md5 = 31038504cc4c1e664de89c257b1fa1b0
-ffmpeg getFrame(148): md5 = c76afdadc9099d8bd173f0e08807ee3d
-ffmpeg getFrame(149): md5 = c76afdadc9099d8bd173f0e08807ee3d
-ffmpeg getFrame(150): md5 = c76afdadc9099d8bd173f0e08807ee3d
-ffmpeg getFrame(151): md5 = cd42cff504053e23c5db378119a40b3f
-ffmpeg getFrame(152): md5 = cd42cff504053e23c5db378119a40b3f
-ffmpeg getFrame(153): md5 = cd42cff504053e23c5db378119a40b3f
-ffmpeg getFrame(154): md5 = 7862bd022cc4e9c3976b2f4758e5cd30
-ffmpeg getFrame(155): md5 = 7862bd022cc4e9c3976b2f4758e5cd30
-ffmpeg getFrame(156): md5 = 7862bd022cc4e9c3976b2f4758e5cd30
-ffmpeg getFrame(157): md5 = 7dee4d143138fce530917488cc337c8c
-ffmpeg getFrame(158): md5 = 7dee4d143138fce530917488cc337c8c
-ffmpeg getFrame(159): md5 = 7dee4d143138fce530917488cc337c8c
-ffmpeg getFrame(160): md5 = 254d01500e3ec7f6ae402747761c0a95
-ffmpeg getFrame(161): md5 = 254d01500e3ec7f6ae402747761c0a95
-ffmpeg getFrame(162): md5 = 254d01500e3ec7f6ae402747761c0a95
-ffmpeg getFrame(163): md5 = fe0cdb9314d1628af56e6c3662deb24f
-ffmpeg getFrame(164): md5 = fe0cdb9314d1628af56e6c3662deb24f
-ffmpeg getFrame(165): md5 = fe0cdb9314d1628af56e6c3662deb24f
-ffmpeg getFrame(166): md5 = c790f8cc0f715ca0ec31845c9ef7397a
-ffmpeg getFrame(167): md5 = c790f8cc0f715ca0ec31845c9ef7397a
-ffmpeg getFrame(168): md5 = c790f8cc0f715ca0ec31845c9ef7397a
-ffmpeg getFrame(169): md5 = bab883284018046ddfa2e638785615aa
-ffmpeg getFrame(170): md5 = bab883284018046ddfa2e638785615aa
-ffmpeg getFrame(171): md5 = bab883284018046ddfa2e638785615aa
-ffmpeg getFrame(172): md5 = a469093f43c0fdd6016ee5ef932b7ca4
-ffmpeg getFrame(173): md5 = a469093f43c0fdd6016ee5ef932b7ca4
-ffmpeg getFrame(174): md5 = a469093f43c0fdd6016ee5ef932b7ca4
-ffmpeg getFrame(175): md5 = 50d636deb9cdca5c88842653d3e62463
-ffmpeg getFrame(176): md5 = 50d636deb9cdca5c88842653d3e62463
-ffmpeg getFrame(177): md5 = 50d636deb9cdca5c88842653d3e62463
-ffmpeg getFrame(178): md5 = 7def27ec8a2136e344b24b12337f3a0c
-ffmpeg getFrame(179): md5 = 7def27ec8a2136e344b24b12337f3a0c
-ffmpeg getFrame(180): md5 = 7def27ec8a2136e344b24b12337f3a0c
-ffmpeg getFrame(181): md5 = 93bdda9b26422cf7791154d54667812e
-ffmpeg getFrame(182): md5 = 93bdda9b26422cf7791154d54667812e
-ffmpeg getFrame(183): md5 = 93bdda9b26422cf7791154d54667812e
-ffmpeg getFrame(184): md5 = 965909c3829a19aa301ff7dc98f1ca90
-ffmpeg getFrame(185): md5 = 965909c3829a19aa301ff7dc98f1ca90
-ffmpeg getFrame(186): md5 = 965909c3829a19aa301ff7dc98f1ca90
-ffmpeg getFrame(187): md5 = a53b0c4d2c023f1019b3190b35216c60
-ffmpeg getFrame(188): md5 = a53b0c4d2c023f1019b3190b35216c60
-ffmpeg getFrame(189): md5 = a53b0c4d2c023f1019b3190b35216c60
-ffmpeg getFrame(190): md5 = b900f912fbe898801a4c8356638dcf54
-ffmpeg getFrame(191): md5 = b900f912fbe898801a4c8356638dcf54
-ffmpeg getFrame(192): md5 = b900f912fbe898801a4c8356638dcf54
-ffmpeg getFrame(193): md5 = 5221475c9ea8970258feb9dab1392049
-ffmpeg getFrame(194): md5 = 5221475c9ea8970258feb9dab1392049
-ffmpeg getFrame(195): md5 = 5221475c9ea8970258feb9dab1392049
-ffmpeg getFrame(196): md5 = 6851e0793856841f31acc6a5f704650c
-ffmpeg getFrame(197): md5 = 6851e0793856841f31acc6a5f704650c
-ffmpeg getFrame(198): md5 = 6851e0793856841f31acc6a5f704650c
-ffmpeg getFrame(199): md5 = 35335bb3cbc1cb75aff8416a26df8f39
-ffmpeg getFrame(200): md5 = 35335bb3cbc1cb75aff8416a26df8f39
-ffmpeg getFrame(201): md5 = 35335bb3cbc1cb75aff8416a26df8f39
-ffmpeg getFrame(202): md5 = c9584d3d2c2480fb480953e9bc317cb0
-ffmpeg getFrame(203): md5 = c9584d3d2c2480fb480953e9bc317cb0
-ffmpeg getFrame(204): md5 = c9584d3d2c2480fb480953e9bc317cb0
-ffmpeg getFrame(205): md5 = 3081db2af3ff5bc76f938f9b80ec72bb
-ffmpeg getFrame(206): md5 = 3081db2af3ff5bc76f938f9b80ec72bb
-ffmpeg getFrame(207): md5 = 3081db2af3ff5bc76f938f9b80ec72bb
-ffmpeg getFrame(208): md5 = 10230400f9cdb8a4785082ed133f4c40
-ffmpeg getFrame(209): md5 = 10230400f9cdb8a4785082ed133f4c40
-ffmpeg getFrame(210): md5 = 10230400f9cdb8a4785082ed133f4c40
-ffmpeg getFrame(211): md5 = ccc8aa4b659a072ef3e94005e982e197
-ffmpeg getFrame(212): md5 = ccc8aa4b659a072ef3e94005e982e197
-ffmpeg getFrame(213): md5 = ccc8aa4b659a072ef3e94005e982e197
-ffmpeg getFrame(214): md5 = 916130d3a9a0b5291dd80c3f905f3cfe
-ffmpeg getFrame(215): md5 = 916130d3a9a0b5291dd80c3f905f3cfe
-ffmpeg getFrame(216): md5 = 916130d3a9a0b5291dd80c3f905f3cfe
-ffmpeg getFrame(217): md5 = c9b92c3b3043cadf83b634aaa9967af2
-ffmpeg getFrame(218): md5 = c9b92c3b3043cadf83b634aaa9967af2
-ffmpeg getFrame(219): md5 = c9b92c3b3043cadf83b634aaa9967af2
-ffmpeg getFrame(220): md5 = d60ad82118cc3d82d61380e8c1c35821
-ffmpeg getFrame(221): md5 = d60ad82118cc3d82d61380e8c1c35821
-ffmpeg getFrame(222): md5 = d60ad82118cc3d82d61380e8c1c35821
-ffmpeg getFrame(223): md5 = bb894534f0fbb93ae13effea4ae7778c
-ffmpeg getFrame(224): md5 = bb894534f0fbb93ae13effea4ae7778c
-ffmpeg getFrame(225): md5 = bb894534f0fbb93ae13effea4ae7778c
-ffmpeg getFrame(226): md5 = 03fe855c91fbaabe9e260a23ca4fa6cd
-ffmpeg getFrame(227): md5 = 03fe855c91fbaabe9e260a23ca4fa6cd
-ffmpeg getFrame(228): md5 = 03fe855c91fbaabe9e260a23ca4fa6cd
-ffmpeg getFrame(229): md5 = 92b0f153f17e6a387535ba873c245ef2
-ffmpeg getFrame(230): md5 = 92b0f153f17e6a387535ba873c245ef2
-ffmpeg getFrame(231): md5 = 92b0f153f17e6a387535ba873c245ef2
-ffmpeg getFrame(232): md5 = f513c73faf87cbfe1fff854d97f8f492
-ffmpeg getFrame(233): md5 = f513c73faf87cbfe1fff854d97f8f492
-ffmpeg getFrame(234): md5 = f513c73faf87cbfe1fff854d97f8f492
-ffmpeg getFrame(235): md5 = 972e660b84a02fb883809c93f1ffdbf8
-ffmpeg getFrame(236): md5 = 972e660b84a02fb883809c93f1ffdbf8
-ffmpeg getFrame(237): md5 = 972e660b84a02fb883809c93f1ffdbf8
-ffmpeg getFrame(238): md5 = 7e80bfd9c95b8f46e4ffcc1acacd478d
-ffmpeg getFrame(239): md5 = 7e80bfd9c95b8f46e4ffcc1acacd478d
-ffmpeg getFrame(240): md5 = 7e80bfd9c95b8f46e4ffcc1acacd478d
-ffmpeg getFrame(241): md5 = c3fca01d3ba84b05c18574615858e613
-
+ffmpeg getFrame(1): md5 = 054ca5377a0592ea15497bcfefa59181
+ffmpeg getFrame(2): md5 = 054ca5377a0592ea15497bcfefa59181
+ffmpeg getFrame(3): md5 = 054ca5377a0592ea15497bcfefa59181
+ffmpeg getFrame(4): md5 = bc3e96ad73e019583d449b6d2d857858
+ffmpeg getFrame(5): md5 = bc3e96ad73e019583d449b6d2d857858
+ffmpeg getFrame(6): md5 = bc3e96ad73e019583d449b6d2d857858
+ffmpeg getFrame(7): md5 = 0a7a900dc376afc5598d5b2ae50be442
+ffmpeg getFrame(8): md5 = 0a7a900dc376afc5598d5b2ae50be442
+ffmpeg getFrame(9): md5 = 0a7a900dc376afc5598d5b2ae50be442
+ffmpeg getFrame(10): md5 = 8de055e9eb38073ab35f75cfe4adae83
+ffmpeg getFrame(11): md5 = 8de055e9eb38073ab35f75cfe4adae83
+ffmpeg getFrame(12): md5 = 8de055e9eb38073ab35f75cfe4adae83
+ffmpeg getFrame(13): md5 = 73327939f7fc8b6080525dc259bdd136
+ffmpeg getFrame(14): md5 = 73327939f7fc8b6080525dc259bdd136
+ffmpeg getFrame(15): md5 = 73327939f7fc8b6080525dc259bdd136
+ffmpeg getFrame(16): md5 = 25fce65aaebf63d787415133ee525e0b
+ffmpeg getFrame(17): md5 = 25fce65aaebf63d787415133ee525e0b
+ffmpeg getFrame(18): md5 = 25fce65aaebf63d787415133ee525e0b
+ffmpeg getFrame(19): md5 = dbcd63a3fe7bc6e5ae746134462a582d
+ffmpeg getFrame(20): md5 = dbcd63a3fe7bc6e5ae746134462a582d
+ffmpeg getFrame(21): md5 = dbcd63a3fe7bc6e5ae746134462a582d
+ffmpeg getFrame(22): md5 = 5af7473006c39343accad86b6f9cf6ed
+ffmpeg getFrame(23): md5 = 5af7473006c39343accad86b6f9cf6ed
+ffmpeg getFrame(24): md5 = 5af7473006c39343accad86b6f9cf6ed
+ffmpeg getFrame(25): md5 = 405cc6f1453352460cf01875aa23ccff
+ffmpeg getFrame(26): md5 = 405cc6f1453352460cf01875aa23ccff
+ffmpeg getFrame(27): md5 = 405cc6f1453352460cf01875aa23ccff
+ffmpeg getFrame(28): md5 = cbdbcebeea6ea45f6965a83543b6c44b
+ffmpeg getFrame(29): md5 = cbdbcebeea6ea45f6965a83543b6c44b
+ffmpeg getFrame(30): md5 = cbdbcebeea6ea45f6965a83543b6c44b
+ffmpeg getFrame(31): md5 = 9620a937f1a19c3d5e95716fae1eb47f
+ffmpeg getFrame(32): md5 = 9620a937f1a19c3d5e95716fae1eb47f
+ffmpeg getFrame(33): md5 = 9620a937f1a19c3d5e95716fae1eb47f
+ffmpeg getFrame(34): md5 = 689ad71143a347f53417356eabb0037f
+ffmpeg getFrame(35): md5 = 689ad71143a347f53417356eabb0037f
+ffmpeg getFrame(36): md5 = 689ad71143a347f53417356eabb0037f
+ffmpeg getFrame(37): md5 = 4f9a4e239c4b9459a59b038b0be3d5df
+ffmpeg getFrame(38): md5 = 4f9a4e239c4b9459a59b038b0be3d5df
+ffmpeg getFrame(39): md5 = 4f9a4e239c4b9459a59b038b0be3d5df
+ffmpeg getFrame(40): md5 = 579618d56fe46acdb9bcfcff67808ae4
+ffmpeg getFrame(41): md5 = 579618d56fe46acdb9bcfcff67808ae4
+ffmpeg getFrame(42): md5 = 579618d56fe46acdb9bcfcff67808ae4
+ffmpeg getFrame(43): md5 = 9f77876e4926b92d5f7dc565ac94e366
+ffmpeg getFrame(44): md5 = 9f77876e4926b92d5f7dc565ac94e366
+ffmpeg getFrame(45): md5 = 9f77876e4926b92d5f7dc565ac94e366
+ffmpeg getFrame(46): md5 = faa5ef30ddeb97020250c150779e3399
+ffmpeg getFrame(47): md5 = faa5ef30ddeb97020250c150779e3399
+ffmpeg getFrame(48): md5 = faa5ef30ddeb97020250c150779e3399
+ffmpeg getFrame(49): md5 = c61c4e4620af5adba309237a84ef91df
+ffmpeg getFrame(50): md5 = c61c4e4620af5adba309237a84ef91df
+ffmpeg getFrame(51): md5 = c61c4e4620af5adba309237a84ef91df
+ffmpeg getFrame(52): md5 = 3953dcbdeb9b687b2b1e925183a16c39
+ffmpeg getFrame(53): md5 = 3953dcbdeb9b687b2b1e925183a16c39
+ffmpeg getFrame(54): md5 = 3953dcbdeb9b687b2b1e925183a16c39
+ffmpeg getFrame(55): md5 = c360fd94742147db7e97796a61eee19f
+ffmpeg getFrame(56): md5 = c360fd94742147db7e97796a61eee19f
+ffmpeg getFrame(57): md5 = c360fd94742147db7e97796a61eee19f
+ffmpeg getFrame(58): md5 = 7b1f32d4e4a1efce454c0b73ec015e75
+ffmpeg getFrame(59): md5 = 7b1f32d4e4a1efce454c0b73ec015e75
+ffmpeg getFrame(60): md5 = 7b1f32d4e4a1efce454c0b73ec015e75
+ffmpeg getFrame(61): md5 = 963b85dafe7ac84daf64a12931509de7
+ffmpeg getFrame(62): md5 = 963b85dafe7ac84daf64a12931509de7
+ffmpeg getFrame(63): md5 = 963b85dafe7ac84daf64a12931509de7
+ffmpeg getFrame(64): md5 = d86b04f95208b77c06e49ba9a76b477f
+ffmpeg getFrame(65): md5 = d86b04f95208b77c06e49ba9a76b477f
+ffmpeg getFrame(66): md5 = d86b04f95208b77c06e49ba9a76b477f
+ffmpeg getFrame(67): md5 = cc52ca71fc8daae8feba52fa329f9f66
+ffmpeg getFrame(68): md5 = cc52ca71fc8daae8feba52fa329f9f66
+ffmpeg getFrame(69): md5 = cc52ca71fc8daae8feba52fa329f9f66
+ffmpeg getFrame(70): md5 = 3cac4625a645a147a7e7cb8ab28ebf07
+ffmpeg getFrame(71): md5 = 3cac4625a645a147a7e7cb8ab28ebf07
+ffmpeg getFrame(72): md5 = 3cac4625a645a147a7e7cb8ab28ebf07
+ffmpeg getFrame(73): md5 = f8eb6d231d353e8d98cf76f1fcf960c3
+ffmpeg getFrame(74): md5 = f8eb6d231d353e8d98cf76f1fcf960c3
+ffmpeg getFrame(75): md5 = f8eb6d231d353e8d98cf76f1fcf960c3
+ffmpeg getFrame(76): md5 = 25ea525ec2630b123da3bd18b44e391b
+ffmpeg getFrame(77): md5 = 25ea525ec2630b123da3bd18b44e391b
+ffmpeg getFrame(78): md5 = 25ea525ec2630b123da3bd18b44e391b
+ffmpeg getFrame(79): md5 = 97ea17ae200e6ca4e2412ba5546d4cdb
+ffmpeg getFrame(80): md5 = 97ea17ae200e6ca4e2412ba5546d4cdb
+ffmpeg getFrame(81): md5 = 97ea17ae200e6ca4e2412ba5546d4cdb
+ffmpeg getFrame(82): md5 = d0bc5176b565500f09851abf059bf736
+ffmpeg getFrame(83): md5 = d0bc5176b565500f09851abf059bf736
+ffmpeg getFrame(84): md5 = d0bc5176b565500f09851abf059bf736
+ffmpeg getFrame(85): md5 = a73c78e3ae667682e9920a218353540b
+ffmpeg getFrame(86): md5 = a73c78e3ae667682e9920a218353540b
+ffmpeg getFrame(87): md5 = a73c78e3ae667682e9920a218353540b
+ffmpeg getFrame(88): md5 = 02172b5823992d273f7d4295f628309a
+ffmpeg getFrame(89): md5 = 02172b5823992d273f7d4295f628309a
+ffmpeg getFrame(90): md5 = 02172b5823992d273f7d4295f628309a
+ffmpeg getFrame(91): md5 = 5887bfa75094567d9aec180eda7e45c6
+ffmpeg getFrame(92): md5 = 5887bfa75094567d9aec180eda7e45c6
+ffmpeg getFrame(93): md5 = 5887bfa75094567d9aec180eda7e45c6
+ffmpeg getFrame(94): md5 = 3b93b082d52c4ccb8dc5beb22c8316ab
+ffmpeg getFrame(95): md5 = 3b93b082d52c4ccb8dc5beb22c8316ab
+ffmpeg getFrame(96): md5 = 3b93b082d52c4ccb8dc5beb22c8316ab
+ffmpeg getFrame(97): md5 = b6485f3287312414e90fc0508ce9b194
+ffmpeg getFrame(98): md5 = b6485f3287312414e90fc0508ce9b194
+ffmpeg getFrame(99): md5 = b6485f3287312414e90fc0508ce9b194
+ffmpeg getFrame(100): md5 = 57fe0edffdfcf06e88d7219662f04b05
+ffmpeg getFrame(101): md5 = 57fe0edffdfcf06e88d7219662f04b05
+ffmpeg getFrame(102): md5 = 57fe0edffdfcf06e88d7219662f04b05
+ffmpeg getFrame(103): md5 = 5e6ab28f31801cddb176f1c01d13f364
+ffmpeg getFrame(104): md5 = 5e6ab28f31801cddb176f1c01d13f364
+ffmpeg getFrame(105): md5 = 5e6ab28f31801cddb176f1c01d13f364
+ffmpeg getFrame(106): md5 = ab2142ee9ec11e01e42a072ad5762030
+ffmpeg getFrame(107): md5 = ab2142ee9ec11e01e42a072ad5762030
+ffmpeg getFrame(108): md5 = ab2142ee9ec11e01e42a072ad5762030
+ffmpeg getFrame(109): md5 = 84410c79c7cf32562a83fa8f4bb981f7
+ffmpeg getFrame(110): md5 = 84410c79c7cf32562a83fa8f4bb981f7
+ffmpeg getFrame(111): md5 = 84410c79c7cf32562a83fa8f4bb981f7
+ffmpeg getFrame(112): md5 = 5ea25236d676122a90799adefc529611
+ffmpeg getFrame(113): md5 = 5ea25236d676122a90799adefc529611
+ffmpeg getFrame(114): md5 = 5ea25236d676122a90799adefc529611
+ffmpeg getFrame(115): md5 = 0ac65e51db3d7b40f55df3a43f3f03d2
+ffmpeg getFrame(116): md5 = 0ac65e51db3d7b40f55df3a43f3f03d2
+ffmpeg getFrame(117): md5 = 0ac65e51db3d7b40f55df3a43f3f03d2
+ffmpeg getFrame(118): md5 = b0b6a709c28c75d9beffaaaba969ec12
+ffmpeg getFrame(119): md5 = b0b6a709c28c75d9beffaaaba969ec12
+ffmpeg getFrame(120): md5 = b0b6a709c28c75d9beffaaaba969ec12
+ffmpeg getFrame(121): md5 = 7c58a3bc631a7ec1dd48de99658a5cc4
+ffmpeg getFrame(122): md5 = 7c58a3bc631a7ec1dd48de99658a5cc4
+ffmpeg getFrame(123): md5 = 7c58a3bc631a7ec1dd48de99658a5cc4
+ffmpeg getFrame(124): md5 = a89b9a83054bf8737a97c080f07a59bd
+ffmpeg getFrame(125): md5 = a89b9a83054bf8737a97c080f07a59bd
+ffmpeg getFrame(126): md5 = a89b9a83054bf8737a97c080f07a59bd
+ffmpeg getFrame(127): md5 = 5d58afe8118077391b8523a065dd7fce
+ffmpeg getFrame(128): md5 = 5d58afe8118077391b8523a065dd7fce
+ffmpeg getFrame(129): md5 = 5d58afe8118077391b8523a065dd7fce
+ffmpeg getFrame(130): md5 = d7a36b7a67f4ca8941931a15517f5eb1
+ffmpeg getFrame(131): md5 = d7a36b7a67f4ca8941931a15517f5eb1
+ffmpeg getFrame(132): md5 = d7a36b7a67f4ca8941931a15517f5eb1
+ffmpeg getFrame(133): md5 = 3064adc7a54286b4c45f9fe3669e8b1d
+ffmpeg getFrame(134): md5 = 3064adc7a54286b4c45f9fe3669e8b1d
+ffmpeg getFrame(135): md5 = 3064adc7a54286b4c45f9fe3669e8b1d
+ffmpeg getFrame(136): md5 = 49feb765089580d9f3de8a6e36cbaed7
+ffmpeg getFrame(137): md5 = 49feb765089580d9f3de8a6e36cbaed7
+ffmpeg getFrame(138): md5 = 49feb765089580d9f3de8a6e36cbaed7
+ffmpeg getFrame(139): md5 = 3f4495bb347480746f2fb994465b25a9
+ffmpeg getFrame(140): md5 = 3f4495bb347480746f2fb994465b25a9
+ffmpeg getFrame(141): md5 = 3f4495bb347480746f2fb994465b25a9
+ffmpeg getFrame(142): md5 = 53343b23bb1a4aeb1f667608265fad9a
+ffmpeg getFrame(143): md5 = 53343b23bb1a4aeb1f667608265fad9a
+ffmpeg getFrame(144): md5 = 53343b23bb1a4aeb1f667608265fad9a
+ffmpeg getFrame(145): md5 = b84c2d59f936f7cae83e736dc2dd0ebc
+ffmpeg getFrame(146): md5 = b84c2d59f936f7cae83e736dc2dd0ebc
+ffmpeg getFrame(147): md5 = b84c2d59f936f7cae83e736dc2dd0ebc
+ffmpeg getFrame(148): md5 = abe4ae47b43678b60c192fbb4d0a69b5
+ffmpeg getFrame(149): md5 = abe4ae47b43678b60c192fbb4d0a69b5
+ffmpeg getFrame(150): md5 = abe4ae47b43678b60c192fbb4d0a69b5
+ffmpeg getFrame(151): md5 = 117c46c3a208183085c41eccf223c7e6
+ffmpeg getFrame(152): md5 = 117c46c3a208183085c41eccf223c7e6
+ffmpeg getFrame(153): md5 = 117c46c3a208183085c41eccf223c7e6
+ffmpeg getFrame(154): md5 = d587fae1b39f3a2ffae867f9652e1ed7
+ffmpeg getFrame(155): md5 = d587fae1b39f3a2ffae867f9652e1ed7
+ffmpeg getFrame(156): md5 = d587fae1b39f3a2ffae867f9652e1ed7
+ffmpeg getFrame(157): md5 = db17bcfe68abe673bf3df8b8062714ab
+ffmpeg getFrame(158): md5 = db17bcfe68abe673bf3df8b8062714ab
+ffmpeg getFrame(159): md5 = db17bcfe68abe673bf3df8b8062714ab
+ffmpeg getFrame(160): md5 = 316351119812a64ff994bbad9332286e
+ffmpeg getFrame(161): md5 = 316351119812a64ff994bbad9332286e
+ffmpeg getFrame(162): md5 = 316351119812a64ff994bbad9332286e
+ffmpeg getFrame(163): md5 = f4af5e8779fa40f07b0285a4dc1b049d
+ffmpeg getFrame(164): md5 = f4af5e8779fa40f07b0285a4dc1b049d
+ffmpeg getFrame(165): md5 = f4af5e8779fa40f07b0285a4dc1b049d
+ffmpeg getFrame(166): md5 = 274f9691f9d2360d53f299c1fba79614
+ffmpeg getFrame(167): md5 = 274f9691f9d2360d53f299c1fba79614
+ffmpeg getFrame(168): md5 = 274f9691f9d2360d53f299c1fba79614
+ffmpeg getFrame(169): md5 = 4973cb1e537815ee8b7ef73e759f5c39
+ffmpeg getFrame(170): md5 = 4973cb1e537815ee8b7ef73e759f5c39
+ffmpeg getFrame(171): md5 = 4973cb1e537815ee8b7ef73e759f5c39
+ffmpeg getFrame(172): md5 = 8629707f6d5c1a205564ac5f6f10d89f
+ffmpeg getFrame(173): md5 = 8629707f6d5c1a205564ac5f6f10d89f
+ffmpeg getFrame(174): md5 = 8629707f6d5c1a205564ac5f6f10d89f
+ffmpeg getFrame(175): md5 = f72576077cd616c026c7f56829f220ae
+ffmpeg getFrame(176): md5 = f72576077cd616c026c7f56829f220ae
+ffmpeg getFrame(177): md5 = f72576077cd616c026c7f56829f220ae
+ffmpeg getFrame(178): md5 = 017aaef2fe10b6aa2788d7ea0620c252
+ffmpeg getFrame(179): md5 = 017aaef2fe10b6aa2788d7ea0620c252
+ffmpeg getFrame(180): md5 = 017aaef2fe10b6aa2788d7ea0620c252
+ffmpeg getFrame(181): md5 = a5b5bfe8b20e018ef506d703b2af7ccc
+ffmpeg getFrame(182): md5 = a5b5bfe8b20e018ef506d703b2af7ccc
+ffmpeg getFrame(183): md5 = a5b5bfe8b20e018ef506d703b2af7ccc
+ffmpeg getFrame(184): md5 = cc781178ac22f4cf6641183926067215
+ffmpeg getFrame(185): md5 = cc781178ac22f4cf6641183926067215
+ffmpeg getFrame(186): md5 = cc781178ac22f4cf6641183926067215
+ffmpeg getFrame(187): md5 = b0338a88dff4cbabb1599a807e5c6ef0
+ffmpeg getFrame(188): md5 = b0338a88dff4cbabb1599a807e5c6ef0
+ffmpeg getFrame(189): md5 = b0338a88dff4cbabb1599a807e5c6ef0
+ffmpeg getFrame(190): md5 = d1ee4ba4a11217efd0cf8cba15a2eb1f
+ffmpeg getFrame(191): md5 = d1ee4ba4a11217efd0cf8cba15a2eb1f
+ffmpeg getFrame(192): md5 = d1ee4ba4a11217efd0cf8cba15a2eb1f
+ffmpeg getFrame(193): md5 = 0d2849f432fc9656c31629f6288feba0
+ffmpeg getFrame(194): md5 = 0d2849f432fc9656c31629f6288feba0
+ffmpeg getFrame(195): md5 = 0d2849f432fc9656c31629f6288feba0
+ffmpeg getFrame(196): md5 = c26f6d4cf0737c5c6b102c048312f0fc
+ffmpeg getFrame(197): md5 = c26f6d4cf0737c5c6b102c048312f0fc
+ffmpeg getFrame(198): md5 = c26f6d4cf0737c5c6b102c048312f0fc
+ffmpeg getFrame(199): md5 = 23d6d68503ec607327ee6216bc695593
+ffmpeg getFrame(200): md5 = 23d6d68503ec607327ee6216bc695593
+ffmpeg getFrame(201): md5 = 23d6d68503ec607327ee6216bc695593
+ffmpeg getFrame(202): md5 = 85c3d4dbcd9315b00e220d334a012083
+ffmpeg getFrame(203): md5 = 85c3d4dbcd9315b00e220d334a012083
+ffmpeg getFrame(204): md5 = 85c3d4dbcd9315b00e220d334a012083
+ffmpeg getFrame(205): md5 = 08d8b9d438667d710cacc0d9081a4883
+ffmpeg getFrame(206): md5 = 08d8b9d438667d710cacc0d9081a4883
+ffmpeg getFrame(207): md5 = 08d8b9d438667d710cacc0d9081a4883
+ffmpeg getFrame(208): md5 = d3ce913a9c16206990a6b9a80c0561f3
+ffmpeg getFrame(209): md5 = d3ce913a9c16206990a6b9a80c0561f3
+ffmpeg getFrame(210): md5 = d3ce913a9c16206990a6b9a80c0561f3
+ffmpeg getFrame(211): md5 = 64bcd46af5519ad65722bc94e71a5628
+ffmpeg getFrame(212): md5 = 64bcd46af5519ad65722bc94e71a5628
+ffmpeg getFrame(213): md5 = 64bcd46af5519ad65722bc94e71a5628
+ffmpeg getFrame(214): md5 = 55a1b21fb233ec1b965aa27fc5680ef7
+ffmpeg getFrame(215): md5 = 55a1b21fb233ec1b965aa27fc5680ef7
+ffmpeg getFrame(216): md5 = 55a1b21fb233ec1b965aa27fc5680ef7
+ffmpeg getFrame(217): md5 = cbf35af572f3947b04b391dbe8f01912
+ffmpeg getFrame(218): md5 = cbf35af572f3947b04b391dbe8f01912
+ffmpeg getFrame(219): md5 = cbf35af572f3947b04b391dbe8f01912
+ffmpeg getFrame(220): md5 = b68f724605514e4ae7676c04fff62461
+ffmpeg getFrame(221): md5 = b68f724605514e4ae7676c04fff62461
+ffmpeg getFrame(222): md5 = b68f724605514e4ae7676c04fff62461
+ffmpeg getFrame(223): md5 = e2d66cb30e1d942da4b603ecae95c64e
+ffmpeg getFrame(224): md5 = e2d66cb30e1d942da4b603ecae95c64e
+ffmpeg getFrame(225): md5 = e2d66cb30e1d942da4b603ecae95c64e
+ffmpeg getFrame(226): md5 = 70c86d74b825b685d3e90c2dfa21f307
+ffmpeg getFrame(227): md5 = 70c86d74b825b685d3e90c2dfa21f307
+ffmpeg getFrame(228): md5 = 70c86d74b825b685d3e90c2dfa21f307
+ffmpeg getFrame(229): md5 = 52e93862544f05c92375d2aaa2c7dc16
+ffmpeg getFrame(230): md5 = 52e93862544f05c92375d2aaa2c7dc16
+ffmpeg getFrame(231): md5 = 52e93862544f05c92375d2aaa2c7dc16
+ffmpeg getFrame(232): md5 = da9910064c0414e256056b769f942049
+ffmpeg getFrame(233): md5 = da9910064c0414e256056b769f942049
+ffmpeg getFrame(234): md5 = da9910064c0414e256056b769f942049
+ffmpeg getFrame(235): md5 = 2817e435640fc7c26685401007ad6177
+ffmpeg getFrame(236): md5 = 2817e435640fc7c26685401007ad6177
+ffmpeg getFrame(237): md5 = 2817e435640fc7c26685401007ad6177
+ffmpeg getFrame(238): md5 = 5da7388e5b099cfb030b36cefcb260aa
+ffmpeg getFrame(239): md5 = 5da7388e5b099cfb030b36cefcb260aa
+ffmpeg getFrame(240): md5 = 5da7388e5b099cfb030b36cefcb260aa
+ffmpeg getFrame(241): md5 = e3a3ea606c5ccdc530c7c6b2a2a5aa71
Index: tests/getFrame.phpt
===================================================================
--- a/tests/getFrame.phpt	(.../branches/ffmpeg-php/ffmpeg-php-0.6.0)
+++ b/tests/getFrame.phpt	(.../trunk/ffmpeg-php)
@@ -27,4 +27,4 @@
 }
 ?>
 --EXPECT--
-ffmpeg getFrame(): md5 = 8c9cbc1183504e1d1fee262e83775e01
+ffmpeg getFrame(): md5 = f8eb6d231d353e8d98cf76f1fcf960c3
Index: tests/getID3Info.phpt
===================================================================
--- a/tests/getID3Info.phpt	(.../branches/ffmpeg-php/ffmpeg-php-0.6.0)
+++ b/tests/getID3Info.phpt	(.../trunk/ffmpeg-php)
@@ -17,6 +17,6 @@
 ffmpeg getTitle(): Test mp3
 ffmpeg getArtist(): Alexander Thomas
 ffmpeg getAlbum(): MP3 test files (http://www.dr-lex.be/software/testsounds.html#Tones)
-ffmpeg getGenre(): (37)
+ffmpeg getGenre(): Sound Clip
 ffmpeg getTrackNumber(): 3
 ffmpeg getYear(): 2008
Index: tests/getFramesInReverseOrder.phpt
===================================================================
--- a/tests/getFramesInReverseOrder.phpt	(.../branches/ffmpeg-php/ffmpeg-php-0.6.0)
+++ b/tests/getFramesInReverseOrder.phpt	(.../trunk/ffmpeg-php)
@@ -0,0 +1,264 @@
+--TEST--
+ffmpeg getFrame in reverse order test
+--SKIPIF--
+<?php 
+extension_loaded('ffmpeg') or die("skip ffmpeg extension not loaded"); 
+extension_loaded('gd') or die("skip gd extension not avaliable.");
+function_exists("imagecreatetruecolor") or die("skip function imagecreatetruecolor unavailable");
+?>
+--FILE--
+<?php
+$mov = new ffmpeg_movie(dirname(__FILE__) . '/test_media/robot.avi');
+
+$framecount = $mov->getFrameCount();
+for($i = $framecount; $i > 0; $i--) {
+    $img = sprintf("%s/test-%04d.png", dirname(__FILE__), $i);
+    $frame = $mov->getFrame($i);
+    $image = $frame->toGDImage();
+    imagepng($image, $img);
+    printf("ffmpeg getFramesInReverseOrder($i): md5 = %s\n", md5(file_get_contents($img)));
+    imagedestroy($image);
+    unlink($img);
+}
+?>
+--EXPECT--
+ffmpeg getFramesInReverseOrder(240): md5 = 5da7388e5b099cfb030b36cefcb260aa
+ffmpeg getFramesInReverseOrder(239): md5 = 5da7388e5b099cfb030b36cefcb260aa
+ffmpeg getFramesInReverseOrder(238): md5 = 5da7388e5b099cfb030b36cefcb260aa
+ffmpeg getFramesInReverseOrder(237): md5 = 2817e435640fc7c26685401007ad6177
+ffmpeg getFramesInReverseOrder(236): md5 = 2817e435640fc7c26685401007ad6177
+ffmpeg getFramesInReverseOrder(235): md5 = 2817e435640fc7c26685401007ad6177
+ffmpeg getFramesInReverseOrder(234): md5 = da9910064c0414e256056b769f942049
+ffmpeg getFramesInReverseOrder(233): md5 = da9910064c0414e256056b769f942049
+ffmpeg getFramesInReverseOrder(232): md5 = da9910064c0414e256056b769f942049
+ffmpeg getFramesInReverseOrder(231): md5 = 52e93862544f05c92375d2aaa2c7dc16
+ffmpeg getFramesInReverseOrder(230): md5 = 52e93862544f05c92375d2aaa2c7dc16
+ffmpeg getFramesInReverseOrder(229): md5 = 52e93862544f05c92375d2aaa2c7dc16
+ffmpeg getFramesInReverseOrder(228): md5 = 70c86d74b825b685d3e90c2dfa21f307
+ffmpeg getFramesInReverseOrder(227): md5 = 70c86d74b825b685d3e90c2dfa21f307
+ffmpeg getFramesInReverseOrder(226): md5 = 70c86d74b825b685d3e90c2dfa21f307
+ffmpeg getFramesInReverseOrder(225): md5 = e2d66cb30e1d942da4b603ecae95c64e
+ffmpeg getFramesInReverseOrder(224): md5 = e2d66cb30e1d942da4b603ecae95c64e
+ffmpeg getFramesInReverseOrder(223): md5 = e2d66cb30e1d942da4b603ecae95c64e
+ffmpeg getFramesInReverseOrder(222): md5 = b68f724605514e4ae7676c04fff62461
+ffmpeg getFramesInReverseOrder(221): md5 = b68f724605514e4ae7676c04fff62461
+ffmpeg getFramesInReverseOrder(220): md5 = b68f724605514e4ae7676c04fff62461
+ffmpeg getFramesInReverseOrder(219): md5 = cbf35af572f3947b04b391dbe8f01912
+ffmpeg getFramesInReverseOrder(218): md5 = cbf35af572f3947b04b391dbe8f01912
+ffmpeg getFramesInReverseOrder(217): md5 = cbf35af572f3947b04b391dbe8f01912
+ffmpeg getFramesInReverseOrder(216): md5 = 55a1b21fb233ec1b965aa27fc5680ef7
+ffmpeg getFramesInReverseOrder(215): md5 = 55a1b21fb233ec1b965aa27fc5680ef7
+ffmpeg getFramesInReverseOrder(214): md5 = 55a1b21fb233ec1b965aa27fc5680ef7
+ffmpeg getFramesInReverseOrder(213): md5 = 64bcd46af5519ad65722bc94e71a5628
+ffmpeg getFramesInReverseOrder(212): md5 = 64bcd46af5519ad65722bc94e71a5628
+ffmpeg getFramesInReverseOrder(211): md5 = 64bcd46af5519ad65722bc94e71a5628
+ffmpeg getFramesInReverseOrder(210): md5 = d3ce913a9c16206990a6b9a80c0561f3
+ffmpeg getFramesInReverseOrder(209): md5 = d3ce913a9c16206990a6b9a80c0561f3
+ffmpeg getFramesInReverseOrder(208): md5 = d3ce913a9c16206990a6b9a80c0561f3
+ffmpeg getFramesInReverseOrder(207): md5 = 08d8b9d438667d710cacc0d9081a4883
+ffmpeg getFramesInReverseOrder(206): md5 = 08d8b9d438667d710cacc0d9081a4883
+ffmpeg getFramesInReverseOrder(205): md5 = 08d8b9d438667d710cacc0d9081a4883
+ffmpeg getFramesInReverseOrder(204): md5 = 85c3d4dbcd9315b00e220d334a012083
+ffmpeg getFramesInReverseOrder(203): md5 = 85c3d4dbcd9315b00e220d334a012083
+ffmpeg getFramesInReverseOrder(202): md5 = 85c3d4dbcd9315b00e220d334a012083
+ffmpeg getFramesInReverseOrder(201): md5 = 23d6d68503ec607327ee6216bc695593
+ffmpeg getFramesInReverseOrder(200): md5 = 23d6d68503ec607327ee6216bc695593
+ffmpeg getFramesInReverseOrder(199): md5 = 23d6d68503ec607327ee6216bc695593
+ffmpeg getFramesInReverseOrder(198): md5 = c26f6d4cf0737c5c6b102c048312f0fc
+ffmpeg getFramesInReverseOrder(197): md5 = c26f6d4cf0737c5c6b102c048312f0fc
+ffmpeg getFramesInReverseOrder(196): md5 = c26f6d4cf0737c5c6b102c048312f0fc
+ffmpeg getFramesInReverseOrder(195): md5 = 0d2849f432fc9656c31629f6288feba0
+ffmpeg getFramesInReverseOrder(194): md5 = 0d2849f432fc9656c31629f6288feba0
+ffmpeg getFramesInReverseOrder(193): md5 = 0d2849f432fc9656c31629f6288feba0
+ffmpeg getFramesInReverseOrder(192): md5 = d1ee4ba4a11217efd0cf8cba15a2eb1f
+ffmpeg getFramesInReverseOrder(191): md5 = d1ee4ba4a11217efd0cf8cba15a2eb1f
+ffmpeg getFramesInReverseOrder(190): md5 = d1ee4ba4a11217efd0cf8cba15a2eb1f
+ffmpeg getFramesInReverseOrder(189): md5 = b0338a88dff4cbabb1599a807e5c6ef0
+ffmpeg getFramesInReverseOrder(188): md5 = b0338a88dff4cbabb1599a807e5c6ef0
+ffmpeg getFramesInReverseOrder(187): md5 = b0338a88dff4cbabb1599a807e5c6ef0
+ffmpeg getFramesInReverseOrder(186): md5 = cc781178ac22f4cf6641183926067215
+ffmpeg getFramesInReverseOrder(185): md5 = cc781178ac22f4cf6641183926067215
+ffmpeg getFramesInReverseOrder(184): md5 = cc781178ac22f4cf6641183926067215
+ffmpeg getFramesInReverseOrder(183): md5 = a5b5bfe8b20e018ef506d703b2af7ccc
+ffmpeg getFramesInReverseOrder(182): md5 = a5b5bfe8b20e018ef506d703b2af7ccc
+ffmpeg getFramesInReverseOrder(181): md5 = a5b5bfe8b20e018ef506d703b2af7ccc
+ffmpeg getFramesInReverseOrder(180): md5 = 017aaef2fe10b6aa2788d7ea0620c252
+ffmpeg getFramesInReverseOrder(179): md5 = 017aaef2fe10b6aa2788d7ea0620c252
+ffmpeg getFramesInReverseOrder(178): md5 = 017aaef2fe10b6aa2788d7ea0620c252
+ffmpeg getFramesInReverseOrder(177): md5 = f72576077cd616c026c7f56829f220ae
+ffmpeg getFramesInReverseOrder(176): md5 = f72576077cd616c026c7f56829f220ae
+ffmpeg getFramesInReverseOrder(175): md5 = f72576077cd616c026c7f56829f220ae
+ffmpeg getFramesInReverseOrder(174): md5 = 8629707f6d5c1a205564ac5f6f10d89f
+ffmpeg getFramesInReverseOrder(173): md5 = 8629707f6d5c1a205564ac5f6f10d89f
+ffmpeg getFramesInReverseOrder(172): md5 = 8629707f6d5c1a205564ac5f6f10d89f
+ffmpeg getFramesInReverseOrder(171): md5 = 4973cb1e537815ee8b7ef73e759f5c39
+ffmpeg getFramesInReverseOrder(170): md5 = 4973cb1e537815ee8b7ef73e759f5c39
+ffmpeg getFramesInReverseOrder(169): md5 = 4973cb1e537815ee8b7ef73e759f5c39
+ffmpeg getFramesInReverseOrder(168): md5 = 274f9691f9d2360d53f299c1fba79614
+ffmpeg getFramesInReverseOrder(167): md5 = 274f9691f9d2360d53f299c1fba79614
+ffmpeg getFramesInReverseOrder(166): md5 = 274f9691f9d2360d53f299c1fba79614
+ffmpeg getFramesInReverseOrder(165): md5 = f4af5e8779fa40f07b0285a4dc1b049d
+ffmpeg getFramesInReverseOrder(164): md5 = f4af5e8779fa40f07b0285a4dc1b049d
+ffmpeg getFramesInReverseOrder(163): md5 = f4af5e8779fa40f07b0285a4dc1b049d
+ffmpeg getFramesInReverseOrder(162): md5 = 316351119812a64ff994bbad9332286e
+ffmpeg getFramesInReverseOrder(161): md5 = 316351119812a64ff994bbad9332286e
+ffmpeg getFramesInReverseOrder(160): md5 = 316351119812a64ff994bbad9332286e
+ffmpeg getFramesInReverseOrder(159): md5 = db17bcfe68abe673bf3df8b8062714ab
+ffmpeg getFramesInReverseOrder(158): md5 = db17bcfe68abe673bf3df8b8062714ab
+ffmpeg getFramesInReverseOrder(157): md5 = db17bcfe68abe673bf3df8b8062714ab
+ffmpeg getFramesInReverseOrder(156): md5 = d587fae1b39f3a2ffae867f9652e1ed7
+ffmpeg getFramesInReverseOrder(155): md5 = d587fae1b39f3a2ffae867f9652e1ed7
+ffmpeg getFramesInReverseOrder(154): md5 = d587fae1b39f3a2ffae867f9652e1ed7
+ffmpeg getFramesInReverseOrder(153): md5 = 117c46c3a208183085c41eccf223c7e6
+ffmpeg getFramesInReverseOrder(152): md5 = 117c46c3a208183085c41eccf223c7e6
+ffmpeg getFramesInReverseOrder(151): md5 = 117c46c3a208183085c41eccf223c7e6
+ffmpeg getFramesInReverseOrder(150): md5 = abe4ae47b43678b60c192fbb4d0a69b5
+ffmpeg getFramesInReverseOrder(149): md5 = abe4ae47b43678b60c192fbb4d0a69b5
+ffmpeg getFramesInReverseOrder(148): md5 = abe4ae47b43678b60c192fbb4d0a69b5
+ffmpeg getFramesInReverseOrder(147): md5 = b84c2d59f936f7cae83e736dc2dd0ebc
+ffmpeg getFramesInReverseOrder(146): md5 = b84c2d59f936f7cae83e736dc2dd0ebc
+ffmpeg getFramesInReverseOrder(145): md5 = b84c2d59f936f7cae83e736dc2dd0ebc
+ffmpeg getFramesInReverseOrder(144): md5 = 53343b23bb1a4aeb1f667608265fad9a
+ffmpeg getFramesInReverseOrder(143): md5 = 53343b23bb1a4aeb1f667608265fad9a
+ffmpeg getFramesInReverseOrder(142): md5 = 53343b23bb1a4aeb1f667608265fad9a
+ffmpeg getFramesInReverseOrder(141): md5 = 3f4495bb347480746f2fb994465b25a9
+ffmpeg getFramesInReverseOrder(140): md5 = 3f4495bb347480746f2fb994465b25a9
+ffmpeg getFramesInReverseOrder(139): md5 = 3f4495bb347480746f2fb994465b25a9
+ffmpeg getFramesInReverseOrder(138): md5 = 49feb765089580d9f3de8a6e36cbaed7
+ffmpeg getFramesInReverseOrder(137): md5 = 49feb765089580d9f3de8a6e36cbaed7
+ffmpeg getFramesInReverseOrder(136): md5 = 49feb765089580d9f3de8a6e36cbaed7
+ffmpeg getFramesInReverseOrder(135): md5 = 3064adc7a54286b4c45f9fe3669e8b1d
+ffmpeg getFramesInReverseOrder(134): md5 = 3064adc7a54286b4c45f9fe3669e8b1d
+ffmpeg getFramesInReverseOrder(133): md5 = 3064adc7a54286b4c45f9fe3669e8b1d
+ffmpeg getFramesInReverseOrder(132): md5 = d7a36b7a67f4ca8941931a15517f5eb1
+ffmpeg getFramesInReverseOrder(131): md5 = d7a36b7a67f4ca8941931a15517f5eb1
+ffmpeg getFramesInReverseOrder(130): md5 = d7a36b7a67f4ca8941931a15517f5eb1
+ffmpeg getFramesInReverseOrder(129): md5 = 5d58afe8118077391b8523a065dd7fce
+ffmpeg getFramesInReverseOrder(128): md5 = 5d58afe8118077391b8523a065dd7fce
+ffmpeg getFramesInReverseOrder(127): md5 = 5d58afe8118077391b8523a065dd7fce
+ffmpeg getFramesInReverseOrder(126): md5 = a89b9a83054bf8737a97c080f07a59bd
+ffmpeg getFramesInReverseOrder(125): md5 = a89b9a83054bf8737a97c080f07a59bd
+ffmpeg getFramesInReverseOrder(124): md5 = a89b9a83054bf8737a97c080f07a59bd
+ffmpeg getFramesInReverseOrder(123): md5 = 7c58a3bc631a7ec1dd48de99658a5cc4
+ffmpeg getFramesInReverseOrder(122): md5 = 7c58a3bc631a7ec1dd48de99658a5cc4
+ffmpeg getFramesInReverseOrder(121): md5 = 7c58a3bc631a7ec1dd48de99658a5cc4
+ffmpeg getFramesInReverseOrder(120): md5 = b0b6a709c28c75d9beffaaaba969ec12
+ffmpeg getFramesInReverseOrder(119): md5 = b0b6a709c28c75d9beffaaaba969ec12
+ffmpeg getFramesInReverseOrder(118): md5 = b0b6a709c28c75d9beffaaaba969ec12
+ffmpeg getFramesInReverseOrder(117): md5 = 0ac65e51db3d7b40f55df3a43f3f03d2
+ffmpeg getFramesInReverseOrder(116): md5 = 0ac65e51db3d7b40f55df3a43f3f03d2
+ffmpeg getFramesInReverseOrder(115): md5 = 0ac65e51db3d7b40f55df3a43f3f03d2
+ffmpeg getFramesInReverseOrder(114): md5 = 5ea25236d676122a90799adefc529611
+ffmpeg getFramesInReverseOrder(113): md5 = 5ea25236d676122a90799adefc529611
+ffmpeg getFramesInReverseOrder(112): md5 = 5ea25236d676122a90799adefc529611
+ffmpeg getFramesInReverseOrder(111): md5 = 84410c79c7cf32562a83fa8f4bb981f7
+ffmpeg getFramesInReverseOrder(110): md5 = 84410c79c7cf32562a83fa8f4bb981f7
+ffmpeg getFramesInReverseOrder(109): md5 = 84410c79c7cf32562a83fa8f4bb981f7
+ffmpeg getFramesInReverseOrder(108): md5 = ab2142ee9ec11e01e42a072ad5762030
+ffmpeg getFramesInReverseOrder(107): md5 = ab2142ee9ec11e01e42a072ad5762030
+ffmpeg getFramesInReverseOrder(106): md5 = ab2142ee9ec11e01e42a072ad5762030
+ffmpeg getFramesInReverseOrder(105): md5 = 5e6ab28f31801cddb176f1c01d13f364
+ffmpeg getFramesInReverseOrder(104): md5 = 5e6ab28f31801cddb176f1c01d13f364
+ffmpeg getFramesInReverseOrder(103): md5 = 5e6ab28f31801cddb176f1c01d13f364
+ffmpeg getFramesInReverseOrder(102): md5 = 57fe0edffdfcf06e88d7219662f04b05
+ffmpeg getFramesInReverseOrder(101): md5 = 57fe0edffdfcf06e88d7219662f04b05
+ffmpeg getFramesInReverseOrder(100): md5 = 57fe0edffdfcf06e88d7219662f04b05
+ffmpeg getFramesInReverseOrder(99): md5 = b6485f3287312414e90fc0508ce9b194
+ffmpeg getFramesInReverseOrder(98): md5 = b6485f3287312414e90fc0508ce9b194
+ffmpeg getFramesInReverseOrder(97): md5 = b6485f3287312414e90fc0508ce9b194
+ffmpeg getFramesInReverseOrder(96): md5 = 3b93b082d52c4ccb8dc5beb22c8316ab
+ffmpeg getFramesInReverseOrder(95): md5 = 3b93b082d52c4ccb8dc5beb22c8316ab
+ffmpeg getFramesInReverseOrder(94): md5 = 3b93b082d52c4ccb8dc5beb22c8316ab
+ffmpeg getFramesInReverseOrder(93): md5 = 5887bfa75094567d9aec180eda7e45c6
+ffmpeg getFramesInReverseOrder(92): md5 = 5887bfa75094567d9aec180eda7e45c6
+ffmpeg getFramesInReverseOrder(91): md5 = 5887bfa75094567d9aec180eda7e45c6
+ffmpeg getFramesInReverseOrder(90): md5 = 02172b5823992d273f7d4295f628309a
+ffmpeg getFramesInReverseOrder(89): md5 = 02172b5823992d273f7d4295f628309a
+ffmpeg getFramesInReverseOrder(88): md5 = 02172b5823992d273f7d4295f628309a
+ffmpeg getFramesInReverseOrder(87): md5 = a73c78e3ae667682e9920a218353540b
+ffmpeg getFramesInReverseOrder(86): md5 = a73c78e3ae667682e9920a218353540b
+ffmpeg getFramesInReverseOrder(85): md5 = a73c78e3ae667682e9920a218353540b
+ffmpeg getFramesInReverseOrder(84): md5 = d0bc5176b565500f09851abf059bf736
+ffmpeg getFramesInReverseOrder(83): md5 = d0bc5176b565500f09851abf059bf736
+ffmpeg getFramesInReverseOrder(82): md5 = d0bc5176b565500f09851abf059bf736
+ffmpeg getFramesInReverseOrder(81): md5 = 97ea17ae200e6ca4e2412ba5546d4cdb
+ffmpeg getFramesInReverseOrder(80): md5 = 97ea17ae200e6ca4e2412ba5546d4cdb
+ffmpeg getFramesInReverseOrder(79): md5 = 97ea17ae200e6ca4e2412ba5546d4cdb
+ffmpeg getFramesInReverseOrder(78): md5 = 25ea525ec2630b123da3bd18b44e391b
+ffmpeg getFramesInReverseOrder(77): md5 = 25ea525ec2630b123da3bd18b44e391b
+ffmpeg getFramesInReverseOrder(76): md5 = 25ea525ec2630b123da3bd18b44e391b
+ffmpeg getFramesInReverseOrder(75): md5 = f8eb6d231d353e8d98cf76f1fcf960c3
+ffmpeg getFramesInReverseOrder(74): md5 = f8eb6d231d353e8d98cf76f1fcf960c3
+ffmpeg getFramesInReverseOrder(73): md5 = f8eb6d231d353e8d98cf76f1fcf960c3
+ffmpeg getFramesInReverseOrder(72): md5 = 3cac4625a645a147a7e7cb8ab28ebf07
+ffmpeg getFramesInReverseOrder(71): md5 = 3cac4625a645a147a7e7cb8ab28ebf07
+ffmpeg getFramesInReverseOrder(70): md5 = 3cac4625a645a147a7e7cb8ab28ebf07
+ffmpeg getFramesInReverseOrder(69): md5 = cc52ca71fc8daae8feba52fa329f9f66
+ffmpeg getFramesInReverseOrder(68): md5 = cc52ca71fc8daae8feba52fa329f9f66
+ffmpeg getFramesInReverseOrder(67): md5 = cc52ca71fc8daae8feba52fa329f9f66
+ffmpeg getFramesInReverseOrder(66): md5 = d86b04f95208b77c06e49ba9a76b477f
+ffmpeg getFramesInReverseOrder(65): md5 = d86b04f95208b77c06e49ba9a76b477f
+ffmpeg getFramesInReverseOrder(64): md5 = d86b04f95208b77c06e49ba9a76b477f
+ffmpeg getFramesInReverseOrder(63): md5 = 963b85dafe7ac84daf64a12931509de7
+ffmpeg getFramesInReverseOrder(62): md5 = 963b85dafe7ac84daf64a12931509de7
+ffmpeg getFramesInReverseOrder(61): md5 = 963b85dafe7ac84daf64a12931509de7
+ffmpeg getFramesInReverseOrder(60): md5 = 7b1f32d4e4a1efce454c0b73ec015e75
+ffmpeg getFramesInReverseOrder(59): md5 = 7b1f32d4e4a1efce454c0b73ec015e75
+ffmpeg getFramesInReverseOrder(58): md5 = 7b1f32d4e4a1efce454c0b73ec015e75
+ffmpeg getFramesInReverseOrder(57): md5 = c360fd94742147db7e97796a61eee19f
+ffmpeg getFramesInReverseOrder(56): md5 = c360fd94742147db7e97796a61eee19f
+ffmpeg getFramesInReverseOrder(55): md5 = c360fd94742147db7e97796a61eee19f
+ffmpeg getFramesInReverseOrder(54): md5 = 3953dcbdeb9b687b2b1e925183a16c39
+ffmpeg getFramesInReverseOrder(53): md5 = 3953dcbdeb9b687b2b1e925183a16c39
+ffmpeg getFramesInReverseOrder(52): md5 = 3953dcbdeb9b687b2b1e925183a16c39
+ffmpeg getFramesInReverseOrder(51): md5 = c61c4e4620af5adba309237a84ef91df
+ffmpeg getFramesInReverseOrder(50): md5 = c61c4e4620af5adba309237a84ef91df
+ffmpeg getFramesInReverseOrder(49): md5 = c61c4e4620af5adba309237a84ef91df
+ffmpeg getFramesInReverseOrder(48): md5 = faa5ef30ddeb97020250c150779e3399
+ffmpeg getFramesInReverseOrder(47): md5 = faa5ef30ddeb97020250c150779e3399
+ffmpeg getFramesInReverseOrder(46): md5 = faa5ef30ddeb97020250c150779e3399
+ffmpeg getFramesInReverseOrder(45): md5 = 9f77876e4926b92d5f7dc565ac94e366
+ffmpeg getFramesInReverseOrder(44): md5 = 9f77876e4926b92d5f7dc565ac94e366
+ffmpeg getFramesInReverseOrder(43): md5 = 9f77876e4926b92d5f7dc565ac94e366
+ffmpeg getFramesInReverseOrder(42): md5 = 579618d56fe46acdb9bcfcff67808ae4
+ffmpeg getFramesInReverseOrder(41): md5 = 579618d56fe46acdb9bcfcff67808ae4
+ffmpeg getFramesInReverseOrder(40): md5 = 579618d56fe46acdb9bcfcff67808ae4
+ffmpeg getFramesInReverseOrder(39): md5 = 4f9a4e239c4b9459a59b038b0be3d5df
+ffmpeg getFramesInReverseOrder(38): md5 = 4f9a4e239c4b9459a59b038b0be3d5df
+ffmpeg getFramesInReverseOrder(37): md5 = 4f9a4e239c4b9459a59b038b0be3d5df
+ffmpeg getFramesInReverseOrder(36): md5 = 689ad71143a347f53417356eabb0037f
+ffmpeg getFramesInReverseOrder(35): md5 = 689ad71143a347f53417356eabb0037f
+ffmpeg getFramesInReverseOrder(34): md5 = 689ad71143a347f53417356eabb0037f
+ffmpeg getFramesInReverseOrder(33): md5 = 9620a937f1a19c3d5e95716fae1eb47f
+ffmpeg getFramesInReverseOrder(32): md5 = 9620a937f1a19c3d5e95716fae1eb47f
+ffmpeg getFramesInReverseOrder(31): md5 = 9620a937f1a19c3d5e95716fae1eb47f
+ffmpeg getFramesInReverseOrder(30): md5 = cbdbcebeea6ea45f6965a83543b6c44b
+ffmpeg getFramesInReverseOrder(29): md5 = cbdbcebeea6ea45f6965a83543b6c44b
+ffmpeg getFramesInReverseOrder(28): md5 = cbdbcebeea6ea45f6965a83543b6c44b
+ffmpeg getFramesInReverseOrder(27): md5 = 405cc6f1453352460cf01875aa23ccff
+ffmpeg getFramesInReverseOrder(26): md5 = 405cc6f1453352460cf01875aa23ccff
+ffmpeg getFramesInReverseOrder(25): md5 = 405cc6f1453352460cf01875aa23ccff
+ffmpeg getFramesInReverseOrder(24): md5 = 5af7473006c39343accad86b6f9cf6ed
+ffmpeg getFramesInReverseOrder(23): md5 = 5af7473006c39343accad86b6f9cf6ed
+ffmpeg getFramesInReverseOrder(22): md5 = 5af7473006c39343accad86b6f9cf6ed
+ffmpeg getFramesInReverseOrder(21): md5 = dbcd63a3fe7bc6e5ae746134462a582d
+ffmpeg getFramesInReverseOrder(20): md5 = dbcd63a3fe7bc6e5ae746134462a582d
+ffmpeg getFramesInReverseOrder(19): md5 = dbcd63a3fe7bc6e5ae746134462a582d
+ffmpeg getFramesInReverseOrder(18): md5 = 25fce65aaebf63d787415133ee525e0b
+ffmpeg getFramesInReverseOrder(17): md5 = 25fce65aaebf63d787415133ee525e0b
+ffmpeg getFramesInReverseOrder(16): md5 = 25fce65aaebf63d787415133ee525e0b
+ffmpeg getFramesInReverseOrder(15): md5 = 73327939f7fc8b6080525dc259bdd136
+ffmpeg getFramesInReverseOrder(14): md5 = 73327939f7fc8b6080525dc259bdd136
+ffmpeg getFramesInReverseOrder(13): md5 = 73327939f7fc8b6080525dc259bdd136
+ffmpeg getFramesInReverseOrder(12): md5 = 8de055e9eb38073ab35f75cfe4adae83
+ffmpeg getFramesInReverseOrder(11): md5 = 8de055e9eb38073ab35f75cfe4adae83
+ffmpeg getFramesInReverseOrder(10): md5 = 8de055e9eb38073ab35f75cfe4adae83
+ffmpeg getFramesInReverseOrder(9): md5 = 0a7a900dc376afc5598d5b2ae50be442
+ffmpeg getFramesInReverseOrder(8): md5 = 0a7a900dc376afc5598d5b2ae50be442
+ffmpeg getFramesInReverseOrder(7): md5 = 0a7a900dc376afc5598d5b2ae50be442
+ffmpeg getFramesInReverseOrder(6): md5 = bc3e96ad73e019583d449b6d2d857858
+ffmpeg getFramesInReverseOrder(5): md5 = bc3e96ad73e019583d449b6d2d857858
+ffmpeg getFramesInReverseOrder(4): md5 = bc3e96ad73e019583d449b6d2d857858
+ffmpeg getFramesInReverseOrder(3): md5 = 054ca5377a0592ea15497bcfefa59181
+ffmpeg getFramesInReverseOrder(2): md5 = 054ca5377a0592ea15497bcfefa59181
+ffmpeg getFramesInReverseOrder(1): md5 = 054ca5377a0592ea15497bcfefa59181
Index: tests/getFramesForward.phpt
===================================================================
--- a/tests/getFramesForward.phpt	(.../branches/ffmpeg-php/ffmpeg-php-0.6.0)
+++ b/tests/getFramesForward.phpt	(.../trunk/ffmpeg-php)
@@ -22,243 +22,243 @@
 }
 ?>
 --EXPECT--
-ffmpeg getFramesForward(1): md5 = abdf9f281de68cef4b77a5a7a899b60a
-ffmpeg getFramesForward(2): md5 = abdf9f281de68cef4b77a5a7a899b60a
-ffmpeg getFramesForward(3): md5 = abdf9f281de68cef4b77a5a7a899b60a
-ffmpeg getFramesForward(4): md5 = 9770f3afe55297ea35c9f06a0e4334ea
-ffmpeg getFramesForward(5): md5 = 9770f3afe55297ea35c9f06a0e4334ea
-ffmpeg getFramesForward(6): md5 = 9770f3afe55297ea35c9f06a0e4334ea
-ffmpeg getFramesForward(7): md5 = 157cf8c54851ee90bda8b2398b077c28
-ffmpeg getFramesForward(8): md5 = 157cf8c54851ee90bda8b2398b077c28
-ffmpeg getFramesForward(9): md5 = 157cf8c54851ee90bda8b2398b077c28
-ffmpeg getFramesForward(10): md5 = 966a1fb1d649d8fdc6552ce6fa0e735f
-ffmpeg getFramesForward(11): md5 = 966a1fb1d649d8fdc6552ce6fa0e735f
-ffmpeg getFramesForward(12): md5 = 966a1fb1d649d8fdc6552ce6fa0e735f
-ffmpeg getFramesForward(13): md5 = 5415f831017e32afa73e5ceb32344f4d
-ffmpeg getFramesForward(14): md5 = 5415f831017e32afa73e5ceb32344f4d
-ffmpeg getFramesForward(15): md5 = 5415f831017e32afa73e5ceb32344f4d
-ffmpeg getFramesForward(16): md5 = 337873cd3a4b8529dae4da4aac38874c
-ffmpeg getFramesForward(17): md5 = 337873cd3a4b8529dae4da4aac38874c
-ffmpeg getFramesForward(18): md5 = 337873cd3a4b8529dae4da4aac38874c
-ffmpeg getFramesForward(19): md5 = 3411d97fd52b27b7105a4cf91a7b181e
-ffmpeg getFramesForward(20): md5 = 3411d97fd52b27b7105a4cf91a7b181e
-ffmpeg getFramesForward(21): md5 = 3411d97fd52b27b7105a4cf91a7b181e
-ffmpeg getFramesForward(22): md5 = 74c553e7c88fd2479610cd2093d75717
-ffmpeg getFramesForward(23): md5 = 74c553e7c88fd2479610cd2093d75717
-ffmpeg getFramesForward(24): md5 = 74c553e7c88fd2479610cd2093d75717
-ffmpeg getFramesForward(25): md5 = c9ec47e51edb4a58c1c76a2202d7147f
-ffmpeg getFramesForward(26): md5 = c9ec47e51edb4a58c1c76a2202d7147f
-ffmpeg getFramesForward(27): md5 = c9ec47e51edb4a58c1c76a2202d7147f
-ffmpeg getFramesForward(28): md5 = 0f54b4e8a9e3cbbc6c5e1729f4793b2f
-ffmpeg getFramesForward(29): md5 = 0f54b4e8a9e3cbbc6c5e1729f4793b2f
-ffmpeg getFramesForward(30): md5 = 0f54b4e8a9e3cbbc6c5e1729f4793b2f
-ffmpeg getFramesForward(31): md5 = 30f0dff87230a9f3b1ebdc08b40aa0a7
-ffmpeg getFramesForward(32): md5 = 30f0dff87230a9f3b1ebdc08b40aa0a7
-ffmpeg getFramesForward(33): md5 = 30f0dff87230a9f3b1ebdc08b40aa0a7
-ffmpeg getFramesForward(34): md5 = f614e07399921150044dfdaf880afa17
-ffmpeg getFramesForward(35): md5 = f614e07399921150044dfdaf880afa17
-ffmpeg getFramesForward(36): md5 = f614e07399921150044dfdaf880afa17
-ffmpeg getFramesForward(37): md5 = ae68f48c14a76e4dc2f9c7f2183c7787
-ffmpeg getFramesForward(38): md5 = ae68f48c14a76e4dc2f9c7f2183c7787
-ffmpeg getFramesForward(39): md5 = ae68f48c14a76e4dc2f9c7f2183c7787
-ffmpeg getFramesForward(40): md5 = b8ae52b0bd25ff1ccddfffd61c2aee5a
-ffmpeg getFramesForward(41): md5 = b8ae52b0bd25ff1ccddfffd61c2aee5a
-ffmpeg getFramesForward(42): md5 = b8ae52b0bd25ff1ccddfffd61c2aee5a
-ffmpeg getFramesForward(43): md5 = 1560e32dc970140780155a3b9b8a5458
-ffmpeg getFramesForward(44): md5 = 1560e32dc970140780155a3b9b8a5458
-ffmpeg getFramesForward(45): md5 = 1560e32dc970140780155a3b9b8a5458
-ffmpeg getFramesForward(46): md5 = 9d6241b89b0320d045c81564ae392df1
-ffmpeg getFramesForward(47): md5 = 9d6241b89b0320d045c81564ae392df1
-ffmpeg getFramesForward(48): md5 = 9d6241b89b0320d045c81564ae392df1
-ffmpeg getFramesForward(49): md5 = ac35fe74cc8150970d6b8d6b6615ee7d
-ffmpeg getFramesForward(50): md5 = ac35fe74cc8150970d6b8d6b6615ee7d
-ffmpeg getFramesForward(51): md5 = ac35fe74cc8150970d6b8d6b6615ee7d
-ffmpeg getFramesForward(52): md5 = e256491e34893b935d9a3839536d2587
-ffmpeg getFramesForward(53): md5 = e256491e34893b935d9a3839536d2587
-ffmpeg getFramesForward(54): md5 = e256491e34893b935d9a3839536d2587
-ffmpeg getFramesForward(55): md5 = 1c72b33fd6f829b293a83acd9dd6ba3e
-ffmpeg getFramesForward(56): md5 = 1c72b33fd6f829b293a83acd9dd6ba3e
-ffmpeg getFramesForward(57): md5 = 1c72b33fd6f829b293a83acd9dd6ba3e
-ffmpeg getFramesForward(58): md5 = 954c1013975c1fc29ab8bbaf9208069a
-ffmpeg getFramesForward(59): md5 = 954c1013975c1fc29ab8bbaf9208069a
-ffmpeg getFramesForward(60): md5 = 954c1013975c1fc29ab8bbaf9208069a
-ffmpeg getFramesForward(61): md5 = 86d1330ec92bb2c672db8cfacef7c128
-ffmpeg getFramesForward(62): md5 = 86d1330ec92bb2c672db8cfacef7c128
-ffmpeg getFramesForward(63): md5 = 86d1330ec92bb2c672db8cfacef7c128
-ffmpeg getFramesForward(64): md5 = 3b8248dcafbc02ecab8f5a3065e61f03
-ffmpeg getFramesForward(65): md5 = 3b8248dcafbc02ecab8f5a3065e61f03
-ffmpeg getFramesForward(66): md5 = 3b8248dcafbc02ecab8f5a3065e61f03
-ffmpeg getFramesForward(67): md5 = db77eae1c1395ba1c794ae1281d68868
-ffmpeg getFramesForward(68): md5 = db77eae1c1395ba1c794ae1281d68868
-ffmpeg getFramesForward(69): md5 = db77eae1c1395ba1c794ae1281d68868
-ffmpeg getFramesForward(70): md5 = afe384b15e07ea544fa7a1cdada288c0
-ffmpeg getFramesForward(71): md5 = afe384b15e07ea544fa7a1cdada288c0
-ffmpeg getFramesForward(72): md5 = afe384b15e07ea544fa7a1cdada288c0
-ffmpeg getFramesForward(73): md5 = 8c9cbc1183504e1d1fee262e83775e01
-ffmpeg getFramesForward(74): md5 = 8c9cbc1183504e1d1fee262e83775e01
-ffmpeg getFramesForward(75): md5 = 8c9cbc1183504e1d1fee262e83775e01
-ffmpeg getFramesForward(76): md5 = d502f1afe81ec69de3222d3b56b3d516
-ffmpeg getFramesForward(77): md5 = d502f1afe81ec69de3222d3b56b3d516
-ffmpeg getFramesForward(78): md5 = d502f1afe81ec69de3222d3b56b3d516
-ffmpeg getFramesForward(79): md5 = 8004f62b065a0d55150220972821be96
-ffmpeg getFramesForward(80): md5 = 8004f62b065a0d55150220972821be96
-ffmpeg getFramesForward(81): md5 = 8004f62b065a0d55150220972821be96
-ffmpeg getFramesForward(82): md5 = 92ecabfab41f2715a05f3847e2484b60
-ffmpeg getFramesForward(83): md5 = 92ecabfab41f2715a05f3847e2484b60
-ffmpeg getFramesForward(84): md5 = 92ecabfab41f2715a05f3847e2484b60
-ffmpeg getFramesForward(85): md5 = ceafeaf93812d8f5fd48f6fa242d5e36
-ffmpeg getFramesForward(86): md5 = ceafeaf93812d8f5fd48f6fa242d5e36
-ffmpeg getFramesForward(87): md5 = ceafeaf93812d8f5fd48f6fa242d5e36
-ffmpeg getFramesForward(88): md5 = 41b5423e725b29fdacc5ee40faa4776c
-ffmpeg getFramesForward(89): md5 = 41b5423e725b29fdacc5ee40faa4776c
-ffmpeg getFramesForward(90): md5 = 41b5423e725b29fdacc5ee40faa4776c
-ffmpeg getFramesForward(91): md5 = afa2f0bab3ba2b34806b2a52aea98bce
-ffmpeg getFramesForward(92): md5 = afa2f0bab3ba2b34806b2a52aea98bce
-ffmpeg getFramesForward(93): md5 = afa2f0bab3ba2b34806b2a52aea98bce
-ffmpeg getFramesForward(94): md5 = c8ed36df36fb8cea156212a5d5952d33
-ffmpeg getFramesForward(95): md5 = c8ed36df36fb8cea156212a5d5952d33
-ffmpeg getFramesForward(96): md5 = c8ed36df36fb8cea156212a5d5952d33
-ffmpeg getFramesForward(97): md5 = c97ea8a480b98c52f8b726b811f9714d
-ffmpeg getFramesForward(98): md5 = c97ea8a480b98c52f8b726b811f9714d
-ffmpeg getFramesForward(99): md5 = c97ea8a480b98c52f8b726b811f9714d
-ffmpeg getFramesForward(100): md5 = a98e967bbda4b6dcaa19fd52d9fdef12
-ffmpeg getFramesForward(101): md5 = a98e967bbda4b6dcaa19fd52d9fdef12
-ffmpeg getFramesForward(102): md5 = a98e967bbda4b6dcaa19fd52d9fdef12
-ffmpeg getFramesForward(103): md5 = 395b50b5c8615cdb4b905aa0b3b2e669
-ffmpeg getFramesForward(104): md5 = 395b50b5c8615cdb4b905aa0b3b2e669
-ffmpeg getFramesForward(105): md5 = 395b50b5c8615cdb4b905aa0b3b2e669
-ffmpeg getFramesForward(106): md5 = 86f50526473282524be5c092f77950a5
-ffmpeg getFramesForward(107): md5 = 86f50526473282524be5c092f77950a5
-ffmpeg getFramesForward(108): md5 = 86f50526473282524be5c092f77950a5
-ffmpeg getFramesForward(109): md5 = 9e5e0b70bfc1c90f2c5092428bc384ee
-ffmpeg getFramesForward(110): md5 = 9e5e0b70bfc1c90f2c5092428bc384ee
-ffmpeg getFramesForward(111): md5 = 9e5e0b70bfc1c90f2c5092428bc384ee
-ffmpeg getFramesForward(112): md5 = 5f9109436658f422ec1841247acf835e
-ffmpeg getFramesForward(113): md5 = 5f9109436658f422ec1841247acf835e
-ffmpeg getFramesForward(114): md5 = 5f9109436658f422ec1841247acf835e
-ffmpeg getFramesForward(115): md5 = 80e13931ccc6ace3a5a7ae256e048a61
-ffmpeg getFramesForward(116): md5 = 80e13931ccc6ace3a5a7ae256e048a61
-ffmpeg getFramesForward(117): md5 = 80e13931ccc6ace3a5a7ae256e048a61
-ffmpeg getFramesForward(118): md5 = 21f287b5f3334a7aaed0aeeb55230621
-ffmpeg getFramesForward(119): md5 = 21f287b5f3334a7aaed0aeeb55230621
-ffmpeg getFramesForward(120): md5 = 21f287b5f3334a7aaed0aeeb55230621
-ffmpeg getFramesForward(121): md5 = 22caa03aaa35e0aed2f0a3d4a3375b24
-ffmpeg getFramesForward(122): md5 = 22caa03aaa35e0aed2f0a3d4a3375b24
-ffmpeg getFramesForward(123): md5 = 22caa03aaa35e0aed2f0a3d4a3375b24
-ffmpeg getFramesForward(124): md5 = 36cbf250ecf8c5a5538bd0a5f2eb9333
-ffmpeg getFramesForward(125): md5 = 36cbf250ecf8c5a5538bd0a5f2eb9333
-ffmpeg getFramesForward(126): md5 = 36cbf250ecf8c5a5538bd0a5f2eb9333
-ffmpeg getFramesForward(127): md5 = ffdc385768b0b1fcbb9908c9c9bffe21
-ffmpeg getFramesForward(128): md5 = ffdc385768b0b1fcbb9908c9c9bffe21
-ffmpeg getFramesForward(129): md5 = ffdc385768b0b1fcbb9908c9c9bffe21
-ffmpeg getFramesForward(130): md5 = 3ead3c1a402a7e26ee248cd8f9c96647
-ffmpeg getFramesForward(131): md5 = 3ead3c1a402a7e26ee248cd8f9c96647
-ffmpeg getFramesForward(132): md5 = 3ead3c1a402a7e26ee248cd8f9c96647
-ffmpeg getFramesForward(133): md5 = 3445a37f0effaef1a9c4e788f5ce54e5
-ffmpeg getFramesForward(134): md5 = 3445a37f0effaef1a9c4e788f5ce54e5
-ffmpeg getFramesForward(135): md5 = 3445a37f0effaef1a9c4e788f5ce54e5
-ffmpeg getFramesForward(136): md5 = 948fd5fd379679006c2ca2ba3bc52048
-ffmpeg getFramesForward(137): md5 = 948fd5fd379679006c2ca2ba3bc52048
-ffmpeg getFramesForward(138): md5 = 948fd5fd379679006c2ca2ba3bc52048
-ffmpeg getFramesForward(139): md5 = 814b8a64a6a08093b3a81063bffffed4
-ffmpeg getFramesForward(140): md5 = 814b8a64a6a08093b3a81063bffffed4
-ffmpeg getFramesForward(141): md5 = 814b8a64a6a08093b3a81063bffffed4
-ffmpeg getFramesForward(142): md5 = 51a73cbaf315c9faf8263627455fd5d5
-ffmpeg getFramesForward(143): md5 = 51a73cbaf315c9faf8263627455fd5d5
-ffmpeg getFramesForward(144): md5 = 51a73cbaf315c9faf8263627455fd5d5
-ffmpeg getFramesForward(145): md5 = 31038504cc4c1e664de89c257b1fa1b0
-ffmpeg getFramesForward(146): md5 = 31038504cc4c1e664de89c257b1fa1b0
-ffmpeg getFramesForward(147): md5 = 31038504cc4c1e664de89c257b1fa1b0
-ffmpeg getFramesForward(148): md5 = c76afdadc9099d8bd173f0e08807ee3d
-ffmpeg getFramesForward(149): md5 = c76afdadc9099d8bd173f0e08807ee3d
-ffmpeg getFramesForward(150): md5 = c76afdadc9099d8bd173f0e08807ee3d
-ffmpeg getFramesForward(151): md5 = cd42cff504053e23c5db378119a40b3f
-ffmpeg getFramesForward(152): md5 = cd42cff504053e23c5db378119a40b3f
-ffmpeg getFramesForward(153): md5 = cd42cff504053e23c5db378119a40b3f
-ffmpeg getFramesForward(154): md5 = 7862bd022cc4e9c3976b2f4758e5cd30
-ffmpeg getFramesForward(155): md5 = 7862bd022cc4e9c3976b2f4758e5cd30
-ffmpeg getFramesForward(156): md5 = 7862bd022cc4e9c3976b2f4758e5cd30
-ffmpeg getFramesForward(157): md5 = 7dee4d143138fce530917488cc337c8c
-ffmpeg getFramesForward(158): md5 = 7dee4d143138fce530917488cc337c8c
-ffmpeg getFramesForward(159): md5 = 7dee4d143138fce530917488cc337c8c
-ffmpeg getFramesForward(160): md5 = 254d01500e3ec7f6ae402747761c0a95
-ffmpeg getFramesForward(161): md5 = 254d01500e3ec7f6ae402747761c0a95
-ffmpeg getFramesForward(162): md5 = 254d01500e3ec7f6ae402747761c0a95
-ffmpeg getFramesForward(163): md5 = fe0cdb9314d1628af56e6c3662deb24f
-ffmpeg getFramesForward(164): md5 = fe0cdb9314d1628af56e6c3662deb24f
-ffmpeg getFramesForward(165): md5 = fe0cdb9314d1628af56e6c3662deb24f
-ffmpeg getFramesForward(166): md5 = c790f8cc0f715ca0ec31845c9ef7397a
-ffmpeg getFramesForward(167): md5 = c790f8cc0f715ca0ec31845c9ef7397a
-ffmpeg getFramesForward(168): md5 = c790f8cc0f715ca0ec31845c9ef7397a
-ffmpeg getFramesForward(169): md5 = bab883284018046ddfa2e638785615aa
-ffmpeg getFramesForward(170): md5 = bab883284018046ddfa2e638785615aa
-ffmpeg getFramesForward(171): md5 = bab883284018046ddfa2e638785615aa
-ffmpeg getFramesForward(172): md5 = a469093f43c0fdd6016ee5ef932b7ca4
-ffmpeg getFramesForward(173): md5 = a469093f43c0fdd6016ee5ef932b7ca4
-ffmpeg getFramesForward(174): md5 = a469093f43c0fdd6016ee5ef932b7ca4
-ffmpeg getFramesForward(175): md5 = 50d636deb9cdca5c88842653d3e62463
-ffmpeg getFramesForward(176): md5 = 50d636deb9cdca5c88842653d3e62463
-ffmpeg getFramesForward(177): md5 = 50d636deb9cdca5c88842653d3e62463
-ffmpeg getFramesForward(178): md5 = 7def27ec8a2136e344b24b12337f3a0c
-ffmpeg getFramesForward(179): md5 = 7def27ec8a2136e344b24b12337f3a0c
-ffmpeg getFramesForward(180): md5 = 7def27ec8a2136e344b24b12337f3a0c
-ffmpeg getFramesForward(181): md5 = 93bdda9b26422cf7791154d54667812e
-ffmpeg getFramesForward(182): md5 = 93bdda9b26422cf7791154d54667812e
-ffmpeg getFramesForward(183): md5 = 93bdda9b26422cf7791154d54667812e
-ffmpeg getFramesForward(184): md5 = 965909c3829a19aa301ff7dc98f1ca90
-ffmpeg getFramesForward(185): md5 = 965909c3829a19aa301ff7dc98f1ca90
-ffmpeg getFramesForward(186): md5 = 965909c3829a19aa301ff7dc98f1ca90
-ffmpeg getFramesForward(187): md5 = a53b0c4d2c023f1019b3190b35216c60
-ffmpeg getFramesForward(188): md5 = a53b0c4d2c023f1019b3190b35216c60
-ffmpeg getFramesForward(189): md5 = a53b0c4d2c023f1019b3190b35216c60
-ffmpeg getFramesForward(190): md5 = b900f912fbe898801a4c8356638dcf54
-ffmpeg getFramesForward(191): md5 = b900f912fbe898801a4c8356638dcf54
-ffmpeg getFramesForward(192): md5 = b900f912fbe898801a4c8356638dcf54
-ffmpeg getFramesForward(193): md5 = 5221475c9ea8970258feb9dab1392049
-ffmpeg getFramesForward(194): md5 = 5221475c9ea8970258feb9dab1392049
-ffmpeg getFramesForward(195): md5 = 5221475c9ea8970258feb9dab1392049
-ffmpeg getFramesForward(196): md5 = 6851e0793856841f31acc6a5f704650c
-ffmpeg getFramesForward(197): md5 = 6851e0793856841f31acc6a5f704650c
-ffmpeg getFramesForward(198): md5 = 6851e0793856841f31acc6a5f704650c
-ffmpeg getFramesForward(199): md5 = 35335bb3cbc1cb75aff8416a26df8f39
-ffmpeg getFramesForward(200): md5 = 35335bb3cbc1cb75aff8416a26df8f39
-ffmpeg getFramesForward(201): md5 = 35335bb3cbc1cb75aff8416a26df8f39
-ffmpeg getFramesForward(202): md5 = c9584d3d2c2480fb480953e9bc317cb0
-ffmpeg getFramesForward(203): md5 = c9584d3d2c2480fb480953e9bc317cb0
-ffmpeg getFramesForward(204): md5 = c9584d3d2c2480fb480953e9bc317cb0
-ffmpeg getFramesForward(205): md5 = 3081db2af3ff5bc76f938f9b80ec72bb
-ffmpeg getFramesForward(206): md5 = 3081db2af3ff5bc76f938f9b80ec72bb
-ffmpeg getFramesForward(207): md5 = 3081db2af3ff5bc76f938f9b80ec72bb
-ffmpeg getFramesForward(208): md5 = 10230400f9cdb8a4785082ed133f4c40
-ffmpeg getFramesForward(209): md5 = 10230400f9cdb8a4785082ed133f4c40
-ffmpeg getFramesForward(210): md5 = 10230400f9cdb8a4785082ed133f4c40
-ffmpeg getFramesForward(211): md5 = ccc8aa4b659a072ef3e94005e982e197
-ffmpeg getFramesForward(212): md5 = ccc8aa4b659a072ef3e94005e982e197
-ffmpeg getFramesForward(213): md5 = ccc8aa4b659a072ef3e94005e982e197
-ffmpeg getFramesForward(214): md5 = 916130d3a9a0b5291dd80c3f905f3cfe
-ffmpeg getFramesForward(215): md5 = 916130d3a9a0b5291dd80c3f905f3cfe
-ffmpeg getFramesForward(216): md5 = 916130d3a9a0b5291dd80c3f905f3cfe
-ffmpeg getFramesForward(217): md5 = c9b92c3b3043cadf83b634aaa9967af2
-ffmpeg getFramesForward(218): md5 = c9b92c3b3043cadf83b634aaa9967af2
-ffmpeg getFramesForward(219): md5 = c9b92c3b3043cadf83b634aaa9967af2
-ffmpeg getFramesForward(220): md5 = d60ad82118cc3d82d61380e8c1c35821
-ffmpeg getFramesForward(221): md5 = d60ad82118cc3d82d61380e8c1c35821
-ffmpeg getFramesForward(222): md5 = d60ad82118cc3d82d61380e8c1c35821
-ffmpeg getFramesForward(223): md5 = bb894534f0fbb93ae13effea4ae7778c
-ffmpeg getFramesForward(224): md5 = bb894534f0fbb93ae13effea4ae7778c
-ffmpeg getFramesForward(225): md5 = bb894534f0fbb93ae13effea4ae7778c
-ffmpeg getFramesForward(226): md5 = 03fe855c91fbaabe9e260a23ca4fa6cd
-ffmpeg getFramesForward(227): md5 = 03fe855c91fbaabe9e260a23ca4fa6cd
-ffmpeg getFramesForward(228): md5 = 03fe855c91fbaabe9e260a23ca4fa6cd
-ffmpeg getFramesForward(229): md5 = 92b0f153f17e6a387535ba873c245ef2
-ffmpeg getFramesForward(230): md5 = 92b0f153f17e6a387535ba873c245ef2
-ffmpeg getFramesForward(231): md5 = 92b0f153f17e6a387535ba873c245ef2
-ffmpeg getFramesForward(232): md5 = f513c73faf87cbfe1fff854d97f8f492
-ffmpeg getFramesForward(233): md5 = f513c73faf87cbfe1fff854d97f8f492
-ffmpeg getFramesForward(234): md5 = f513c73faf87cbfe1fff854d97f8f492
-ffmpeg getFramesForward(235): md5 = 972e660b84a02fb883809c93f1ffdbf8
-ffmpeg getFramesForward(236): md5 = 972e660b84a02fb883809c93f1ffdbf8
-ffmpeg getFramesForward(237): md5 = 972e660b84a02fb883809c93f1ffdbf8
-ffmpeg getFramesForward(238): md5 = 7e80bfd9c95b8f46e4ffcc1acacd478d
-ffmpeg getFramesForward(239): md5 = 7e80bfd9c95b8f46e4ffcc1acacd478d
-ffmpeg getFramesForward(240): md5 = 7e80bfd9c95b8f46e4ffcc1acacd478d
+ffmpeg getFramesForward(1): md5 = 054ca5377a0592ea15497bcfefa59181
+ffmpeg getFramesForward(2): md5 = 054ca5377a0592ea15497bcfefa59181
+ffmpeg getFramesForward(3): md5 = 054ca5377a0592ea15497bcfefa59181
+ffmpeg getFramesForward(4): md5 = bc3e96ad73e019583d449b6d2d857858
+ffmpeg getFramesForward(5): md5 = bc3e96ad73e019583d449b6d2d857858
+ffmpeg getFramesForward(6): md5 = bc3e96ad73e019583d449b6d2d857858
+ffmpeg getFramesForward(7): md5 = 0a7a900dc376afc5598d5b2ae50be442
+ffmpeg getFramesForward(8): md5 = 0a7a900dc376afc5598d5b2ae50be442
+ffmpeg getFramesForward(9): md5 = 0a7a900dc376afc5598d5b2ae50be442
+ffmpeg getFramesForward(10): md5 = 8de055e9eb38073ab35f75cfe4adae83
+ffmpeg getFramesForward(11): md5 = 8de055e9eb38073ab35f75cfe4adae83
+ffmpeg getFramesForward(12): md5 = 8de055e9eb38073ab35f75cfe4adae83
+ffmpeg getFramesForward(13): md5 = 73327939f7fc8b6080525dc259bdd136
+ffmpeg getFramesForward(14): md5 = 73327939f7fc8b6080525dc259bdd136
+ffmpeg getFramesForward(15): md5 = 73327939f7fc8b6080525dc259bdd136
+ffmpeg getFramesForward(16): md5 = 25fce65aaebf63d787415133ee525e0b
+ffmpeg getFramesForward(17): md5 = 25fce65aaebf63d787415133ee525e0b
+ffmpeg getFramesForward(18): md5 = 25fce65aaebf63d787415133ee525e0b
+ffmpeg getFramesForward(19): md5 = dbcd63a3fe7bc6e5ae746134462a582d
+ffmpeg getFramesForward(20): md5 = dbcd63a3fe7bc6e5ae746134462a582d
+ffmpeg getFramesForward(21): md5 = dbcd63a3fe7bc6e5ae746134462a582d
+ffmpeg getFramesForward(22): md5 = 5af7473006c39343accad86b6f9cf6ed
+ffmpeg getFramesForward(23): md5 = 5af7473006c39343accad86b6f9cf6ed
+ffmpeg getFramesForward(24): md5 = 5af7473006c39343accad86b6f9cf6ed
+ffmpeg getFramesForward(25): md5 = 405cc6f1453352460cf01875aa23ccff
+ffmpeg getFramesForward(26): md5 = 405cc6f1453352460cf01875aa23ccff
+ffmpeg getFramesForward(27): md5 = 405cc6f1453352460cf01875aa23ccff
+ffmpeg getFramesForward(28): md5 = cbdbcebeea6ea45f6965a83543b6c44b
+ffmpeg getFramesForward(29): md5 = cbdbcebeea6ea45f6965a83543b6c44b
+ffmpeg getFramesForward(30): md5 = cbdbcebeea6ea45f6965a83543b6c44b
+ffmpeg getFramesForward(31): md5 = 9620a937f1a19c3d5e95716fae1eb47f
+ffmpeg getFramesForward(32): md5 = 9620a937f1a19c3d5e95716fae1eb47f
+ffmpeg getFramesForward(33): md5 = 9620a937f1a19c3d5e95716fae1eb47f
+ffmpeg getFramesForward(34): md5 = 689ad71143a347f53417356eabb0037f
+ffmpeg getFramesForward(35): md5 = 689ad71143a347f53417356eabb0037f
+ffmpeg getFramesForward(36): md5 = 689ad71143a347f53417356eabb0037f
+ffmpeg getFramesForward(37): md5 = 4f9a4e239c4b9459a59b038b0be3d5df
+ffmpeg getFramesForward(38): md5 = 4f9a4e239c4b9459a59b038b0be3d5df
+ffmpeg getFramesForward(39): md5 = 4f9a4e239c4b9459a59b038b0be3d5df
+ffmpeg getFramesForward(40): md5 = 579618d56fe46acdb9bcfcff67808ae4
+ffmpeg getFramesForward(41): md5 = 579618d56fe46acdb9bcfcff67808ae4
+ffmpeg getFramesForward(42): md5 = 579618d56fe46acdb9bcfcff67808ae4
+ffmpeg getFramesForward(43): md5 = 9f77876e4926b92d5f7dc565ac94e366
+ffmpeg getFramesForward(44): md5 = 9f77876e4926b92d5f7dc565ac94e366
+ffmpeg getFramesForward(45): md5 = 9f77876e4926b92d5f7dc565ac94e366
+ffmpeg getFramesForward(46): md5 = faa5ef30ddeb97020250c150779e3399
+ffmpeg getFramesForward(47): md5 = faa5ef30ddeb97020250c150779e3399
+ffmpeg getFramesForward(48): md5 = faa5ef30ddeb97020250c150779e3399
+ffmpeg getFramesForward(49): md5 = c61c4e4620af5adba309237a84ef91df
+ffmpeg getFramesForward(50): md5 = c61c4e4620af5adba309237a84ef91df
+ffmpeg getFramesForward(51): md5 = c61c4e4620af5adba309237a84ef91df
+ffmpeg getFramesForward(52): md5 = 3953dcbdeb9b687b2b1e925183a16c39
+ffmpeg getFramesForward(53): md5 = 3953dcbdeb9b687b2b1e925183a16c39
+ffmpeg getFramesForward(54): md5 = 3953dcbdeb9b687b2b1e925183a16c39
+ffmpeg getFramesForward(55): md5 = c360fd94742147db7e97796a61eee19f
+ffmpeg getFramesForward(56): md5 = c360fd94742147db7e97796a61eee19f
+ffmpeg getFramesForward(57): md5 = c360fd94742147db7e97796a61eee19f
+ffmpeg getFramesForward(58): md5 = 7b1f32d4e4a1efce454c0b73ec015e75
+ffmpeg getFramesForward(59): md5 = 7b1f32d4e4a1efce454c0b73ec015e75
+ffmpeg getFramesForward(60): md5 = 7b1f32d4e4a1efce454c0b73ec015e75
+ffmpeg getFramesForward(61): md5 = 963b85dafe7ac84daf64a12931509de7
+ffmpeg getFramesForward(62): md5 = 963b85dafe7ac84daf64a12931509de7
+ffmpeg getFramesForward(63): md5 = 963b85dafe7ac84daf64a12931509de7
+ffmpeg getFramesForward(64): md5 = d86b04f95208b77c06e49ba9a76b477f
+ffmpeg getFramesForward(65): md5 = d86b04f95208b77c06e49ba9a76b477f
+ffmpeg getFramesForward(66): md5 = d86b04f95208b77c06e49ba9a76b477f
+ffmpeg getFramesForward(67): md5 = cc52ca71fc8daae8feba52fa329f9f66
+ffmpeg getFramesForward(68): md5 = cc52ca71fc8daae8feba52fa329f9f66
+ffmpeg getFramesForward(69): md5 = cc52ca71fc8daae8feba52fa329f9f66
+ffmpeg getFramesForward(70): md5 = 3cac4625a645a147a7e7cb8ab28ebf07
+ffmpeg getFramesForward(71): md5 = 3cac4625a645a147a7e7cb8ab28ebf07
+ffmpeg getFramesForward(72): md5 = 3cac4625a645a147a7e7cb8ab28ebf07
+ffmpeg getFramesForward(73): md5 = f8eb6d231d353e8d98cf76f1fcf960c3
+ffmpeg getFramesForward(74): md5 = f8eb6d231d353e8d98cf76f1fcf960c3
+ffmpeg getFramesForward(75): md5 = f8eb6d231d353e8d98cf76f1fcf960c3
+ffmpeg getFramesForward(76): md5 = 25ea525ec2630b123da3bd18b44e391b
+ffmpeg getFramesForward(77): md5 = 25ea525ec2630b123da3bd18b44e391b
+ffmpeg getFramesForward(78): md5 = 25ea525ec2630b123da3bd18b44e391b
+ffmpeg getFramesForward(79): md5 = 97ea17ae200e6ca4e2412ba5546d4cdb
+ffmpeg getFramesForward(80): md5 = 97ea17ae200e6ca4e2412ba5546d4cdb
+ffmpeg getFramesForward(81): md5 = 97ea17ae200e6ca4e2412ba5546d4cdb
+ffmpeg getFramesForward(82): md5 = d0bc5176b565500f09851abf059bf736
+ffmpeg getFramesForward(83): md5 = d0bc5176b565500f09851abf059bf736
+ffmpeg getFramesForward(84): md5 = d0bc5176b565500f09851abf059bf736
+ffmpeg getFramesForward(85): md5 = a73c78e3ae667682e9920a218353540b
+ffmpeg getFramesForward(86): md5 = a73c78e3ae667682e9920a218353540b
+ffmpeg getFramesForward(87): md5 = a73c78e3ae667682e9920a218353540b
+ffmpeg getFramesForward(88): md5 = 02172b5823992d273f7d4295f628309a
+ffmpeg getFramesForward(89): md5 = 02172b5823992d273f7d4295f628309a
+ffmpeg getFramesForward(90): md5 = 02172b5823992d273f7d4295f628309a
+ffmpeg getFramesForward(91): md5 = 5887bfa75094567d9aec180eda7e45c6
+ffmpeg getFramesForward(92): md5 = 5887bfa75094567d9aec180eda7e45c6
+ffmpeg getFramesForward(93): md5 = 5887bfa75094567d9aec180eda7e45c6
+ffmpeg getFramesForward(94): md5 = 3b93b082d52c4ccb8dc5beb22c8316ab
+ffmpeg getFramesForward(95): md5 = 3b93b082d52c4ccb8dc5beb22c8316ab
+ffmpeg getFramesForward(96): md5 = 3b93b082d52c4ccb8dc5beb22c8316ab
+ffmpeg getFramesForward(97): md5 = b6485f3287312414e90fc0508ce9b194
+ffmpeg getFramesForward(98): md5 = b6485f3287312414e90fc0508ce9b194
+ffmpeg getFramesForward(99): md5 = b6485f3287312414e90fc0508ce9b194
+ffmpeg getFramesForward(100): md5 = 57fe0edffdfcf06e88d7219662f04b05
+ffmpeg getFramesForward(101): md5 = 57fe0edffdfcf06e88d7219662f04b05
+ffmpeg getFramesForward(102): md5 = 57fe0edffdfcf06e88d7219662f04b05
+ffmpeg getFramesForward(103): md5 = 5e6ab28f31801cddb176f1c01d13f364
+ffmpeg getFramesForward(104): md5 = 5e6ab28f31801cddb176f1c01d13f364
+ffmpeg getFramesForward(105): md5 = 5e6ab28f31801cddb176f1c01d13f364
+ffmpeg getFramesForward(106): md5 = ab2142ee9ec11e01e42a072ad5762030
+ffmpeg getFramesForward(107): md5 = ab2142ee9ec11e01e42a072ad5762030
+ffmpeg getFramesForward(108): md5 = ab2142ee9ec11e01e42a072ad5762030
+ffmpeg getFramesForward(109): md5 = 84410c79c7cf32562a83fa8f4bb981f7
+ffmpeg getFramesForward(110): md5 = 84410c79c7cf32562a83fa8f4bb981f7
+ffmpeg getFramesForward(111): md5 = 84410c79c7cf32562a83fa8f4bb981f7
+ffmpeg getFramesForward(112): md5 = 5ea25236d676122a90799adefc529611
+ffmpeg getFramesForward(113): md5 = 5ea25236d676122a90799adefc529611
+ffmpeg getFramesForward(114): md5 = 5ea25236d676122a90799adefc529611
+ffmpeg getFramesForward(115): md5 = 0ac65e51db3d7b40f55df3a43f3f03d2
+ffmpeg getFramesForward(116): md5 = 0ac65e51db3d7b40f55df3a43f3f03d2
+ffmpeg getFramesForward(117): md5 = 0ac65e51db3d7b40f55df3a43f3f03d2
+ffmpeg getFramesForward(118): md5 = b0b6a709c28c75d9beffaaaba969ec12
+ffmpeg getFramesForward(119): md5 = b0b6a709c28c75d9beffaaaba969ec12
+ffmpeg getFramesForward(120): md5 = b0b6a709c28c75d9beffaaaba969ec12
+ffmpeg getFramesForward(121): md5 = 7c58a3bc631a7ec1dd48de99658a5cc4
+ffmpeg getFramesForward(122): md5 = 7c58a3bc631a7ec1dd48de99658a5cc4
+ffmpeg getFramesForward(123): md5 = 7c58a3bc631a7ec1dd48de99658a5cc4
+ffmpeg getFramesForward(124): md5 = a89b9a83054bf8737a97c080f07a59bd
+ffmpeg getFramesForward(125): md5 = a89b9a83054bf8737a97c080f07a59bd
+ffmpeg getFramesForward(126): md5 = a89b9a83054bf8737a97c080f07a59bd
+ffmpeg getFramesForward(127): md5 = 5d58afe8118077391b8523a065dd7fce
+ffmpeg getFramesForward(128): md5 = 5d58afe8118077391b8523a065dd7fce
+ffmpeg getFramesForward(129): md5 = 5d58afe8118077391b8523a065dd7fce
+ffmpeg getFramesForward(130): md5 = d7a36b7a67f4ca8941931a15517f5eb1
+ffmpeg getFramesForward(131): md5 = d7a36b7a67f4ca8941931a15517f5eb1
+ffmpeg getFramesForward(132): md5 = d7a36b7a67f4ca8941931a15517f5eb1
+ffmpeg getFramesForward(133): md5 = 3064adc7a54286b4c45f9fe3669e8b1d
+ffmpeg getFramesForward(134): md5 = 3064adc7a54286b4c45f9fe3669e8b1d
+ffmpeg getFramesForward(135): md5 = 3064adc7a54286b4c45f9fe3669e8b1d
+ffmpeg getFramesForward(136): md5 = 49feb765089580d9f3de8a6e36cbaed7
+ffmpeg getFramesForward(137): md5 = 49feb765089580d9f3de8a6e36cbaed7
+ffmpeg getFramesForward(138): md5 = 49feb765089580d9f3de8a6e36cbaed7
+ffmpeg getFramesForward(139): md5 = 3f4495bb347480746f2fb994465b25a9
+ffmpeg getFramesForward(140): md5 = 3f4495bb347480746f2fb994465b25a9
+ffmpeg getFramesForward(141): md5 = 3f4495bb347480746f2fb994465b25a9
+ffmpeg getFramesForward(142): md5 = 53343b23bb1a4aeb1f667608265fad9a
+ffmpeg getFramesForward(143): md5 = 53343b23bb1a4aeb1f667608265fad9a
+ffmpeg getFramesForward(144): md5 = 53343b23bb1a4aeb1f667608265fad9a
+ffmpeg getFramesForward(145): md5 = b84c2d59f936f7cae83e736dc2dd0ebc
+ffmpeg getFramesForward(146): md5 = b84c2d59f936f7cae83e736dc2dd0ebc
+ffmpeg getFramesForward(147): md5 = b84c2d59f936f7cae83e736dc2dd0ebc
+ffmpeg getFramesForward(148): md5 = abe4ae47b43678b60c192fbb4d0a69b5
+ffmpeg getFramesForward(149): md5 = abe4ae47b43678b60c192fbb4d0a69b5
+ffmpeg getFramesForward(150): md5 = abe4ae47b43678b60c192fbb4d0a69b5
+ffmpeg getFramesForward(151): md5 = 117c46c3a208183085c41eccf223c7e6
+ffmpeg getFramesForward(152): md5 = 117c46c3a208183085c41eccf223c7e6
+ffmpeg getFramesForward(153): md5 = 117c46c3a208183085c41eccf223c7e6
+ffmpeg getFramesForward(154): md5 = d587fae1b39f3a2ffae867f9652e1ed7
+ffmpeg getFramesForward(155): md5 = d587fae1b39f3a2ffae867f9652e1ed7
+ffmpeg getFramesForward(156): md5 = d587fae1b39f3a2ffae867f9652e1ed7
+ffmpeg getFramesForward(157): md5 = db17bcfe68abe673bf3df8b8062714ab
+ffmpeg getFramesForward(158): md5 = db17bcfe68abe673bf3df8b8062714ab
+ffmpeg getFramesForward(159): md5 = db17bcfe68abe673bf3df8b8062714ab
+ffmpeg getFramesForward(160): md5 = 316351119812a64ff994bbad9332286e
+ffmpeg getFramesForward(161): md5 = 316351119812a64ff994bbad9332286e
+ffmpeg getFramesForward(162): md5 = 316351119812a64ff994bbad9332286e
+ffmpeg getFramesForward(163): md5 = f4af5e8779fa40f07b0285a4dc1b049d
+ffmpeg getFramesForward(164): md5 = f4af5e8779fa40f07b0285a4dc1b049d
+ffmpeg getFramesForward(165): md5 = f4af5e8779fa40f07b0285a4dc1b049d
+ffmpeg getFramesForward(166): md5 = 274f9691f9d2360d53f299c1fba79614
+ffmpeg getFramesForward(167): md5 = 274f9691f9d2360d53f299c1fba79614
+ffmpeg getFramesForward(168): md5 = 274f9691f9d2360d53f299c1fba79614
+ffmpeg getFramesForward(169): md5 = 4973cb1e537815ee8b7ef73e759f5c39
+ffmpeg getFramesForward(170): md5 = 4973cb1e537815ee8b7ef73e759f5c39
+ffmpeg getFramesForward(171): md5 = 4973cb1e537815ee8b7ef73e759f5c39
+ffmpeg getFramesForward(172): md5 = 8629707f6d5c1a205564ac5f6f10d89f
+ffmpeg getFramesForward(173): md5 = 8629707f6d5c1a205564ac5f6f10d89f
+ffmpeg getFramesForward(174): md5 = 8629707f6d5c1a205564ac5f6f10d89f
+ffmpeg getFramesForward(175): md5 = f72576077cd616c026c7f56829f220ae
+ffmpeg getFramesForward(176): md5 = f72576077cd616c026c7f56829f220ae
+ffmpeg getFramesForward(177): md5 = f72576077cd616c026c7f56829f220ae
+ffmpeg getFramesForward(178): md5 = 017aaef2fe10b6aa2788d7ea0620c252
+ffmpeg getFramesForward(179): md5 = 017aaef2fe10b6aa2788d7ea0620c252
+ffmpeg getFramesForward(180): md5 = 017aaef2fe10b6aa2788d7ea0620c252
+ffmpeg getFramesForward(181): md5 = a5b5bfe8b20e018ef506d703b2af7ccc
+ffmpeg getFramesForward(182): md5 = a5b5bfe8b20e018ef506d703b2af7ccc
+ffmpeg getFramesForward(183): md5 = a5b5bfe8b20e018ef506d703b2af7ccc
+ffmpeg getFramesForward(184): md5 = cc781178ac22f4cf6641183926067215
+ffmpeg getFramesForward(185): md5 = cc781178ac22f4cf6641183926067215
+ffmpeg getFramesForward(186): md5 = cc781178ac22f4cf6641183926067215
+ffmpeg getFramesForward(187): md5 = b0338a88dff4cbabb1599a807e5c6ef0
+ffmpeg getFramesForward(188): md5 = b0338a88dff4cbabb1599a807e5c6ef0
+ffmpeg getFramesForward(189): md5 = b0338a88dff4cbabb1599a807e5c6ef0
+ffmpeg getFramesForward(190): md5 = d1ee4ba4a11217efd0cf8cba15a2eb1f
+ffmpeg getFramesForward(191): md5 = d1ee4ba4a11217efd0cf8cba15a2eb1f
+ffmpeg getFramesForward(192): md5 = d1ee4ba4a11217efd0cf8cba15a2eb1f
+ffmpeg getFramesForward(193): md5 = 0d2849f432fc9656c31629f6288feba0
+ffmpeg getFramesForward(194): md5 = 0d2849f432fc9656c31629f6288feba0
+ffmpeg getFramesForward(195): md5 = 0d2849f432fc9656c31629f6288feba0
+ffmpeg getFramesForward(196): md5 = c26f6d4cf0737c5c6b102c048312f0fc
+ffmpeg getFramesForward(197): md5 = c26f6d4cf0737c5c6b102c048312f0fc
+ffmpeg getFramesForward(198): md5 = c26f6d4cf0737c5c6b102c048312f0fc
+ffmpeg getFramesForward(199): md5 = 23d6d68503ec607327ee6216bc695593
+ffmpeg getFramesForward(200): md5 = 23d6d68503ec607327ee6216bc695593
+ffmpeg getFramesForward(201): md5 = 23d6d68503ec607327ee6216bc695593
+ffmpeg getFramesForward(202): md5 = 85c3d4dbcd9315b00e220d334a012083
+ffmpeg getFramesForward(203): md5 = 85c3d4dbcd9315b00e220d334a012083
+ffmpeg getFramesForward(204): md5 = 85c3d4dbcd9315b00e220d334a012083
+ffmpeg getFramesForward(205): md5 = 08d8b9d438667d710cacc0d9081a4883
+ffmpeg getFramesForward(206): md5 = 08d8b9d438667d710cacc0d9081a4883
+ffmpeg getFramesForward(207): md5 = 08d8b9d438667d710cacc0d9081a4883
+ffmpeg getFramesForward(208): md5 = d3ce913a9c16206990a6b9a80c0561f3
+ffmpeg getFramesForward(209): md5 = d3ce913a9c16206990a6b9a80c0561f3
+ffmpeg getFramesForward(210): md5 = d3ce913a9c16206990a6b9a80c0561f3
+ffmpeg getFramesForward(211): md5 = 64bcd46af5519ad65722bc94e71a5628
+ffmpeg getFramesForward(212): md5 = 64bcd46af5519ad65722bc94e71a5628
+ffmpeg getFramesForward(213): md5 = 64bcd46af5519ad65722bc94e71a5628
+ffmpeg getFramesForward(214): md5 = 55a1b21fb233ec1b965aa27fc5680ef7
+ffmpeg getFramesForward(215): md5 = 55a1b21fb233ec1b965aa27fc5680ef7
+ffmpeg getFramesForward(216): md5 = 55a1b21fb233ec1b965aa27fc5680ef7
+ffmpeg getFramesForward(217): md5 = cbf35af572f3947b04b391dbe8f01912
+ffmpeg getFramesForward(218): md5 = cbf35af572f3947b04b391dbe8f01912
+ffmpeg getFramesForward(219): md5 = cbf35af572f3947b04b391dbe8f01912
+ffmpeg getFramesForward(220): md5 = b68f724605514e4ae7676c04fff62461
+ffmpeg getFramesForward(221): md5 = b68f724605514e4ae7676c04fff62461
+ffmpeg getFramesForward(222): md5 = b68f724605514e4ae7676c04fff62461
+ffmpeg getFramesForward(223): md5 = e2d66cb30e1d942da4b603ecae95c64e
+ffmpeg getFramesForward(224): md5 = e2d66cb30e1d942da4b603ecae95c64e
+ffmpeg getFramesForward(225): md5 = e2d66cb30e1d942da4b603ecae95c64e
+ffmpeg getFramesForward(226): md5 = 70c86d74b825b685d3e90c2dfa21f307
+ffmpeg getFramesForward(227): md5 = 70c86d74b825b685d3e90c2dfa21f307
+ffmpeg getFramesForward(228): md5 = 70c86d74b825b685d3e90c2dfa21f307
+ffmpeg getFramesForward(229): md5 = 52e93862544f05c92375d2aaa2c7dc16
+ffmpeg getFramesForward(230): md5 = 52e93862544f05c92375d2aaa2c7dc16
+ffmpeg getFramesForward(231): md5 = 52e93862544f05c92375d2aaa2c7dc16
+ffmpeg getFramesForward(232): md5 = da9910064c0414e256056b769f942049
+ffmpeg getFramesForward(233): md5 = da9910064c0414e256056b769f942049
+ffmpeg getFramesForward(234): md5 = da9910064c0414e256056b769f942049
+ffmpeg getFramesForward(235): md5 = 2817e435640fc7c26685401007ad6177
+ffmpeg getFramesForward(236): md5 = 2817e435640fc7c26685401007ad6177
+ffmpeg getFramesForward(237): md5 = 2817e435640fc7c26685401007ad6177
+ffmpeg getFramesForward(238): md5 = 5da7388e5b099cfb030b36cefcb260aa
+ffmpeg getFramesForward(239): md5 = 5da7388e5b099cfb030b36cefcb260aa
+ffmpeg getFramesForward(240): md5 = 5da7388e5b099cfb030b36cefcb260aa
Index: tests/getNextKeyFrame.phpt
===================================================================
--- a/tests/getNextKeyFrame.phpt	(.../branches/ffmpeg-php/ffmpeg-php-0.6.0)
+++ b/tests/getNextKeyFrame.phpt	(.../trunk/ffmpeg-php)
@@ -22,245 +22,245 @@
 }
 ?>
 --EXPECT--
-ffmpeg getFrame(1): md5 = abdf9f281de68cef4b77a5a7a899b60a
-ffmpeg getFrame(2): md5 = abdf9f281de68cef4b77a5a7a899b60a
-ffmpeg getFrame(3): md5 = abdf9f281de68cef4b77a5a7a899b60a
-ffmpeg getFrame(4): md5 = 9770f3afe55297ea35c9f06a0e4334ea
-ffmpeg getFrame(5): md5 = 9770f3afe55297ea35c9f06a0e4334ea
-ffmpeg getFrame(6): md5 = 9770f3afe55297ea35c9f06a0e4334ea
-ffmpeg getFrame(7): md5 = 157cf8c54851ee90bda8b2398b077c28
-ffmpeg getFrame(8): md5 = 157cf8c54851ee90bda8b2398b077c28
-ffmpeg getFrame(9): md5 = 157cf8c54851ee90bda8b2398b077c28
-ffmpeg getFrame(10): md5 = 966a1fb1d649d8fdc6552ce6fa0e735f
-ffmpeg getFrame(11): md5 = 966a1fb1d649d8fdc6552ce6fa0e735f
-ffmpeg getFrame(12): md5 = 966a1fb1d649d8fdc6552ce6fa0e735f
-ffmpeg getFrame(13): md5 = 5415f831017e32afa73e5ceb32344f4d
-ffmpeg getFrame(14): md5 = 5415f831017e32afa73e5ceb32344f4d
-ffmpeg getFrame(15): md5 = 5415f831017e32afa73e5ceb32344f4d
-ffmpeg getFrame(16): md5 = 337873cd3a4b8529dae4da4aac38874c
-ffmpeg getFrame(17): md5 = 337873cd3a4b8529dae4da4aac38874c
-ffmpeg getFrame(18): md5 = 337873cd3a4b8529dae4da4aac38874c
-ffmpeg getFrame(19): md5 = 3411d97fd52b27b7105a4cf91a7b181e
-ffmpeg getFrame(20): md5 = 3411d97fd52b27b7105a4cf91a7b181e
-ffmpeg getFrame(21): md5 = 3411d97fd52b27b7105a4cf91a7b181e
-ffmpeg getFrame(22): md5 = 74c553e7c88fd2479610cd2093d75717
-ffmpeg getFrame(23): md5 = 74c553e7c88fd2479610cd2093d75717
-ffmpeg getFrame(24): md5 = 74c553e7c88fd2479610cd2093d75717
-ffmpeg getFrame(25): md5 = c9ec47e51edb4a58c1c76a2202d7147f
-ffmpeg getFrame(26): md5 = c9ec47e51edb4a58c1c76a2202d7147f
-ffmpeg getFrame(27): md5 = c9ec47e51edb4a58c1c76a2202d7147f
-ffmpeg getFrame(28): md5 = 0f54b4e8a9e3cbbc6c5e1729f4793b2f
-ffmpeg getFrame(29): md5 = 0f54b4e8a9e3cbbc6c5e1729f4793b2f
-ffmpeg getFrame(30): md5 = 0f54b4e8a9e3cbbc6c5e1729f4793b2f
-ffmpeg getFrame(31): md5 = 30f0dff87230a9f3b1ebdc08b40aa0a7
-ffmpeg getFrame(32): md5 = 30f0dff87230a9f3b1ebdc08b40aa0a7
-ffmpeg getFrame(33): md5 = 30f0dff87230a9f3b1ebdc08b40aa0a7
-ffmpeg getFrame(34): md5 = f614e07399921150044dfdaf880afa17
-ffmpeg getFrame(35): md5 = f614e07399921150044dfdaf880afa17
-ffmpeg getFrame(36): md5 = f614e07399921150044dfdaf880afa17
-ffmpeg getFrame(37): md5 = ae68f48c14a76e4dc2f9c7f2183c7787
-ffmpeg getFrame(38): md5 = ae68f48c14a76e4dc2f9c7f2183c7787
-ffmpeg getFrame(39): md5 = ae68f48c14a76e4dc2f9c7f2183c7787
-ffmpeg getFrame(40): md5 = b8ae52b0bd25ff1ccddfffd61c2aee5a
-ffmpeg getFrame(41): md5 = b8ae52b0bd25ff1ccddfffd61c2aee5a
-ffmpeg getFrame(42): md5 = b8ae52b0bd25ff1ccddfffd61c2aee5a
-ffmpeg getFrame(43): md5 = 1560e32dc970140780155a3b9b8a5458
-ffmpeg getFrame(44): md5 = 1560e32dc970140780155a3b9b8a5458
-ffmpeg getFrame(45): md5 = 1560e32dc970140780155a3b9b8a5458
-ffmpeg getFrame(46): md5 = 9d6241b89b0320d045c81564ae392df1
-ffmpeg getFrame(47): md5 = 9d6241b89b0320d045c81564ae392df1
-ffmpeg getFrame(48): md5 = 9d6241b89b0320d045c81564ae392df1
-ffmpeg getFrame(49): md5 = ac35fe74cc8150970d6b8d6b6615ee7d
-ffmpeg getFrame(50): md5 = ac35fe74cc8150970d6b8d6b6615ee7d
-ffmpeg getFrame(51): md5 = ac35fe74cc8150970d6b8d6b6615ee7d
-ffmpeg getFrame(52): md5 = e256491e34893b935d9a3839536d2587
-ffmpeg getFrame(53): md5 = e256491e34893b935d9a3839536d2587
-ffmpeg getFrame(54): md5 = e256491e34893b935d9a3839536d2587
-ffmpeg getFrame(55): md5 = 1c72b33fd6f829b293a83acd9dd6ba3e
-ffmpeg getFrame(56): md5 = 1c72b33fd6f829b293a83acd9dd6ba3e
-ffmpeg getFrame(57): md5 = 1c72b33fd6f829b293a83acd9dd6ba3e
-ffmpeg getFrame(58): md5 = 954c1013975c1fc29ab8bbaf9208069a
-ffmpeg getFrame(59): md5 = 954c1013975c1fc29ab8bbaf9208069a
-ffmpeg getFrame(60): md5 = 954c1013975c1fc29ab8bbaf9208069a
-ffmpeg getFrame(61): md5 = 86d1330ec92bb2c672db8cfacef7c128
-ffmpeg getFrame(62): md5 = 86d1330ec92bb2c672db8cfacef7c128
-ffmpeg getFrame(63): md5 = 86d1330ec92bb2c672db8cfacef7c128
-ffmpeg getFrame(64): md5 = 3b8248dcafbc02ecab8f5a3065e61f03
-ffmpeg getFrame(65): md5 = 3b8248dcafbc02ecab8f5a3065e61f03
-ffmpeg getFrame(66): md5 = 3b8248dcafbc02ecab8f5a3065e61f03
-ffmpeg getFrame(67): md5 = db77eae1c1395ba1c794ae1281d68868
-ffmpeg getFrame(68): md5 = db77eae1c1395ba1c794ae1281d68868
-ffmpeg getFrame(69): md5 = db77eae1c1395ba1c794ae1281d68868
-ffmpeg getFrame(70): md5 = afe384b15e07ea544fa7a1cdada288c0
-ffmpeg getFrame(71): md5 = afe384b15e07ea544fa7a1cdada288c0
-ffmpeg getFrame(72): md5 = afe384b15e07ea544fa7a1cdada288c0
-ffmpeg getFrame(73): md5 = 8c9cbc1183504e1d1fee262e83775e01
-ffmpeg getFrame(74): md5 = 8c9cbc1183504e1d1fee262e83775e01
-ffmpeg getFrame(75): md5 = 8c9cbc1183504e1d1fee262e83775e01
-ffmpeg getFrame(76): md5 = d502f1afe81ec69de3222d3b56b3d516
-ffmpeg getFrame(77): md5 = d502f1afe81ec69de3222d3b56b3d516
-ffmpeg getFrame(78): md5 = d502f1afe81ec69de3222d3b56b3d516
-ffmpeg getFrame(79): md5 = 8004f62b065a0d55150220972821be96
-ffmpeg getFrame(80): md5 = 8004f62b065a0d55150220972821be96
-ffmpeg getFrame(81): md5 = 8004f62b065a0d55150220972821be96
-ffmpeg getFrame(82): md5 = 92ecabfab41f2715a05f3847e2484b60
-ffmpeg getFrame(83): md5 = 92ecabfab41f2715a05f3847e2484b60
-ffmpeg getFrame(84): md5 = 92ecabfab41f2715a05f3847e2484b60
-ffmpeg getFrame(85): md5 = ceafeaf93812d8f5fd48f6fa242d5e36
-ffmpeg getFrame(86): md5 = ceafeaf93812d8f5fd48f6fa242d5e36
-ffmpeg getFrame(87): md5 = ceafeaf93812d8f5fd48f6fa242d5e36
-ffmpeg getFrame(88): md5 = 41b5423e725b29fdacc5ee40faa4776c
-ffmpeg getFrame(89): md5 = 41b5423e725b29fdacc5ee40faa4776c
-ffmpeg getFrame(90): md5 = 41b5423e725b29fdacc5ee40faa4776c
-ffmpeg getFrame(91): md5 = afa2f0bab3ba2b34806b2a52aea98bce
-ffmpeg getFrame(92): md5 = afa2f0bab3ba2b34806b2a52aea98bce
-ffmpeg getFrame(93): md5 = afa2f0bab3ba2b34806b2a52aea98bce
-ffmpeg getFrame(94): md5 = c8ed36df36fb8cea156212a5d5952d33
-ffmpeg getFrame(95): md5 = c8ed36df36fb8cea156212a5d5952d33
-ffmpeg getFrame(96): md5 = c8ed36df36fb8cea156212a5d5952d33
-ffmpeg getFrame(97): md5 = c97ea8a480b98c52f8b726b811f9714d
-ffmpeg getFrame(98): md5 = c97ea8a480b98c52f8b726b811f9714d
-ffmpeg getFrame(99): md5 = c97ea8a480b98c52f8b726b811f9714d
-ffmpeg getFrame(100): md5 = a98e967bbda4b6dcaa19fd52d9fdef12
-ffmpeg getFrame(101): md5 = a98e967bbda4b6dcaa19fd52d9fdef12
-ffmpeg getFrame(102): md5 = a98e967bbda4b6dcaa19fd52d9fdef12
-ffmpeg getFrame(103): md5 = 395b50b5c8615cdb4b905aa0b3b2e669
-ffmpeg getFrame(104): md5 = 395b50b5c8615cdb4b905aa0b3b2e669
-ffmpeg getFrame(105): md5 = 395b50b5c8615cdb4b905aa0b3b2e669
-ffmpeg getFrame(106): md5 = 86f50526473282524be5c092f77950a5
-ffmpeg getFrame(107): md5 = 86f50526473282524be5c092f77950a5
-ffmpeg getFrame(108): md5 = 86f50526473282524be5c092f77950a5
-ffmpeg getFrame(109): md5 = 9e5e0b70bfc1c90f2c5092428bc384ee
-ffmpeg getFrame(110): md5 = 9e5e0b70bfc1c90f2c5092428bc384ee
-ffmpeg getFrame(111): md5 = 9e5e0b70bfc1c90f2c5092428bc384ee
-ffmpeg getFrame(112): md5 = 5f9109436658f422ec1841247acf835e
-ffmpeg getFrame(113): md5 = 5f9109436658f422ec1841247acf835e
-ffmpeg getFrame(114): md5 = 5f9109436658f422ec1841247acf835e
-ffmpeg getFrame(115): md5 = 80e13931ccc6ace3a5a7ae256e048a61
-ffmpeg getFrame(116): md5 = 80e13931ccc6ace3a5a7ae256e048a61
-ffmpeg getFrame(117): md5 = 80e13931ccc6ace3a5a7ae256e048a61
-ffmpeg getFrame(118): md5 = 21f287b5f3334a7aaed0aeeb55230621
-ffmpeg getFrame(119): md5 = 21f287b5f3334a7aaed0aeeb55230621
-ffmpeg getFrame(120): md5 = 21f287b5f3334a7aaed0aeeb55230621
-ffmpeg getFrame(121): md5 = 22caa03aaa35e0aed2f0a3d4a3375b24
-ffmpeg getFrame(122): md5 = 22caa03aaa35e0aed2f0a3d4a3375b24
-ffmpeg getFrame(123): md5 = 22caa03aaa35e0aed2f0a3d4a3375b24
-ffmpeg getFrame(124): md5 = 36cbf250ecf8c5a5538bd0a5f2eb9333
-ffmpeg getFrame(125): md5 = 36cbf250ecf8c5a5538bd0a5f2eb9333
-ffmpeg getFrame(126): md5 = 36cbf250ecf8c5a5538bd0a5f2eb9333
-ffmpeg getFrame(127): md5 = ffdc385768b0b1fcbb9908c9c9bffe21
-ffmpeg getFrame(128): md5 = ffdc385768b0b1fcbb9908c9c9bffe21
-ffmpeg getFrame(129): md5 = ffdc385768b0b1fcbb9908c9c9bffe21
-ffmpeg getFrame(130): md5 = 3ead3c1a402a7e26ee248cd8f9c96647
-ffmpeg getFrame(131): md5 = 3ead3c1a402a7e26ee248cd8f9c96647
-ffmpeg getFrame(132): md5 = 3ead3c1a402a7e26ee248cd8f9c96647
-ffmpeg getFrame(133): md5 = 3445a37f0effaef1a9c4e788f5ce54e5
-ffmpeg getFrame(134): md5 = 3445a37f0effaef1a9c4e788f5ce54e5
-ffmpeg getFrame(135): md5 = 3445a37f0effaef1a9c4e788f5ce54e5
-ffmpeg getFrame(136): md5 = 948fd5fd379679006c2ca2ba3bc52048
-ffmpeg getFrame(137): md5 = 948fd5fd379679006c2ca2ba3bc52048
-ffmpeg getFrame(138): md5 = 948fd5fd379679006c2ca2ba3bc52048
-ffmpeg getFrame(139): md5 = 814b8a64a6a08093b3a81063bffffed4
-ffmpeg getFrame(140): md5 = 814b8a64a6a08093b3a81063bffffed4
-ffmpeg getFrame(141): md5 = 814b8a64a6a08093b3a81063bffffed4
-ffmpeg getFrame(142): md5 = 51a73cbaf315c9faf8263627455fd5d5
-ffmpeg getFrame(143): md5 = 51a73cbaf315c9faf8263627455fd5d5
-ffmpeg getFrame(144): md5 = 51a73cbaf315c9faf8263627455fd5d5
-ffmpeg getFrame(145): md5 = 31038504cc4c1e664de89c257b1fa1b0
-ffmpeg getFrame(146): md5 = 31038504cc4c1e664de89c257b1fa1b0
-ffmpeg getFrame(147): md5 = 31038504cc4c1e664de89c257b1fa1b0
-ffmpeg getFrame(148): md5 = c76afdadc9099d8bd173f0e08807ee3d
-ffmpeg getFrame(149): md5 = c76afdadc9099d8bd173f0e08807ee3d
-ffmpeg getFrame(150): md5 = c76afdadc9099d8bd173f0e08807ee3d
-ffmpeg getFrame(151): md5 = cd42cff504053e23c5db378119a40b3f
-ffmpeg getFrame(152): md5 = cd42cff504053e23c5db378119a40b3f
-ffmpeg getFrame(153): md5 = cd42cff504053e23c5db378119a40b3f
-ffmpeg getFrame(154): md5 = 7862bd022cc4e9c3976b2f4758e5cd30
-ffmpeg getFrame(155): md5 = 7862bd022cc4e9c3976b2f4758e5cd30
-ffmpeg getFrame(156): md5 = 7862bd022cc4e9c3976b2f4758e5cd30
-ffmpeg getFrame(157): md5 = 7dee4d143138fce530917488cc337c8c
-ffmpeg getFrame(158): md5 = 7dee4d143138fce530917488cc337c8c
-ffmpeg getFrame(159): md5 = 7dee4d143138fce530917488cc337c8c
-ffmpeg getFrame(160): md5 = 254d01500e3ec7f6ae402747761c0a95
-ffmpeg getFrame(161): md5 = 254d01500e3ec7f6ae402747761c0a95
-ffmpeg getFrame(162): md5 = 254d01500e3ec7f6ae402747761c0a95
-ffmpeg getFrame(163): md5 = fe0cdb9314d1628af56e6c3662deb24f
-ffmpeg getFrame(164): md5 = fe0cdb9314d1628af56e6c3662deb24f
-ffmpeg getFrame(165): md5 = fe0cdb9314d1628af56e6c3662deb24f
-ffmpeg getFrame(166): md5 = c790f8cc0f715ca0ec31845c9ef7397a
-ffmpeg getFrame(167): md5 = c790f8cc0f715ca0ec31845c9ef7397a
-ffmpeg getFrame(168): md5 = c790f8cc0f715ca0ec31845c9ef7397a
-ffmpeg getFrame(169): md5 = bab883284018046ddfa2e638785615aa
-ffmpeg getFrame(170): md5 = bab883284018046ddfa2e638785615aa
-ffmpeg getFrame(171): md5 = bab883284018046ddfa2e638785615aa
-ffmpeg getFrame(172): md5 = a469093f43c0fdd6016ee5ef932b7ca4
-ffmpeg getFrame(173): md5 = a469093f43c0fdd6016ee5ef932b7ca4
-ffmpeg getFrame(174): md5 = a469093f43c0fdd6016ee5ef932b7ca4
-ffmpeg getFrame(175): md5 = 50d636deb9cdca5c88842653d3e62463
-ffmpeg getFrame(176): md5 = 50d636deb9cdca5c88842653d3e62463
-ffmpeg getFrame(177): md5 = 50d636deb9cdca5c88842653d3e62463
-ffmpeg getFrame(178): md5 = 7def27ec8a2136e344b24b12337f3a0c
-ffmpeg getFrame(179): md5 = 7def27ec8a2136e344b24b12337f3a0c
-ffmpeg getFrame(180): md5 = 7def27ec8a2136e344b24b12337f3a0c
-ffmpeg getFrame(181): md5 = 93bdda9b26422cf7791154d54667812e
-ffmpeg getFrame(182): md5 = 93bdda9b26422cf7791154d54667812e
-ffmpeg getFrame(183): md5 = 93bdda9b26422cf7791154d54667812e
-ffmpeg getFrame(184): md5 = 965909c3829a19aa301ff7dc98f1ca90
-ffmpeg getFrame(185): md5 = 965909c3829a19aa301ff7dc98f1ca90
-ffmpeg getFrame(186): md5 = 965909c3829a19aa301ff7dc98f1ca90
-ffmpeg getFrame(187): md5 = a53b0c4d2c023f1019b3190b35216c60
-ffmpeg getFrame(188): md5 = a53b0c4d2c023f1019b3190b35216c60
-ffmpeg getFrame(189): md5 = a53b0c4d2c023f1019b3190b35216c60
-ffmpeg getFrame(190): md5 = b900f912fbe898801a4c8356638dcf54
-ffmpeg getFrame(191): md5 = b900f912fbe898801a4c8356638dcf54
-ffmpeg getFrame(192): md5 = b900f912fbe898801a4c8356638dcf54
-ffmpeg getFrame(193): md5 = 5221475c9ea8970258feb9dab1392049
-ffmpeg getFrame(194): md5 = 5221475c9ea8970258feb9dab1392049
-ffmpeg getFrame(195): md5 = 5221475c9ea8970258feb9dab1392049
-ffmpeg getFrame(196): md5 = 6851e0793856841f31acc6a5f704650c
-ffmpeg getFrame(197): md5 = 6851e0793856841f31acc6a5f704650c
-ffmpeg getFrame(198): md5 = 6851e0793856841f31acc6a5f704650c
-ffmpeg getFrame(199): md5 = 35335bb3cbc1cb75aff8416a26df8f39
-ffmpeg getFrame(200): md5 = 35335bb3cbc1cb75aff8416a26df8f39
-ffmpeg getFrame(201): md5 = 35335bb3cbc1cb75aff8416a26df8f39
-ffmpeg getFrame(202): md5 = c9584d3d2c2480fb480953e9bc317cb0
-ffmpeg getFrame(203): md5 = c9584d3d2c2480fb480953e9bc317cb0
-ffmpeg getFrame(204): md5 = c9584d3d2c2480fb480953e9bc317cb0
-ffmpeg getFrame(205): md5 = 3081db2af3ff5bc76f938f9b80ec72bb
-ffmpeg getFrame(206): md5 = 3081db2af3ff5bc76f938f9b80ec72bb
-ffmpeg getFrame(207): md5 = 3081db2af3ff5bc76f938f9b80ec72bb
-ffmpeg getFrame(208): md5 = 10230400f9cdb8a4785082ed133f4c40
-ffmpeg getFrame(209): md5 = 10230400f9cdb8a4785082ed133f4c40
-ffmpeg getFrame(210): md5 = 10230400f9cdb8a4785082ed133f4c40
-ffmpeg getFrame(211): md5 = ccc8aa4b659a072ef3e94005e982e197
-ffmpeg getFrame(212): md5 = ccc8aa4b659a072ef3e94005e982e197
-ffmpeg getFrame(213): md5 = ccc8aa4b659a072ef3e94005e982e197
-ffmpeg getFrame(214): md5 = 916130d3a9a0b5291dd80c3f905f3cfe
-ffmpeg getFrame(215): md5 = 916130d3a9a0b5291dd80c3f905f3cfe
-ffmpeg getFrame(216): md5 = 916130d3a9a0b5291dd80c3f905f3cfe
-ffmpeg getFrame(217): md5 = c9b92c3b3043cadf83b634aaa9967af2
-ffmpeg getFrame(218): md5 = c9b92c3b3043cadf83b634aaa9967af2
-ffmpeg getFrame(219): md5 = c9b92c3b3043cadf83b634aaa9967af2
-ffmpeg getFrame(220): md5 = d60ad82118cc3d82d61380e8c1c35821
-ffmpeg getFrame(221): md5 = d60ad82118cc3d82d61380e8c1c35821
-ffmpeg getFrame(222): md5 = d60ad82118cc3d82d61380e8c1c35821
-ffmpeg getFrame(223): md5 = bb894534f0fbb93ae13effea4ae7778c
-ffmpeg getFrame(224): md5 = bb894534f0fbb93ae13effea4ae7778c
-ffmpeg getFrame(225): md5 = bb894534f0fbb93ae13effea4ae7778c
-ffmpeg getFrame(226): md5 = 03fe855c91fbaabe9e260a23ca4fa6cd
-ffmpeg getFrame(227): md5 = 03fe855c91fbaabe9e260a23ca4fa6cd
-ffmpeg getFrame(228): md5 = 03fe855c91fbaabe9e260a23ca4fa6cd
-ffmpeg getFrame(229): md5 = 92b0f153f17e6a387535ba873c245ef2
-ffmpeg getFrame(230): md5 = 92b0f153f17e6a387535ba873c245ef2
-ffmpeg getFrame(231): md5 = 92b0f153f17e6a387535ba873c245ef2
-ffmpeg getFrame(232): md5 = f513c73faf87cbfe1fff854d97f8f492
-ffmpeg getFrame(233): md5 = f513c73faf87cbfe1fff854d97f8f492
-ffmpeg getFrame(234): md5 = f513c73faf87cbfe1fff854d97f8f492
-ffmpeg getFrame(235): md5 = 972e660b84a02fb883809c93f1ffdbf8
-ffmpeg getFrame(236): md5 = 972e660b84a02fb883809c93f1ffdbf8
-ffmpeg getFrame(237): md5 = 972e660b84a02fb883809c93f1ffdbf8
-ffmpeg getFrame(238): md5 = 7e80bfd9c95b8f46e4ffcc1acacd478d
-ffmpeg getFrame(239): md5 = 7e80bfd9c95b8f46e4ffcc1acacd478d
-ffmpeg getFrame(240): md5 = 7e80bfd9c95b8f46e4ffcc1acacd478d
-ffmpeg getFrame(241): md5 = c3fca01d3ba84b05c18574615858e613
-ffmpeg getFrame(242): md5 = c3fca01d3ba84b05c18574615858e613
+ffmpeg getFrame(1): md5 = 054ca5377a0592ea15497bcfefa59181
+ffmpeg getFrame(2): md5 = 054ca5377a0592ea15497bcfefa59181
+ffmpeg getFrame(3): md5 = 054ca5377a0592ea15497bcfefa59181
+ffmpeg getFrame(4): md5 = bc3e96ad73e019583d449b6d2d857858
+ffmpeg getFrame(5): md5 = bc3e96ad73e019583d449b6d2d857858
+ffmpeg getFrame(6): md5 = bc3e96ad73e019583d449b6d2d857858
+ffmpeg getFrame(7): md5 = 0a7a900dc376afc5598d5b2ae50be442
+ffmpeg getFrame(8): md5 = 0a7a900dc376afc5598d5b2ae50be442
+ffmpeg getFrame(9): md5 = 0a7a900dc376afc5598d5b2ae50be442
+ffmpeg getFrame(10): md5 = 8de055e9eb38073ab35f75cfe4adae83
+ffmpeg getFrame(11): md5 = 8de055e9eb38073ab35f75cfe4adae83
+ffmpeg getFrame(12): md5 = 8de055e9eb38073ab35f75cfe4adae83
+ffmpeg getFrame(13): md5 = 73327939f7fc8b6080525dc259bdd136
+ffmpeg getFrame(14): md5 = 73327939f7fc8b6080525dc259bdd136
+ffmpeg getFrame(15): md5 = 73327939f7fc8b6080525dc259bdd136
+ffmpeg getFrame(16): md5 = 25fce65aaebf63d787415133ee525e0b
+ffmpeg getFrame(17): md5 = 25fce65aaebf63d787415133ee525e0b
+ffmpeg getFrame(18): md5 = 25fce65aaebf63d787415133ee525e0b
+ffmpeg getFrame(19): md5 = dbcd63a3fe7bc6e5ae746134462a582d
+ffmpeg getFrame(20): md5 = dbcd63a3fe7bc6e5ae746134462a582d
+ffmpeg getFrame(21): md5 = dbcd63a3fe7bc6e5ae746134462a582d
+ffmpeg getFrame(22): md5 = 5af7473006c39343accad86b6f9cf6ed
+ffmpeg getFrame(23): md5 = 5af7473006c39343accad86b6f9cf6ed
+ffmpeg getFrame(24): md5 = 5af7473006c39343accad86b6f9cf6ed
+ffmpeg getFrame(25): md5 = 405cc6f1453352460cf01875aa23ccff
+ffmpeg getFrame(26): md5 = 405cc6f1453352460cf01875aa23ccff
+ffmpeg getFrame(27): md5 = 405cc6f1453352460cf01875aa23ccff
+ffmpeg getFrame(28): md5 = cbdbcebeea6ea45f6965a83543b6c44b
+ffmpeg getFrame(29): md5 = cbdbcebeea6ea45f6965a83543b6c44b
+ffmpeg getFrame(30): md5 = cbdbcebeea6ea45f6965a83543b6c44b
+ffmpeg getFrame(31): md5 = 9620a937f1a19c3d5e95716fae1eb47f
+ffmpeg getFrame(32): md5 = 9620a937f1a19c3d5e95716fae1eb47f
+ffmpeg getFrame(33): md5 = 9620a937f1a19c3d5e95716fae1eb47f
+ffmpeg getFrame(34): md5 = 689ad71143a347f53417356eabb0037f
+ffmpeg getFrame(35): md5 = 689ad71143a347f53417356eabb0037f
+ffmpeg getFrame(36): md5 = 689ad71143a347f53417356eabb0037f
+ffmpeg getFrame(37): md5 = 4f9a4e239c4b9459a59b038b0be3d5df
+ffmpeg getFrame(38): md5 = 4f9a4e239c4b9459a59b038b0be3d5df
+ffmpeg getFrame(39): md5 = 4f9a4e239c4b9459a59b038b0be3d5df
+ffmpeg getFrame(40): md5 = 579618d56fe46acdb9bcfcff67808ae4
+ffmpeg getFrame(41): md5 = 579618d56fe46acdb9bcfcff67808ae4
+ffmpeg getFrame(42): md5 = 579618d56fe46acdb9bcfcff67808ae4
+ffmpeg getFrame(43): md5 = 9f77876e4926b92d5f7dc565ac94e366
+ffmpeg getFrame(44): md5 = 9f77876e4926b92d5f7dc565ac94e366
+ffmpeg getFrame(45): md5 = 9f77876e4926b92d5f7dc565ac94e366
+ffmpeg getFrame(46): md5 = faa5ef30ddeb97020250c150779e3399
+ffmpeg getFrame(47): md5 = faa5ef30ddeb97020250c150779e3399
+ffmpeg getFrame(48): md5 = faa5ef30ddeb97020250c150779e3399
+ffmpeg getFrame(49): md5 = c61c4e4620af5adba309237a84ef91df
+ffmpeg getFrame(50): md5 = c61c4e4620af5adba309237a84ef91df
+ffmpeg getFrame(51): md5 = c61c4e4620af5adba309237a84ef91df
+ffmpeg getFrame(52): md5 = 3953dcbdeb9b687b2b1e925183a16c39
+ffmpeg getFrame(53): md5 = 3953dcbdeb9b687b2b1e925183a16c39
+ffmpeg getFrame(54): md5 = 3953dcbdeb9b687b2b1e925183a16c39
+ffmpeg getFrame(55): md5 = c360fd94742147db7e97796a61eee19f
+ffmpeg getFrame(56): md5 = c360fd94742147db7e97796a61eee19f
+ffmpeg getFrame(57): md5 = c360fd94742147db7e97796a61eee19f
+ffmpeg getFrame(58): md5 = 7b1f32d4e4a1efce454c0b73ec015e75
+ffmpeg getFrame(59): md5 = 7b1f32d4e4a1efce454c0b73ec015e75
+ffmpeg getFrame(60): md5 = 7b1f32d4e4a1efce454c0b73ec015e75
+ffmpeg getFrame(61): md5 = 963b85dafe7ac84daf64a12931509de7
+ffmpeg getFrame(62): md5 = 963b85dafe7ac84daf64a12931509de7
+ffmpeg getFrame(63): md5 = 963b85dafe7ac84daf64a12931509de7
+ffmpeg getFrame(64): md5 = d86b04f95208b77c06e49ba9a76b477f
+ffmpeg getFrame(65): md5 = d86b04f95208b77c06e49ba9a76b477f
+ffmpeg getFrame(66): md5 = d86b04f95208b77c06e49ba9a76b477f
+ffmpeg getFrame(67): md5 = cc52ca71fc8daae8feba52fa329f9f66
+ffmpeg getFrame(68): md5 = cc52ca71fc8daae8feba52fa329f9f66
+ffmpeg getFrame(69): md5 = cc52ca71fc8daae8feba52fa329f9f66
+ffmpeg getFrame(70): md5 = 3cac4625a645a147a7e7cb8ab28ebf07
+ffmpeg getFrame(71): md5 = 3cac4625a645a147a7e7cb8ab28ebf07
+ffmpeg getFrame(72): md5 = 3cac4625a645a147a7e7cb8ab28ebf07
+ffmpeg getFrame(73): md5 = f8eb6d231d353e8d98cf76f1fcf960c3
+ffmpeg getFrame(74): md5 = f8eb6d231d353e8d98cf76f1fcf960c3
+ffmpeg getFrame(75): md5 = f8eb6d231d353e8d98cf76f1fcf960c3
+ffmpeg getFrame(76): md5 = 25ea525ec2630b123da3bd18b44e391b
+ffmpeg getFrame(77): md5 = 25ea525ec2630b123da3bd18b44e391b
+ffmpeg getFrame(78): md5 = 25ea525ec2630b123da3bd18b44e391b
+ffmpeg getFrame(79): md5 = 97ea17ae200e6ca4e2412ba5546d4cdb
+ffmpeg getFrame(80): md5 = 97ea17ae200e6ca4e2412ba5546d4cdb
+ffmpeg getFrame(81): md5 = 97ea17ae200e6ca4e2412ba5546d4cdb
+ffmpeg getFrame(82): md5 = d0bc5176b565500f09851abf059bf736
+ffmpeg getFrame(83): md5 = d0bc5176b565500f09851abf059bf736
+ffmpeg getFrame(84): md5 = d0bc5176b565500f09851abf059bf736
+ffmpeg getFrame(85): md5 = a73c78e3ae667682e9920a218353540b
+ffmpeg getFrame(86): md5 = a73c78e3ae667682e9920a218353540b
+ffmpeg getFrame(87): md5 = a73c78e3ae667682e9920a218353540b
+ffmpeg getFrame(88): md5 = 02172b5823992d273f7d4295f628309a
+ffmpeg getFrame(89): md5 = 02172b5823992d273f7d4295f628309a
+ffmpeg getFrame(90): md5 = 02172b5823992d273f7d4295f628309a
+ffmpeg getFrame(91): md5 = 5887bfa75094567d9aec180eda7e45c6
+ffmpeg getFrame(92): md5 = 5887bfa75094567d9aec180eda7e45c6
+ffmpeg getFrame(93): md5 = 5887bfa75094567d9aec180eda7e45c6
+ffmpeg getFrame(94): md5 = 3b93b082d52c4ccb8dc5beb22c8316ab
+ffmpeg getFrame(95): md5 = 3b93b082d52c4ccb8dc5beb22c8316ab
+ffmpeg getFrame(96): md5 = 3b93b082d52c4ccb8dc5beb22c8316ab
+ffmpeg getFrame(97): md5 = b6485f3287312414e90fc0508ce9b194
+ffmpeg getFrame(98): md5 = b6485f3287312414e90fc0508ce9b194
+ffmpeg getFrame(99): md5 = b6485f3287312414e90fc0508ce9b194
+ffmpeg getFrame(100): md5 = 57fe0edffdfcf06e88d7219662f04b05
+ffmpeg getFrame(101): md5 = 57fe0edffdfcf06e88d7219662f04b05
+ffmpeg getFrame(102): md5 = 57fe0edffdfcf06e88d7219662f04b05
+ffmpeg getFrame(103): md5 = 5e6ab28f31801cddb176f1c01d13f364
+ffmpeg getFrame(104): md5 = 5e6ab28f31801cddb176f1c01d13f364
+ffmpeg getFrame(105): md5 = 5e6ab28f31801cddb176f1c01d13f364
+ffmpeg getFrame(106): md5 = ab2142ee9ec11e01e42a072ad5762030
+ffmpeg getFrame(107): md5 = ab2142ee9ec11e01e42a072ad5762030
+ffmpeg getFrame(108): md5 = ab2142ee9ec11e01e42a072ad5762030
+ffmpeg getFrame(109): md5 = 84410c79c7cf32562a83fa8f4bb981f7
+ffmpeg getFrame(110): md5 = 84410c79c7cf32562a83fa8f4bb981f7
+ffmpeg getFrame(111): md5 = 84410c79c7cf32562a83fa8f4bb981f7
+ffmpeg getFrame(112): md5 = 5ea25236d676122a90799adefc529611
+ffmpeg getFrame(113): md5 = 5ea25236d676122a90799adefc529611
+ffmpeg getFrame(114): md5 = 5ea25236d676122a90799adefc529611
+ffmpeg getFrame(115): md5 = 0ac65e51db3d7b40f55df3a43f3f03d2
+ffmpeg getFrame(116): md5 = 0ac65e51db3d7b40f55df3a43f3f03d2
+ffmpeg getFrame(117): md5 = 0ac65e51db3d7b40f55df3a43f3f03d2
+ffmpeg getFrame(118): md5 = b0b6a709c28c75d9beffaaaba969ec12
+ffmpeg getFrame(119): md5 = b0b6a709c28c75d9beffaaaba969ec12
+ffmpeg getFrame(120): md5 = b0b6a709c28c75d9beffaaaba969ec12
+ffmpeg getFrame(121): md5 = 7c58a3bc631a7ec1dd48de99658a5cc4
+ffmpeg getFrame(122): md5 = 7c58a3bc631a7ec1dd48de99658a5cc4
+ffmpeg getFrame(123): md5 = 7c58a3bc631a7ec1dd48de99658a5cc4
+ffmpeg getFrame(124): md5 = a89b9a83054bf8737a97c080f07a59bd
+ffmpeg getFrame(125): md5 = a89b9a83054bf8737a97c080f07a59bd
+ffmpeg getFrame(126): md5 = a89b9a83054bf8737a97c080f07a59bd
+ffmpeg getFrame(127): md5 = 5d58afe8118077391b8523a065dd7fce
+ffmpeg getFrame(128): md5 = 5d58afe8118077391b8523a065dd7fce
+ffmpeg getFrame(129): md5 = 5d58afe8118077391b8523a065dd7fce
+ffmpeg getFrame(130): md5 = d7a36b7a67f4ca8941931a15517f5eb1
+ffmpeg getFrame(131): md5 = d7a36b7a67f4ca8941931a15517f5eb1
+ffmpeg getFrame(132): md5 = d7a36b7a67f4ca8941931a15517f5eb1
+ffmpeg getFrame(133): md5 = 3064adc7a54286b4c45f9fe3669e8b1d
+ffmpeg getFrame(134): md5 = 3064adc7a54286b4c45f9fe3669e8b1d
+ffmpeg getFrame(135): md5 = 3064adc7a54286b4c45f9fe3669e8b1d
+ffmpeg getFrame(136): md5 = 49feb765089580d9f3de8a6e36cbaed7
+ffmpeg getFrame(137): md5 = 49feb765089580d9f3de8a6e36cbaed7
+ffmpeg getFrame(138): md5 = 49feb765089580d9f3de8a6e36cbaed7
+ffmpeg getFrame(139): md5 = 3f4495bb347480746f2fb994465b25a9
+ffmpeg getFrame(140): md5 = 3f4495bb347480746f2fb994465b25a9
+ffmpeg getFrame(141): md5 = 3f4495bb347480746f2fb994465b25a9
+ffmpeg getFrame(142): md5 = 53343b23bb1a4aeb1f667608265fad9a
+ffmpeg getFrame(143): md5 = 53343b23bb1a4aeb1f667608265fad9a
+ffmpeg getFrame(144): md5 = 53343b23bb1a4aeb1f667608265fad9a
+ffmpeg getFrame(145): md5 = b84c2d59f936f7cae83e736dc2dd0ebc
+ffmpeg getFrame(146): md5 = b84c2d59f936f7cae83e736dc2dd0ebc
+ffmpeg getFrame(147): md5 = b84c2d59f936f7cae83e736dc2dd0ebc
+ffmpeg getFrame(148): md5 = abe4ae47b43678b60c192fbb4d0a69b5
+ffmpeg getFrame(149): md5 = abe4ae47b43678b60c192fbb4d0a69b5
+ffmpeg getFrame(150): md5 = abe4ae47b43678b60c192fbb4d0a69b5
+ffmpeg getFrame(151): md5 = 117c46c3a208183085c41eccf223c7e6
+ffmpeg getFrame(152): md5 = 117c46c3a208183085c41eccf223c7e6
+ffmpeg getFrame(153): md5 = 117c46c3a208183085c41eccf223c7e6
+ffmpeg getFrame(154): md5 = d587fae1b39f3a2ffae867f9652e1ed7
+ffmpeg getFrame(155): md5 = d587fae1b39f3a2ffae867f9652e1ed7
+ffmpeg getFrame(156): md5 = d587fae1b39f3a2ffae867f9652e1ed7
+ffmpeg getFrame(157): md5 = db17bcfe68abe673bf3df8b8062714ab
+ffmpeg getFrame(158): md5 = db17bcfe68abe673bf3df8b8062714ab
+ffmpeg getFrame(159): md5 = db17bcfe68abe673bf3df8b8062714ab
+ffmpeg getFrame(160): md5 = 316351119812a64ff994bbad9332286e
+ffmpeg getFrame(161): md5 = 316351119812a64ff994bbad9332286e
+ffmpeg getFrame(162): md5 = 316351119812a64ff994bbad9332286e
+ffmpeg getFrame(163): md5 = f4af5e8779fa40f07b0285a4dc1b049d
+ffmpeg getFrame(164): md5 = f4af5e8779fa40f07b0285a4dc1b049d
+ffmpeg getFrame(165): md5 = f4af5e8779fa40f07b0285a4dc1b049d
+ffmpeg getFrame(166): md5 = 274f9691f9d2360d53f299c1fba79614
+ffmpeg getFrame(167): md5 = 274f9691f9d2360d53f299c1fba79614
+ffmpeg getFrame(168): md5 = 274f9691f9d2360d53f299c1fba79614
+ffmpeg getFrame(169): md5 = 4973cb1e537815ee8b7ef73e759f5c39
+ffmpeg getFrame(170): md5 = 4973cb1e537815ee8b7ef73e759f5c39
+ffmpeg getFrame(171): md5 = 4973cb1e537815ee8b7ef73e759f5c39
+ffmpeg getFrame(172): md5 = 8629707f6d5c1a205564ac5f6f10d89f
+ffmpeg getFrame(173): md5 = 8629707f6d5c1a205564ac5f6f10d89f
+ffmpeg getFrame(174): md5 = 8629707f6d5c1a205564ac5f6f10d89f
+ffmpeg getFrame(175): md5 = f72576077cd616c026c7f56829f220ae
+ffmpeg getFrame(176): md5 = f72576077cd616c026c7f56829f220ae
+ffmpeg getFrame(177): md5 = f72576077cd616c026c7f56829f220ae
+ffmpeg getFrame(178): md5 = 017aaef2fe10b6aa2788d7ea0620c252
+ffmpeg getFrame(179): md5 = 017aaef2fe10b6aa2788d7ea0620c252
+ffmpeg getFrame(180): md5 = 017aaef2fe10b6aa2788d7ea0620c252
+ffmpeg getFrame(181): md5 = a5b5bfe8b20e018ef506d703b2af7ccc
+ffmpeg getFrame(182): md5 = a5b5bfe8b20e018ef506d703b2af7ccc
+ffmpeg getFrame(183): md5 = a5b5bfe8b20e018ef506d703b2af7ccc
+ffmpeg getFrame(184): md5 = cc781178ac22f4cf6641183926067215
+ffmpeg getFrame(185): md5 = cc781178ac22f4cf6641183926067215
+ffmpeg getFrame(186): md5 = cc781178ac22f4cf6641183926067215
+ffmpeg getFrame(187): md5 = b0338a88dff4cbabb1599a807e5c6ef0
+ffmpeg getFrame(188): md5 = b0338a88dff4cbabb1599a807e5c6ef0
+ffmpeg getFrame(189): md5 = b0338a88dff4cbabb1599a807e5c6ef0
+ffmpeg getFrame(190): md5 = d1ee4ba4a11217efd0cf8cba15a2eb1f
+ffmpeg getFrame(191): md5 = d1ee4ba4a11217efd0cf8cba15a2eb1f
+ffmpeg getFrame(192): md5 = d1ee4ba4a11217efd0cf8cba15a2eb1f
+ffmpeg getFrame(193): md5 = 0d2849f432fc9656c31629f6288feba0
+ffmpeg getFrame(194): md5 = 0d2849f432fc9656c31629f6288feba0
+ffmpeg getFrame(195): md5 = 0d2849f432fc9656c31629f6288feba0
+ffmpeg getFrame(196): md5 = c26f6d4cf0737c5c6b102c048312f0fc
+ffmpeg getFrame(197): md5 = c26f6d4cf0737c5c6b102c048312f0fc
+ffmpeg getFrame(198): md5 = c26f6d4cf0737c5c6b102c048312f0fc
+ffmpeg getFrame(199): md5 = 23d6d68503ec607327ee6216bc695593
+ffmpeg getFrame(200): md5 = 23d6d68503ec607327ee6216bc695593
+ffmpeg getFrame(201): md5 = 23d6d68503ec607327ee6216bc695593
+ffmpeg getFrame(202): md5 = 85c3d4dbcd9315b00e220d334a012083
+ffmpeg getFrame(203): md5 = 85c3d4dbcd9315b00e220d334a012083
+ffmpeg getFrame(204): md5 = 85c3d4dbcd9315b00e220d334a012083
+ffmpeg getFrame(205): md5 = 08d8b9d438667d710cacc0d9081a4883
+ffmpeg getFrame(206): md5 = 08d8b9d438667d710cacc0d9081a4883
+ffmpeg getFrame(207): md5 = 08d8b9d438667d710cacc0d9081a4883
+ffmpeg getFrame(208): md5 = d3ce913a9c16206990a6b9a80c0561f3
+ffmpeg getFrame(209): md5 = d3ce913a9c16206990a6b9a80c0561f3
+ffmpeg getFrame(210): md5 = d3ce913a9c16206990a6b9a80c0561f3
+ffmpeg getFrame(211): md5 = 64bcd46af5519ad65722bc94e71a5628
+ffmpeg getFrame(212): md5 = 64bcd46af5519ad65722bc94e71a5628
+ffmpeg getFrame(213): md5 = 64bcd46af5519ad65722bc94e71a5628
+ffmpeg getFrame(214): md5 = 55a1b21fb233ec1b965aa27fc5680ef7
+ffmpeg getFrame(215): md5 = 55a1b21fb233ec1b965aa27fc5680ef7
+ffmpeg getFrame(216): md5 = 55a1b21fb233ec1b965aa27fc5680ef7
+ffmpeg getFrame(217): md5 = cbf35af572f3947b04b391dbe8f01912
+ffmpeg getFrame(218): md5 = cbf35af572f3947b04b391dbe8f01912
+ffmpeg getFrame(219): md5 = cbf35af572f3947b04b391dbe8f01912
+ffmpeg getFrame(220): md5 = b68f724605514e4ae7676c04fff62461
+ffmpeg getFrame(221): md5 = b68f724605514e4ae7676c04fff62461
+ffmpeg getFrame(222): md5 = b68f724605514e4ae7676c04fff62461
+ffmpeg getFrame(223): md5 = e2d66cb30e1d942da4b603ecae95c64e
+ffmpeg getFrame(224): md5 = e2d66cb30e1d942da4b603ecae95c64e
+ffmpeg getFrame(225): md5 = e2d66cb30e1d942da4b603ecae95c64e
+ffmpeg getFrame(226): md5 = 70c86d74b825b685d3e90c2dfa21f307
+ffmpeg getFrame(227): md5 = 70c86d74b825b685d3e90c2dfa21f307
+ffmpeg getFrame(228): md5 = 70c86d74b825b685d3e90c2dfa21f307
+ffmpeg getFrame(229): md5 = 52e93862544f05c92375d2aaa2c7dc16
+ffmpeg getFrame(230): md5 = 52e93862544f05c92375d2aaa2c7dc16
+ffmpeg getFrame(231): md5 = 52e93862544f05c92375d2aaa2c7dc16
+ffmpeg getFrame(232): md5 = da9910064c0414e256056b769f942049
+ffmpeg getFrame(233): md5 = da9910064c0414e256056b769f942049
+ffmpeg getFrame(234): md5 = da9910064c0414e256056b769f942049
+ffmpeg getFrame(235): md5 = 2817e435640fc7c26685401007ad6177
+ffmpeg getFrame(236): md5 = 2817e435640fc7c26685401007ad6177
+ffmpeg getFrame(237): md5 = 2817e435640fc7c26685401007ad6177
+ffmpeg getFrame(238): md5 = 5da7388e5b099cfb030b36cefcb260aa
+ffmpeg getFrame(239): md5 = 5da7388e5b099cfb030b36cefcb260aa
+ffmpeg getFrame(240): md5 = 5da7388e5b099cfb030b36cefcb260aa
+ffmpeg getFrame(241): md5 = e3a3ea606c5ccdc530c7c6b2a2a5aa71
+ffmpeg getFrame(242): md5 = e3a3ea606c5ccdc530c7c6b2a2a5aa71
Index: tests/getFramesNoArg.phpt
===================================================================
--- a/tests/getFramesNoArg.phpt	(.../branches/ffmpeg-php/ffmpeg-php-0.6.0)
+++ b/tests/getFramesNoArg.phpt	(.../trunk/ffmpeg-php)
@@ -23,245 +23,245 @@
 }
 ?>
 --EXPECT--
-ffmpeg getFrame(1): md5 = abdf9f281de68cef4b77a5a7a899b60a
-ffmpeg getFrame(2): md5 = abdf9f281de68cef4b77a5a7a899b60a
-ffmpeg getFrame(3): md5 = abdf9f281de68cef4b77a5a7a899b60a
-ffmpeg getFrame(4): md5 = 9770f3afe55297ea35c9f06a0e4334ea
-ffmpeg getFrame(5): md5 = 9770f3afe55297ea35c9f06a0e4334ea
-ffmpeg getFrame(6): md5 = 9770f3afe55297ea35c9f06a0e4334ea
-ffmpeg getFrame(7): md5 = 157cf8c54851ee90bda8b2398b077c28
-ffmpeg getFrame(8): md5 = 157cf8c54851ee90bda8b2398b077c28
-ffmpeg getFrame(9): md5 = 157cf8c54851ee90bda8b2398b077c28
-ffmpeg getFrame(10): md5 = 966a1fb1d649d8fdc6552ce6fa0e735f
-ffmpeg getFrame(11): md5 = 966a1fb1d649d8fdc6552ce6fa0e735f
-ffmpeg getFrame(12): md5 = 966a1fb1d649d8fdc6552ce6fa0e735f
-ffmpeg getFrame(13): md5 = 5415f831017e32afa73e5ceb32344f4d
-ffmpeg getFrame(14): md5 = 5415f831017e32afa73e5ceb32344f4d
-ffmpeg getFrame(15): md5 = 5415f831017e32afa73e5ceb32344f4d
-ffmpeg getFrame(16): md5 = 337873cd3a4b8529dae4da4aac38874c
-ffmpeg getFrame(17): md5 = 337873cd3a4b8529dae4da4aac38874c
-ffmpeg getFrame(18): md5 = 337873cd3a4b8529dae4da4aac38874c
-ffmpeg getFrame(19): md5 = 3411d97fd52b27b7105a4cf91a7b181e
-ffmpeg getFrame(20): md5 = 3411d97fd52b27b7105a4cf91a7b181e
-ffmpeg getFrame(21): md5 = 3411d97fd52b27b7105a4cf91a7b181e
-ffmpeg getFrame(22): md5 = 74c553e7c88fd2479610cd2093d75717
-ffmpeg getFrame(23): md5 = 74c553e7c88fd2479610cd2093d75717
-ffmpeg getFrame(24): md5 = 74c553e7c88fd2479610cd2093d75717
-ffmpeg getFrame(25): md5 = c9ec47e51edb4a58c1c76a2202d7147f
-ffmpeg getFrame(26): md5 = c9ec47e51edb4a58c1c76a2202d7147f
-ffmpeg getFrame(27): md5 = c9ec47e51edb4a58c1c76a2202d7147f
-ffmpeg getFrame(28): md5 = 0f54b4e8a9e3cbbc6c5e1729f4793b2f
-ffmpeg getFrame(29): md5 = 0f54b4e8a9e3cbbc6c5e1729f4793b2f
-ffmpeg getFrame(30): md5 = 0f54b4e8a9e3cbbc6c5e1729f4793b2f
-ffmpeg getFrame(31): md5 = 30f0dff87230a9f3b1ebdc08b40aa0a7
-ffmpeg getFrame(32): md5 = 30f0dff87230a9f3b1ebdc08b40aa0a7
-ffmpeg getFrame(33): md5 = 30f0dff87230a9f3b1ebdc08b40aa0a7
-ffmpeg getFrame(34): md5 = f614e07399921150044dfdaf880afa17
-ffmpeg getFrame(35): md5 = f614e07399921150044dfdaf880afa17
-ffmpeg getFrame(36): md5 = f614e07399921150044dfdaf880afa17
-ffmpeg getFrame(37): md5 = ae68f48c14a76e4dc2f9c7f2183c7787
-ffmpeg getFrame(38): md5 = ae68f48c14a76e4dc2f9c7f2183c7787
-ffmpeg getFrame(39): md5 = ae68f48c14a76e4dc2f9c7f2183c7787
-ffmpeg getFrame(40): md5 = b8ae52b0bd25ff1ccddfffd61c2aee5a
-ffmpeg getFrame(41): md5 = b8ae52b0bd25ff1ccddfffd61c2aee5a
-ffmpeg getFrame(42): md5 = b8ae52b0bd25ff1ccddfffd61c2aee5a
-ffmpeg getFrame(43): md5 = 1560e32dc970140780155a3b9b8a5458
-ffmpeg getFrame(44): md5 = 1560e32dc970140780155a3b9b8a5458
-ffmpeg getFrame(45): md5 = 1560e32dc970140780155a3b9b8a5458
-ffmpeg getFrame(46): md5 = 9d6241b89b0320d045c81564ae392df1
-ffmpeg getFrame(47): md5 = 9d6241b89b0320d045c81564ae392df1
-ffmpeg getFrame(48): md5 = 9d6241b89b0320d045c81564ae392df1
-ffmpeg getFrame(49): md5 = ac35fe74cc8150970d6b8d6b6615ee7d
-ffmpeg getFrame(50): md5 = ac35fe74cc8150970d6b8d6b6615ee7d
-ffmpeg getFrame(51): md5 = ac35fe74cc8150970d6b8d6b6615ee7d
-ffmpeg getFrame(52): md5 = e256491e34893b935d9a3839536d2587
-ffmpeg getFrame(53): md5 = e256491e34893b935d9a3839536d2587
-ffmpeg getFrame(54): md5 = e256491e34893b935d9a3839536d2587
-ffmpeg getFrame(55): md5 = 1c72b33fd6f829b293a83acd9dd6ba3e
-ffmpeg getFrame(56): md5 = 1c72b33fd6f829b293a83acd9dd6ba3e
-ffmpeg getFrame(57): md5 = 1c72b33fd6f829b293a83acd9dd6ba3e
-ffmpeg getFrame(58): md5 = 954c1013975c1fc29ab8bbaf9208069a
-ffmpeg getFrame(59): md5 = 954c1013975c1fc29ab8bbaf9208069a
-ffmpeg getFrame(60): md5 = 954c1013975c1fc29ab8bbaf9208069a
-ffmpeg getFrame(61): md5 = 86d1330ec92bb2c672db8cfacef7c128
-ffmpeg getFrame(62): md5 = 86d1330ec92bb2c672db8cfacef7c128
-ffmpeg getFrame(63): md5 = 86d1330ec92bb2c672db8cfacef7c128
-ffmpeg getFrame(64): md5 = 3b8248dcafbc02ecab8f5a3065e61f03
-ffmpeg getFrame(65): md5 = 3b8248dcafbc02ecab8f5a3065e61f03
-ffmpeg getFrame(66): md5 = 3b8248dcafbc02ecab8f5a3065e61f03
-ffmpeg getFrame(67): md5 = db77eae1c1395ba1c794ae1281d68868
-ffmpeg getFrame(68): md5 = db77eae1c1395ba1c794ae1281d68868
-ffmpeg getFrame(69): md5 = db77eae1c1395ba1c794ae1281d68868
-ffmpeg getFrame(70): md5 = afe384b15e07ea544fa7a1cdada288c0
-ffmpeg getFrame(71): md5 = afe384b15e07ea544fa7a1cdada288c0
-ffmpeg getFrame(72): md5 = afe384b15e07ea544fa7a1cdada288c0
-ffmpeg getFrame(73): md5 = 8c9cbc1183504e1d1fee262e83775e01
-ffmpeg getFrame(74): md5 = 8c9cbc1183504e1d1fee262e83775e01
-ffmpeg getFrame(75): md5 = 8c9cbc1183504e1d1fee262e83775e01
-ffmpeg getFrame(76): md5 = d502f1afe81ec69de3222d3b56b3d516
-ffmpeg getFrame(77): md5 = d502f1afe81ec69de3222d3b56b3d516
-ffmpeg getFrame(78): md5 = d502f1afe81ec69de3222d3b56b3d516
-ffmpeg getFrame(79): md5 = 8004f62b065a0d55150220972821be96
-ffmpeg getFrame(80): md5 = 8004f62b065a0d55150220972821be96
-ffmpeg getFrame(81): md5 = 8004f62b065a0d55150220972821be96
-ffmpeg getFrame(82): md5 = 92ecabfab41f2715a05f3847e2484b60
-ffmpeg getFrame(83): md5 = 92ecabfab41f2715a05f3847e2484b60
-ffmpeg getFrame(84): md5 = 92ecabfab41f2715a05f3847e2484b60
-ffmpeg getFrame(85): md5 = ceafeaf93812d8f5fd48f6fa242d5e36
-ffmpeg getFrame(86): md5 = ceafeaf93812d8f5fd48f6fa242d5e36
-ffmpeg getFrame(87): md5 = ceafeaf93812d8f5fd48f6fa242d5e36
-ffmpeg getFrame(88): md5 = 41b5423e725b29fdacc5ee40faa4776c
-ffmpeg getFrame(89): md5 = 41b5423e725b29fdacc5ee40faa4776c
-ffmpeg getFrame(90): md5 = 41b5423e725b29fdacc5ee40faa4776c
-ffmpeg getFrame(91): md5 = afa2f0bab3ba2b34806b2a52aea98bce
-ffmpeg getFrame(92): md5 = afa2f0bab3ba2b34806b2a52aea98bce
-ffmpeg getFrame(93): md5 = afa2f0bab3ba2b34806b2a52aea98bce
-ffmpeg getFrame(94): md5 = c8ed36df36fb8cea156212a5d5952d33
-ffmpeg getFrame(95): md5 = c8ed36df36fb8cea156212a5d5952d33
-ffmpeg getFrame(96): md5 = c8ed36df36fb8cea156212a5d5952d33
-ffmpeg getFrame(97): md5 = c97ea8a480b98c52f8b726b811f9714d
-ffmpeg getFrame(98): md5 = c97ea8a480b98c52f8b726b811f9714d
-ffmpeg getFrame(99): md5 = c97ea8a480b98c52f8b726b811f9714d
-ffmpeg getFrame(100): md5 = a98e967bbda4b6dcaa19fd52d9fdef12
-ffmpeg getFrame(101): md5 = a98e967bbda4b6dcaa19fd52d9fdef12
-ffmpeg getFrame(102): md5 = a98e967bbda4b6dcaa19fd52d9fdef12
-ffmpeg getFrame(103): md5 = 395b50b5c8615cdb4b905aa0b3b2e669
-ffmpeg getFrame(104): md5 = 395b50b5c8615cdb4b905aa0b3b2e669
-ffmpeg getFrame(105): md5 = 395b50b5c8615cdb4b905aa0b3b2e669
-ffmpeg getFrame(106): md5 = 86f50526473282524be5c092f77950a5
-ffmpeg getFrame(107): md5 = 86f50526473282524be5c092f77950a5
-ffmpeg getFrame(108): md5 = 86f50526473282524be5c092f77950a5
-ffmpeg getFrame(109): md5 = 9e5e0b70bfc1c90f2c5092428bc384ee
-ffmpeg getFrame(110): md5 = 9e5e0b70bfc1c90f2c5092428bc384ee
-ffmpeg getFrame(111): md5 = 9e5e0b70bfc1c90f2c5092428bc384ee
-ffmpeg getFrame(112): md5 = 5f9109436658f422ec1841247acf835e
-ffmpeg getFrame(113): md5 = 5f9109436658f422ec1841247acf835e
-ffmpeg getFrame(114): md5 = 5f9109436658f422ec1841247acf835e
-ffmpeg getFrame(115): md5 = 80e13931ccc6ace3a5a7ae256e048a61
-ffmpeg getFrame(116): md5 = 80e13931ccc6ace3a5a7ae256e048a61
-ffmpeg getFrame(117): md5 = 80e13931ccc6ace3a5a7ae256e048a61
-ffmpeg getFrame(118): md5 = 21f287b5f3334a7aaed0aeeb55230621
-ffmpeg getFrame(119): md5 = 21f287b5f3334a7aaed0aeeb55230621
-ffmpeg getFrame(120): md5 = 21f287b5f3334a7aaed0aeeb55230621
-ffmpeg getFrame(121): md5 = 22caa03aaa35e0aed2f0a3d4a3375b24
-ffmpeg getFrame(122): md5 = 22caa03aaa35e0aed2f0a3d4a3375b24
-ffmpeg getFrame(123): md5 = 22caa03aaa35e0aed2f0a3d4a3375b24
-ffmpeg getFrame(124): md5 = 36cbf250ecf8c5a5538bd0a5f2eb9333
-ffmpeg getFrame(125): md5 = 36cbf250ecf8c5a5538bd0a5f2eb9333
-ffmpeg getFrame(126): md5 = 36cbf250ecf8c5a5538bd0a5f2eb9333
-ffmpeg getFrame(127): md5 = ffdc385768b0b1fcbb9908c9c9bffe21
-ffmpeg getFrame(128): md5 = ffdc385768b0b1fcbb9908c9c9bffe21
-ffmpeg getFrame(129): md5 = ffdc385768b0b1fcbb9908c9c9bffe21
-ffmpeg getFrame(130): md5 = 3ead3c1a402a7e26ee248cd8f9c96647
-ffmpeg getFrame(131): md5 = 3ead3c1a402a7e26ee248cd8f9c96647
-ffmpeg getFrame(132): md5 = 3ead3c1a402a7e26ee248cd8f9c96647
-ffmpeg getFrame(133): md5 = 3445a37f0effaef1a9c4e788f5ce54e5
-ffmpeg getFrame(134): md5 = 3445a37f0effaef1a9c4e788f5ce54e5
-ffmpeg getFrame(135): md5 = 3445a37f0effaef1a9c4e788f5ce54e5
-ffmpeg getFrame(136): md5 = 948fd5fd379679006c2ca2ba3bc52048
-ffmpeg getFrame(137): md5 = 948fd5fd379679006c2ca2ba3bc52048
-ffmpeg getFrame(138): md5 = 948fd5fd379679006c2ca2ba3bc52048
-ffmpeg getFrame(139): md5 = 814b8a64a6a08093b3a81063bffffed4
-ffmpeg getFrame(140): md5 = 814b8a64a6a08093b3a81063bffffed4
-ffmpeg getFrame(141): md5 = 814b8a64a6a08093b3a81063bffffed4
-ffmpeg getFrame(142): md5 = 51a73cbaf315c9faf8263627455fd5d5
-ffmpeg getFrame(143): md5 = 51a73cbaf315c9faf8263627455fd5d5
-ffmpeg getFrame(144): md5 = 51a73cbaf315c9faf8263627455fd5d5
-ffmpeg getFrame(145): md5 = 31038504cc4c1e664de89c257b1fa1b0
-ffmpeg getFrame(146): md5 = 31038504cc4c1e664de89c257b1fa1b0
-ffmpeg getFrame(147): md5 = 31038504cc4c1e664de89c257b1fa1b0
-ffmpeg getFrame(148): md5 = c76afdadc9099d8bd173f0e08807ee3d
-ffmpeg getFrame(149): md5 = c76afdadc9099d8bd173f0e08807ee3d
-ffmpeg getFrame(150): md5 = c76afdadc9099d8bd173f0e08807ee3d
-ffmpeg getFrame(151): md5 = cd42cff504053e23c5db378119a40b3f
-ffmpeg getFrame(152): md5 = cd42cff504053e23c5db378119a40b3f
-ffmpeg getFrame(153): md5 = cd42cff504053e23c5db378119a40b3f
-ffmpeg getFrame(154): md5 = 7862bd022cc4e9c3976b2f4758e5cd30
-ffmpeg getFrame(155): md5 = 7862bd022cc4e9c3976b2f4758e5cd30
-ffmpeg getFrame(156): md5 = 7862bd022cc4e9c3976b2f4758e5cd30
-ffmpeg getFrame(157): md5 = 7dee4d143138fce530917488cc337c8c
-ffmpeg getFrame(158): md5 = 7dee4d143138fce530917488cc337c8c
-ffmpeg getFrame(159): md5 = 7dee4d143138fce530917488cc337c8c
-ffmpeg getFrame(160): md5 = 254d01500e3ec7f6ae402747761c0a95
-ffmpeg getFrame(161): md5 = 254d01500e3ec7f6ae402747761c0a95
-ffmpeg getFrame(162): md5 = 254d01500e3ec7f6ae402747761c0a95
-ffmpeg getFrame(163): md5 = fe0cdb9314d1628af56e6c3662deb24f
-ffmpeg getFrame(164): md5 = fe0cdb9314d1628af56e6c3662deb24f
-ffmpeg getFrame(165): md5 = fe0cdb9314d1628af56e6c3662deb24f
-ffmpeg getFrame(166): md5 = c790f8cc0f715ca0ec31845c9ef7397a
-ffmpeg getFrame(167): md5 = c790f8cc0f715ca0ec31845c9ef7397a
-ffmpeg getFrame(168): md5 = c790f8cc0f715ca0ec31845c9ef7397a
-ffmpeg getFrame(169): md5 = bab883284018046ddfa2e638785615aa
-ffmpeg getFrame(170): md5 = bab883284018046ddfa2e638785615aa
-ffmpeg getFrame(171): md5 = bab883284018046ddfa2e638785615aa
-ffmpeg getFrame(172): md5 = a469093f43c0fdd6016ee5ef932b7ca4
-ffmpeg getFrame(173): md5 = a469093f43c0fdd6016ee5ef932b7ca4
-ffmpeg getFrame(174): md5 = a469093f43c0fdd6016ee5ef932b7ca4
-ffmpeg getFrame(175): md5 = 50d636deb9cdca5c88842653d3e62463
-ffmpeg getFrame(176): md5 = 50d636deb9cdca5c88842653d3e62463
-ffmpeg getFrame(177): md5 = 50d636deb9cdca5c88842653d3e62463
-ffmpeg getFrame(178): md5 = 7def27ec8a2136e344b24b12337f3a0c
-ffmpeg getFrame(179): md5 = 7def27ec8a2136e344b24b12337f3a0c
-ffmpeg getFrame(180): md5 = 7def27ec8a2136e344b24b12337f3a0c
-ffmpeg getFrame(181): md5 = 93bdda9b26422cf7791154d54667812e
-ffmpeg getFrame(182): md5 = 93bdda9b26422cf7791154d54667812e
-ffmpeg getFrame(183): md5 = 93bdda9b26422cf7791154d54667812e
-ffmpeg getFrame(184): md5 = 965909c3829a19aa301ff7dc98f1ca90
-ffmpeg getFrame(185): md5 = 965909c3829a19aa301ff7dc98f1ca90
-ffmpeg getFrame(186): md5 = 965909c3829a19aa301ff7dc98f1ca90
-ffmpeg getFrame(187): md5 = a53b0c4d2c023f1019b3190b35216c60
-ffmpeg getFrame(188): md5 = a53b0c4d2c023f1019b3190b35216c60
-ffmpeg getFrame(189): md5 = a53b0c4d2c023f1019b3190b35216c60
-ffmpeg getFrame(190): md5 = b900f912fbe898801a4c8356638dcf54
-ffmpeg getFrame(191): md5 = b900f912fbe898801a4c8356638dcf54
-ffmpeg getFrame(192): md5 = b900f912fbe898801a4c8356638dcf54
-ffmpeg getFrame(193): md5 = 5221475c9ea8970258feb9dab1392049
-ffmpeg getFrame(194): md5 = 5221475c9ea8970258feb9dab1392049
-ffmpeg getFrame(195): md5 = 5221475c9ea8970258feb9dab1392049
-ffmpeg getFrame(196): md5 = 6851e0793856841f31acc6a5f704650c
-ffmpeg getFrame(197): md5 = 6851e0793856841f31acc6a5f704650c
-ffmpeg getFrame(198): md5 = 6851e0793856841f31acc6a5f704650c
-ffmpeg getFrame(199): md5 = 35335bb3cbc1cb75aff8416a26df8f39
-ffmpeg getFrame(200): md5 = 35335bb3cbc1cb75aff8416a26df8f39
-ffmpeg getFrame(201): md5 = 35335bb3cbc1cb75aff8416a26df8f39
-ffmpeg getFrame(202): md5 = c9584d3d2c2480fb480953e9bc317cb0
-ffmpeg getFrame(203): md5 = c9584d3d2c2480fb480953e9bc317cb0
-ffmpeg getFrame(204): md5 = c9584d3d2c2480fb480953e9bc317cb0
-ffmpeg getFrame(205): md5 = 3081db2af3ff5bc76f938f9b80ec72bb
-ffmpeg getFrame(206): md5 = 3081db2af3ff5bc76f938f9b80ec72bb
-ffmpeg getFrame(207): md5 = 3081db2af3ff5bc76f938f9b80ec72bb
-ffmpeg getFrame(208): md5 = 10230400f9cdb8a4785082ed133f4c40
-ffmpeg getFrame(209): md5 = 10230400f9cdb8a4785082ed133f4c40
-ffmpeg getFrame(210): md5 = 10230400f9cdb8a4785082ed133f4c40
-ffmpeg getFrame(211): md5 = ccc8aa4b659a072ef3e94005e982e197
-ffmpeg getFrame(212): md5 = ccc8aa4b659a072ef3e94005e982e197
-ffmpeg getFrame(213): md5 = ccc8aa4b659a072ef3e94005e982e197
-ffmpeg getFrame(214): md5 = 916130d3a9a0b5291dd80c3f905f3cfe
-ffmpeg getFrame(215): md5 = 916130d3a9a0b5291dd80c3f905f3cfe
-ffmpeg getFrame(216): md5 = 916130d3a9a0b5291dd80c3f905f3cfe
-ffmpeg getFrame(217): md5 = c9b92c3b3043cadf83b634aaa9967af2
-ffmpeg getFrame(218): md5 = c9b92c3b3043cadf83b634aaa9967af2
-ffmpeg getFrame(219): md5 = c9b92c3b3043cadf83b634aaa9967af2
-ffmpeg getFrame(220): md5 = d60ad82118cc3d82d61380e8c1c35821
-ffmpeg getFrame(221): md5 = d60ad82118cc3d82d61380e8c1c35821
-ffmpeg getFrame(222): md5 = d60ad82118cc3d82d61380e8c1c35821
-ffmpeg getFrame(223): md5 = bb894534f0fbb93ae13effea4ae7778c
-ffmpeg getFrame(224): md5 = bb894534f0fbb93ae13effea4ae7778c
-ffmpeg getFrame(225): md5 = bb894534f0fbb93ae13effea4ae7778c
-ffmpeg getFrame(226): md5 = 03fe855c91fbaabe9e260a23ca4fa6cd
-ffmpeg getFrame(227): md5 = 03fe855c91fbaabe9e260a23ca4fa6cd
-ffmpeg getFrame(228): md5 = 03fe855c91fbaabe9e260a23ca4fa6cd
-ffmpeg getFrame(229): md5 = 92b0f153f17e6a387535ba873c245ef2
-ffmpeg getFrame(230): md5 = 92b0f153f17e6a387535ba873c245ef2
-ffmpeg getFrame(231): md5 = 92b0f153f17e6a387535ba873c245ef2
-ffmpeg getFrame(232): md5 = f513c73faf87cbfe1fff854d97f8f492
-ffmpeg getFrame(233): md5 = f513c73faf87cbfe1fff854d97f8f492
-ffmpeg getFrame(234): md5 = f513c73faf87cbfe1fff854d97f8f492
-ffmpeg getFrame(235): md5 = 972e660b84a02fb883809c93f1ffdbf8
-ffmpeg getFrame(236): md5 = 972e660b84a02fb883809c93f1ffdbf8
-ffmpeg getFrame(237): md5 = 972e660b84a02fb883809c93f1ffdbf8
-ffmpeg getFrame(238): md5 = 7e80bfd9c95b8f46e4ffcc1acacd478d
-ffmpeg getFrame(239): md5 = 7e80bfd9c95b8f46e4ffcc1acacd478d
-ffmpeg getFrame(240): md5 = 7e80bfd9c95b8f46e4ffcc1acacd478d
-ffmpeg getFrame(241): md5 = c3fca01d3ba84b05c18574615858e613
-ffmpeg getFrame(242): md5 = c3fca01d3ba84b05c18574615858e613
+ffmpeg getFrame(1): md5 = 054ca5377a0592ea15497bcfefa59181
+ffmpeg getFrame(2): md5 = 054ca5377a0592ea15497bcfefa59181
+ffmpeg getFrame(3): md5 = 054ca5377a0592ea15497bcfefa59181
+ffmpeg getFrame(4): md5 = bc3e96ad73e019583d449b6d2d857858
+ffmpeg getFrame(5): md5 = bc3e96ad73e019583d449b6d2d857858
+ffmpeg getFrame(6): md5 = bc3e96ad73e019583d449b6d2d857858
+ffmpeg getFrame(7): md5 = 0a7a900dc376afc5598d5b2ae50be442
+ffmpeg getFrame(8): md5 = 0a7a900dc376afc5598d5b2ae50be442
+ffmpeg getFrame(9): md5 = 0a7a900dc376afc5598d5b2ae50be442
+ffmpeg getFrame(10): md5 = 8de055e9eb38073ab35f75cfe4adae83
+ffmpeg getFrame(11): md5 = 8de055e9eb38073ab35f75cfe4adae83
+ffmpeg getFrame(12): md5 = 8de055e9eb38073ab35f75cfe4adae83
+ffmpeg getFrame(13): md5 = 73327939f7fc8b6080525dc259bdd136
+ffmpeg getFrame(14): md5 = 73327939f7fc8b6080525dc259bdd136
+ffmpeg getFrame(15): md5 = 73327939f7fc8b6080525dc259bdd136
+ffmpeg getFrame(16): md5 = 25fce65aaebf63d787415133ee525e0b
+ffmpeg getFrame(17): md5 = 25fce65aaebf63d787415133ee525e0b
+ffmpeg getFrame(18): md5 = 25fce65aaebf63d787415133ee525e0b
+ffmpeg getFrame(19): md5 = dbcd63a3fe7bc6e5ae746134462a582d
+ffmpeg getFrame(20): md5 = dbcd63a3fe7bc6e5ae746134462a582d
+ffmpeg getFrame(21): md5 = dbcd63a3fe7bc6e5ae746134462a582d
+ffmpeg getFrame(22): md5 = 5af7473006c39343accad86b6f9cf6ed
+ffmpeg getFrame(23): md5 = 5af7473006c39343accad86b6f9cf6ed
+ffmpeg getFrame(24): md5 = 5af7473006c39343accad86b6f9cf6ed
+ffmpeg getFrame(25): md5 = 405cc6f1453352460cf01875aa23ccff
+ffmpeg getFrame(26): md5 = 405cc6f1453352460cf01875aa23ccff
+ffmpeg getFrame(27): md5 = 405cc6f1453352460cf01875aa23ccff
+ffmpeg getFrame(28): md5 = cbdbcebeea6ea45f6965a83543b6c44b
+ffmpeg getFrame(29): md5 = cbdbcebeea6ea45f6965a83543b6c44b
+ffmpeg getFrame(30): md5 = cbdbcebeea6ea45f6965a83543b6c44b
+ffmpeg getFrame(31): md5 = 9620a937f1a19c3d5e95716fae1eb47f
+ffmpeg getFrame(32): md5 = 9620a937f1a19c3d5e95716fae1eb47f
+ffmpeg getFrame(33): md5 = 9620a937f1a19c3d5e95716fae1eb47f
+ffmpeg getFrame(34): md5 = 689ad71143a347f53417356eabb0037f
+ffmpeg getFrame(35): md5 = 689ad71143a347f53417356eabb0037f
+ffmpeg getFrame(36): md5 = 689ad71143a347f53417356eabb0037f
+ffmpeg getFrame(37): md5 = 4f9a4e239c4b9459a59b038b0be3d5df
+ffmpeg getFrame(38): md5 = 4f9a4e239c4b9459a59b038b0be3d5df
+ffmpeg getFrame(39): md5 = 4f9a4e239c4b9459a59b038b0be3d5df
+ffmpeg getFrame(40): md5 = 579618d56fe46acdb9bcfcff67808ae4
+ffmpeg getFrame(41): md5 = 579618d56fe46acdb9bcfcff67808ae4
+ffmpeg getFrame(42): md5 = 579618d56fe46acdb9bcfcff67808ae4
+ffmpeg getFrame(43): md5 = 9f77876e4926b92d5f7dc565ac94e366
+ffmpeg getFrame(44): md5 = 9f77876e4926b92d5f7dc565ac94e366
+ffmpeg getFrame(45): md5 = 9f77876e4926b92d5f7dc565ac94e366
+ffmpeg getFrame(46): md5 = faa5ef30ddeb97020250c150779e3399
+ffmpeg getFrame(47): md5 = faa5ef30ddeb97020250c150779e3399
+ffmpeg getFrame(48): md5 = faa5ef30ddeb97020250c150779e3399
+ffmpeg getFrame(49): md5 = c61c4e4620af5adba309237a84ef91df
+ffmpeg getFrame(50): md5 = c61c4e4620af5adba309237a84ef91df
+ffmpeg getFrame(51): md5 = c61c4e4620af5adba309237a84ef91df
+ffmpeg getFrame(52): md5 = 3953dcbdeb9b687b2b1e925183a16c39
+ffmpeg getFrame(53): md5 = 3953dcbdeb9b687b2b1e925183a16c39
+ffmpeg getFrame(54): md5 = 3953dcbdeb9b687b2b1e925183a16c39
+ffmpeg getFrame(55): md5 = c360fd94742147db7e97796a61eee19f
+ffmpeg getFrame(56): md5 = c360fd94742147db7e97796a61eee19f
+ffmpeg getFrame(57): md5 = c360fd94742147db7e97796a61eee19f
+ffmpeg getFrame(58): md5 = 7b1f32d4e4a1efce454c0b73ec015e75
+ffmpeg getFrame(59): md5 = 7b1f32d4e4a1efce454c0b73ec015e75
+ffmpeg getFrame(60): md5 = 7b1f32d4e4a1efce454c0b73ec015e75
+ffmpeg getFrame(61): md5 = 963b85dafe7ac84daf64a12931509de7
+ffmpeg getFrame(62): md5 = 963b85dafe7ac84daf64a12931509de7
+ffmpeg getFrame(63): md5 = 963b85dafe7ac84daf64a12931509de7
+ffmpeg getFrame(64): md5 = d86b04f95208b77c06e49ba9a76b477f
+ffmpeg getFrame(65): md5 = d86b04f95208b77c06e49ba9a76b477f
+ffmpeg getFrame(66): md5 = d86b04f95208b77c06e49ba9a76b477f
+ffmpeg getFrame(67): md5 = cc52ca71fc8daae8feba52fa329f9f66
+ffmpeg getFrame(68): md5 = cc52ca71fc8daae8feba52fa329f9f66
+ffmpeg getFrame(69): md5 = cc52ca71fc8daae8feba52fa329f9f66
+ffmpeg getFrame(70): md5 = 3cac4625a645a147a7e7cb8ab28ebf07
+ffmpeg getFrame(71): md5 = 3cac4625a645a147a7e7cb8ab28ebf07
+ffmpeg getFrame(72): md5 = 3cac4625a645a147a7e7cb8ab28ebf07
+ffmpeg getFrame(73): md5 = f8eb6d231d353e8d98cf76f1fcf960c3
+ffmpeg getFrame(74): md5 = f8eb6d231d353e8d98cf76f1fcf960c3
+ffmpeg getFrame(75): md5 = f8eb6d231d353e8d98cf76f1fcf960c3
+ffmpeg getFrame(76): md5 = 25ea525ec2630b123da3bd18b44e391b
+ffmpeg getFrame(77): md5 = 25ea525ec2630b123da3bd18b44e391b
+ffmpeg getFrame(78): md5 = 25ea525ec2630b123da3bd18b44e391b
+ffmpeg getFrame(79): md5 = 97ea17ae200e6ca4e2412ba5546d4cdb
+ffmpeg getFrame(80): md5 = 97ea17ae200e6ca4e2412ba5546d4cdb
+ffmpeg getFrame(81): md5 = 97ea17ae200e6ca4e2412ba5546d4cdb
+ffmpeg getFrame(82): md5 = d0bc5176b565500f09851abf059bf736
+ffmpeg getFrame(83): md5 = d0bc5176b565500f09851abf059bf736
+ffmpeg getFrame(84): md5 = d0bc5176b565500f09851abf059bf736
+ffmpeg getFrame(85): md5 = a73c78e3ae667682e9920a218353540b
+ffmpeg getFrame(86): md5 = a73c78e3ae667682e9920a218353540b
+ffmpeg getFrame(87): md5 = a73c78e3ae667682e9920a218353540b
+ffmpeg getFrame(88): md5 = 02172b5823992d273f7d4295f628309a
+ffmpeg getFrame(89): md5 = 02172b5823992d273f7d4295f628309a
+ffmpeg getFrame(90): md5 = 02172b5823992d273f7d4295f628309a
+ffmpeg getFrame(91): md5 = 5887bfa75094567d9aec180eda7e45c6
+ffmpeg getFrame(92): md5 = 5887bfa75094567d9aec180eda7e45c6
+ffmpeg getFrame(93): md5 = 5887bfa75094567d9aec180eda7e45c6
+ffmpeg getFrame(94): md5 = 3b93b082d52c4ccb8dc5beb22c8316ab
+ffmpeg getFrame(95): md5 = 3b93b082d52c4ccb8dc5beb22c8316ab
+ffmpeg getFrame(96): md5 = 3b93b082d52c4ccb8dc5beb22c8316ab
+ffmpeg getFrame(97): md5 = b6485f3287312414e90fc0508ce9b194
+ffmpeg getFrame(98): md5 = b6485f3287312414e90fc0508ce9b194
+ffmpeg getFrame(99): md5 = b6485f3287312414e90fc0508ce9b194
+ffmpeg getFrame(100): md5 = 57fe0edffdfcf06e88d7219662f04b05
+ffmpeg getFrame(101): md5 = 57fe0edffdfcf06e88d7219662f04b05
+ffmpeg getFrame(102): md5 = 57fe0edffdfcf06e88d7219662f04b05
+ffmpeg getFrame(103): md5 = 5e6ab28f31801cddb176f1c01d13f364
+ffmpeg getFrame(104): md5 = 5e6ab28f31801cddb176f1c01d13f364
+ffmpeg getFrame(105): md5 = 5e6ab28f31801cddb176f1c01d13f364
+ffmpeg getFrame(106): md5 = ab2142ee9ec11e01e42a072ad5762030
+ffmpeg getFrame(107): md5 = ab2142ee9ec11e01e42a072ad5762030
+ffmpeg getFrame(108): md5 = ab2142ee9ec11e01e42a072ad5762030
+ffmpeg getFrame(109): md5 = 84410c79c7cf32562a83fa8f4bb981f7
+ffmpeg getFrame(110): md5 = 84410c79c7cf32562a83fa8f4bb981f7
+ffmpeg getFrame(111): md5 = 84410c79c7cf32562a83fa8f4bb981f7
+ffmpeg getFrame(112): md5 = 5ea25236d676122a90799adefc529611
+ffmpeg getFrame(113): md5 = 5ea25236d676122a90799adefc529611
+ffmpeg getFrame(114): md5 = 5ea25236d676122a90799adefc529611
+ffmpeg getFrame(115): md5 = 0ac65e51db3d7b40f55df3a43f3f03d2
+ffmpeg getFrame(116): md5 = 0ac65e51db3d7b40f55df3a43f3f03d2
+ffmpeg getFrame(117): md5 = 0ac65e51db3d7b40f55df3a43f3f03d2
+ffmpeg getFrame(118): md5 = b0b6a709c28c75d9beffaaaba969ec12
+ffmpeg getFrame(119): md5 = b0b6a709c28c75d9beffaaaba969ec12
+ffmpeg getFrame(120): md5 = b0b6a709c28c75d9beffaaaba969ec12
+ffmpeg getFrame(121): md5 = 7c58a3bc631a7ec1dd48de99658a5cc4
+ffmpeg getFrame(122): md5 = 7c58a3bc631a7ec1dd48de99658a5cc4
+ffmpeg getFrame(123): md5 = 7c58a3bc631a7ec1dd48de99658a5cc4
+ffmpeg getFrame(124): md5 = a89b9a83054bf8737a97c080f07a59bd
+ffmpeg getFrame(125): md5 = a89b9a83054bf8737a97c080f07a59bd
+ffmpeg getFrame(126): md5 = a89b9a83054bf8737a97c080f07a59bd
+ffmpeg getFrame(127): md5 = 5d58afe8118077391b8523a065dd7fce
+ffmpeg getFrame(128): md5 = 5d58afe8118077391b8523a065dd7fce
+ffmpeg getFrame(129): md5 = 5d58afe8118077391b8523a065dd7fce
+ffmpeg getFrame(130): md5 = d7a36b7a67f4ca8941931a15517f5eb1
+ffmpeg getFrame(131): md5 = d7a36b7a67f4ca8941931a15517f5eb1
+ffmpeg getFrame(132): md5 = d7a36b7a67f4ca8941931a15517f5eb1
+ffmpeg getFrame(133): md5 = 3064adc7a54286b4c45f9fe3669e8b1d
+ffmpeg getFrame(134): md5 = 3064adc7a54286b4c45f9fe3669e8b1d
+ffmpeg getFrame(135): md5 = 3064adc7a54286b4c45f9fe3669e8b1d
+ffmpeg getFrame(136): md5 = 49feb765089580d9f3de8a6e36cbaed7
+ffmpeg getFrame(137): md5 = 49feb765089580d9f3de8a6e36cbaed7
+ffmpeg getFrame(138): md5 = 49feb765089580d9f3de8a6e36cbaed7
+ffmpeg getFrame(139): md5 = 3f4495bb347480746f2fb994465b25a9
+ffmpeg getFrame(140): md5 = 3f4495bb347480746f2fb994465b25a9
+ffmpeg getFrame(141): md5 = 3f4495bb347480746f2fb994465b25a9
+ffmpeg getFrame(142): md5 = 53343b23bb1a4aeb1f667608265fad9a
+ffmpeg getFrame(143): md5 = 53343b23bb1a4aeb1f667608265fad9a
+ffmpeg getFrame(144): md5 = 53343b23bb1a4aeb1f667608265fad9a
+ffmpeg getFrame(145): md5 = b84c2d59f936f7cae83e736dc2dd0ebc
+ffmpeg getFrame(146): md5 = b84c2d59f936f7cae83e736dc2dd0ebc
+ffmpeg getFrame(147): md5 = b84c2d59f936f7cae83e736dc2dd0ebc
+ffmpeg getFrame(148): md5 = abe4ae47b43678b60c192fbb4d0a69b5
+ffmpeg getFrame(149): md5 = abe4ae47b43678b60c192fbb4d0a69b5
+ffmpeg getFrame(150): md5 = abe4ae47b43678b60c192fbb4d0a69b5
+ffmpeg getFrame(151): md5 = 117c46c3a208183085c41eccf223c7e6
+ffmpeg getFrame(152): md5 = 117c46c3a208183085c41eccf223c7e6
+ffmpeg getFrame(153): md5 = 117c46c3a208183085c41eccf223c7e6
+ffmpeg getFrame(154): md5 = d587fae1b39f3a2ffae867f9652e1ed7
+ffmpeg getFrame(155): md5 = d587fae1b39f3a2ffae867f9652e1ed7
+ffmpeg getFrame(156): md5 = d587fae1b39f3a2ffae867f9652e1ed7
+ffmpeg getFrame(157): md5 = db17bcfe68abe673bf3df8b8062714ab
+ffmpeg getFrame(158): md5 = db17bcfe68abe673bf3df8b8062714ab
+ffmpeg getFrame(159): md5 = db17bcfe68abe673bf3df8b8062714ab
+ffmpeg getFrame(160): md5 = 316351119812a64ff994bbad9332286e
+ffmpeg getFrame(161): md5 = 316351119812a64ff994bbad9332286e
+ffmpeg getFrame(162): md5 = 316351119812a64ff994bbad9332286e
+ffmpeg getFrame(163): md5 = f4af5e8779fa40f07b0285a4dc1b049d
+ffmpeg getFrame(164): md5 = f4af5e8779fa40f07b0285a4dc1b049d
+ffmpeg getFrame(165): md5 = f4af5e8779fa40f07b0285a4dc1b049d
+ffmpeg getFrame(166): md5 = 274f9691f9d2360d53f299c1fba79614
+ffmpeg getFrame(167): md5 = 274f9691f9d2360d53f299c1fba79614
+ffmpeg getFrame(168): md5 = 274f9691f9d2360d53f299c1fba79614
+ffmpeg getFrame(169): md5 = 4973cb1e537815ee8b7ef73e759f5c39
+ffmpeg getFrame(170): md5 = 4973cb1e537815ee8b7ef73e759f5c39
+ffmpeg getFrame(171): md5 = 4973cb1e537815ee8b7ef73e759f5c39
+ffmpeg getFrame(172): md5 = 8629707f6d5c1a205564ac5f6f10d89f
+ffmpeg getFrame(173): md5 = 8629707f6d5c1a205564ac5f6f10d89f
+ffmpeg getFrame(174): md5 = 8629707f6d5c1a205564ac5f6f10d89f
+ffmpeg getFrame(175): md5 = f72576077cd616c026c7f56829f220ae
+ffmpeg getFrame(176): md5 = f72576077cd616c026c7f56829f220ae
+ffmpeg getFrame(177): md5 = f72576077cd616c026c7f56829f220ae
+ffmpeg getFrame(178): md5 = 017aaef2fe10b6aa2788d7ea0620c252
+ffmpeg getFrame(179): md5 = 017aaef2fe10b6aa2788d7ea0620c252
+ffmpeg getFrame(180): md5 = 017aaef2fe10b6aa2788d7ea0620c252
+ffmpeg getFrame(181): md5 = a5b5bfe8b20e018ef506d703b2af7ccc
+ffmpeg getFrame(182): md5 = a5b5bfe8b20e018ef506d703b2af7ccc
+ffmpeg getFrame(183): md5 = a5b5bfe8b20e018ef506d703b2af7ccc
+ffmpeg getFrame(184): md5 = cc781178ac22f4cf6641183926067215
+ffmpeg getFrame(185): md5 = cc781178ac22f4cf6641183926067215
+ffmpeg getFrame(186): md5 = cc781178ac22f4cf6641183926067215
+ffmpeg getFrame(187): md5 = b0338a88dff4cbabb1599a807e5c6ef0
+ffmpeg getFrame(188): md5 = b0338a88dff4cbabb1599a807e5c6ef0
+ffmpeg getFrame(189): md5 = b0338a88dff4cbabb1599a807e5c6ef0
+ffmpeg getFrame(190): md5 = d1ee4ba4a11217efd0cf8cba15a2eb1f
+ffmpeg getFrame(191): md5 = d1ee4ba4a11217efd0cf8cba15a2eb1f
+ffmpeg getFrame(192): md5 = d1ee4ba4a11217efd0cf8cba15a2eb1f
+ffmpeg getFrame(193): md5 = 0d2849f432fc9656c31629f6288feba0
+ffmpeg getFrame(194): md5 = 0d2849f432fc9656c31629f6288feba0
+ffmpeg getFrame(195): md5 = 0d2849f432fc9656c31629f6288feba0
+ffmpeg getFrame(196): md5 = c26f6d4cf0737c5c6b102c048312f0fc
+ffmpeg getFrame(197): md5 = c26f6d4cf0737c5c6b102c048312f0fc
+ffmpeg getFrame(198): md5 = c26f6d4cf0737c5c6b102c048312f0fc
+ffmpeg getFrame(199): md5 = 23d6d68503ec607327ee6216bc695593
+ffmpeg getFrame(200): md5 = 23d6d68503ec607327ee6216bc695593
+ffmpeg getFrame(201): md5 = 23d6d68503ec607327ee6216bc695593
+ffmpeg getFrame(202): md5 = 85c3d4dbcd9315b00e220d334a012083
+ffmpeg getFrame(203): md5 = 85c3d4dbcd9315b00e220d334a012083
+ffmpeg getFrame(204): md5 = 85c3d4dbcd9315b00e220d334a012083
+ffmpeg getFrame(205): md5 = 08d8b9d438667d710cacc0d9081a4883
+ffmpeg getFrame(206): md5 = 08d8b9d438667d710cacc0d9081a4883
+ffmpeg getFrame(207): md5 = 08d8b9d438667d710cacc0d9081a4883
+ffmpeg getFrame(208): md5 = d3ce913a9c16206990a6b9a80c0561f3
+ffmpeg getFrame(209): md5 = d3ce913a9c16206990a6b9a80c0561f3
+ffmpeg getFrame(210): md5 = d3ce913a9c16206990a6b9a80c0561f3
+ffmpeg getFrame(211): md5 = 64bcd46af5519ad65722bc94e71a5628
+ffmpeg getFrame(212): md5 = 64bcd46af5519ad65722bc94e71a5628
+ffmpeg getFrame(213): md5 = 64bcd46af5519ad65722bc94e71a5628
+ffmpeg getFrame(214): md5 = 55a1b21fb233ec1b965aa27fc5680ef7
+ffmpeg getFrame(215): md5 = 55a1b21fb233ec1b965aa27fc5680ef7
+ffmpeg getFrame(216): md5 = 55a1b21fb233ec1b965aa27fc5680ef7
+ffmpeg getFrame(217): md5 = cbf35af572f3947b04b391dbe8f01912
+ffmpeg getFrame(218): md5 = cbf35af572f3947b04b391dbe8f01912
+ffmpeg getFrame(219): md5 = cbf35af572f3947b04b391dbe8f01912
+ffmpeg getFrame(220): md5 = b68f724605514e4ae7676c04fff62461
+ffmpeg getFrame(221): md5 = b68f724605514e4ae7676c04fff62461
+ffmpeg getFrame(222): md5 = b68f724605514e4ae7676c04fff62461
+ffmpeg getFrame(223): md5 = e2d66cb30e1d942da4b603ecae95c64e
+ffmpeg getFrame(224): md5 = e2d66cb30e1d942da4b603ecae95c64e
+ffmpeg getFrame(225): md5 = e2d66cb30e1d942da4b603ecae95c64e
+ffmpeg getFrame(226): md5 = 70c86d74b825b685d3e90c2dfa21f307
+ffmpeg getFrame(227): md5 = 70c86d74b825b685d3e90c2dfa21f307
+ffmpeg getFrame(228): md5 = 70c86d74b825b685d3e90c2dfa21f307
+ffmpeg getFrame(229): md5 = 52e93862544f05c92375d2aaa2c7dc16
+ffmpeg getFrame(230): md5 = 52e93862544f05c92375d2aaa2c7dc16
+ffmpeg getFrame(231): md5 = 52e93862544f05c92375d2aaa2c7dc16
+ffmpeg getFrame(232): md5 = da9910064c0414e256056b769f942049
+ffmpeg getFrame(233): md5 = da9910064c0414e256056b769f942049
+ffmpeg getFrame(234): md5 = da9910064c0414e256056b769f942049
+ffmpeg getFrame(235): md5 = 2817e435640fc7c26685401007ad6177
+ffmpeg getFrame(236): md5 = 2817e435640fc7c26685401007ad6177
+ffmpeg getFrame(237): md5 = 2817e435640fc7c26685401007ad6177
+ffmpeg getFrame(238): md5 = 5da7388e5b099cfb030b36cefcb260aa
+ffmpeg getFrame(239): md5 = 5da7388e5b099cfb030b36cefcb260aa
+ffmpeg getFrame(240): md5 = 5da7388e5b099cfb030b36cefcb260aa
+ffmpeg getFrame(241): md5 = e3a3ea606c5ccdc530c7c6b2a2a5aa71
+ffmpeg getFrame(242): md5 = e3a3ea606c5ccdc530c7c6b2a2a5aa71
\ No newline at end of file

Property changes on: tests
___________________________________________________________________
Deleted: svn:ignore
   - .cvsignore
CVS
*.log
*.diff
*.exp
*.out

Index: ffmpeg_frame.h
===================================================================
--- a/ffmpeg_frame.h	(.../branches/ffmpeg-php/ffmpeg-php-0.6.0)
+++ b/ffmpeg_frame.h	(.../trunk/ffmpeg-php)
@@ -40,17 +40,19 @@
 
 #include <avcodec.h>
 #include <avformat.h>
+#include <avutil.h>
 
 #ifdef HAVE_CONFIG_H
 #include "config.h"
 #endif
 
 /* object can't be created from user space so no PHP constructor */
-//FFMPEG_PHP_METHOD(ffmpeg_frame, __construct);
+//FFMPEG_PHP_CONSTRUCTOR(ffmpeg_frame, __construct);
 
 /* frame methods */
 FFMPEG_PHP_METHOD(ffmpeg_frame, getWidth);
 FFMPEG_PHP_METHOD(ffmpeg_frame, getHeight);
+FFMPEG_PHP_METHOD(ffmpeg_frame, resize);
 FFMPEG_PHP_METHOD(ffmpeg_frame, isKeyFrame);
 FFMPEG_PHP_METHOD(ffmpeg_frame, getPresentationTimestamp);
 

Property changes on: ffmpeg_frame.h
___________________________________________________________________
Deleted: svn:keywords
   - Author Date Id Revision
Deleted: svn:eol-style
   - native

Index: ffmpeg_tools.c
===================================================================
--- a/ffmpeg_tools.c	(.../branches/ffmpeg-php/ffmpeg-php-0.6.0)
+++ b/ffmpeg_tools.c	(.../trunk/ffmpeg-php)
@@ -37,57 +37,108 @@
 #include "config.h"
 #endif
 
-#include <php.h>
+//#include <php.h>
 
 #include "ffmpeg_tools.h"
 
-#ifdef HAVE_SWSCALER
+#if LIBAVCODEC_VERSION_MAJOR >= 52
 #include <swscale.h>
-#endif
 
 /* {{{ ffmpeg_img_convert() 
  * wrapper around ffmpeg image conversion routines
  */
-int ffmpeg_img_convert(AVPicture *dst, int dst_pix_fmt,
-        AVPicture *src, int src_pix_fmt,
-        int src_width, int src_height)
+int img_convert(AVPicture *dst, int dst_pix_fmt,
+        AVPicture *src, int src_pix_fmt, int src_width, int src_height)
 {
-#ifndef HAVE_SWSCALER // No SWSCALER so just use img_convert
-    return img_convert(dst, dst_pix_fmt, 
-            src, src_pix_fmt, src_width, src_height);
-#else // Do swscale convert
-    int result = 0;
     struct SwsContext *sws_ctx = NULL;
 
-    if (src_pix_fmt == dst_pix_fmt) {
-        return 0;
-    }
-
     // TODO: Try to get cached sws_context first
-    sws_ctx = sws_getContext(
-            src_width, src_height, src_pix_fmt, 
+    sws_ctx = sws_getContext(src_width, src_height, 0, 
             src_width, src_height, dst_pix_fmt, 
             SWS_BICUBIC, NULL, NULL, NULL);
 
     if (sws_ctx == NULL){
-        return 1;
+        return 2;
     }
 
-    result = sws_scale(sws_ctx, 
-            src->data, src->linesize,
-            0, src_height,
-            dst->data, dst->linesize);
-
+    sws_scale(sws_ctx, src->data, src->linesize, 0, src_height, dst->data, dst->linesize);
     sws_freeContext(sws_ctx);
 
-    if (result == 0){
-        return 2;
-    }
-#endif // NOT HAVE_SWSCALER
     return 0;
 }
 /* }}} */
 
+
+
+void img_resample(ImgReSampleContext * context, AVPicture * pxOut, const AVPicture * pxIn)
+{
+    if (context != NULL && context->context != NULL) {
+        AVPicture shiftedInput; // = {0};
+        shiftedInput.data[0] = pxIn->data[0] + pxIn->linesize[0] * 
+            context->bandTop + context->bandLeft;
+        shiftedInput.data[1] = pxIn->data[1] + (pxIn->linesize[1] * 
+                (context->bandTop / 2)) + (context->bandLeft+1) / 2;
+        shiftedInput.data[2] = pxIn->data[2] + (pxIn->linesize[2] * 
+                (context->bandTop / 2)) + (context->bandLeft+1) / 2;
+        shiftedInput.linesize[0] = pxIn->linesize[0];
+        shiftedInput.linesize[1] = pxIn->linesize[1];
+        shiftedInput.linesize[2] = pxIn->linesize[2];
+        sws_scale(context->context, (uint8_t**)shiftedInput.data, 
+                (int*)shiftedInput.linesize, 0, context->height - context->bandBottom - 
+                context->bandTop, pxOut->data, pxOut->linesize);
+    }
+}
+
+ImgReSampleContext * img_resample_full_init (int owidth, int oheight, int iwidth, int iheight, int topBand, int bottomBand, int leftBand, int rightBand, int padtop, int padbottom, int padleft, int padright)
+{
+    ImgReSampleContext * s = (ImgReSampleContext *)av_malloc(sizeof(ImgReSampleContext));
+    if (s == NULL) {
+        return NULL;
+    }
+    int srcSurface = (iwidth - rightBand - leftBand)* (iheight - topBand - bottomBand);
+    // We use bilinear when the source surface is big, and bicubic when the number of pixels to handle is less than 1 MPixels
+    s->context = sws_getContext(iwidth - rightBand - leftBand, 
+            iheight - topBand - bottomBand, PIX_FMT_YUV420P, owidth, oheight, 
+            PIX_FMT_YUV420P, srcSurface > 1024000 ? SWS_FAST_BILINEAR : SWS_BICUBIC, 
+            NULL, NULL, NULL);
+    if (s->context == NULL) {
+        av_free(s);
+        return NULL; }
+        s->bandLeft = leftBand;
+        s->bandRight = rightBand;
+        s->bandTop = topBand;
+        s->bandBottom = bottomBand;
+
+        s->padLeft = padleft;
+        s->padRight = padright;
+        s->padTop = padtop;
+        s->padBottom = padbottom;
+
+        s->width = iwidth;
+        s->height = iheight;
+
+        s->outWidth = owidth;
+        s->outHeight = oheight;
+
+        return s;
+}
+
+ImgReSampleContext * img_resample_init (int owidth, int oheight, int iwidth, int iheight)
+{
+    return img_resample_full_init(owidth, oheight, iwidth, iheight, 0, 0, 0, 0, 0, 0, 0, 0);
+}
+
+void img_resample_close(ImgReSampleContext * s)
+{
+    if (s == NULL) return;
+    sws_freeContext(s->context);
+
+    av_free(s);   
+}
+
+#endif
+
+
 /*
  * Local variables:
  * tab-width: 4
Index: TODO
===================================================================
--- a/TODO	(.../branches/ffmpeg-php/ffmpeg-php-0.6.0)
+++ b/TODO	(.../trunk/ffmpeg-php)
@@ -1 +1,2 @@
-Use ffmpeg's output_example.c to generate video for tests. This will allow to remove the test videos, making the distribution MUCH smaller.
+Use ffmpeg's output_example.c to generate video for tests. This will allow to remove the test videos, making the distribution smaller.
+Add option to preserve aspect in frame->resize()

Property changes on: TODO
___________________________________________________________________
Deleted: svn:keywords
   - Author Date Id Revision
Deleted: svn:eol-style
   - native

Index: INSTALL
===================================================================
--- a/INSTALL	(.../branches/ffmpeg-php/ffmpeg-php-0.6.0)
+++ b/INSTALL	(.../trunk/ffmpeg-php)
@@ -1,17 +1,32 @@
 REQUIREMENTS
 ============
 
-ffmpeg-0.4.9pre1 or higher built with the --enable-shared option and without the --enable-swscale option (ffmpeg svn recommended)
-php-5.0.x or higher. For php-4.x.x, use ffmpeg-php-0.5.1 or older.
+ffmpeg-0.5.0 or higher built with the --enable-shared option
+php-5.0.x or higher. For php-4, use ffmpeg-php-0.5.1 or older.
 gd-2.0.x or higher or the version of GD bundled with PHP
 
 INSTALLATION INSTRUCTIONS
 =========================
 
-These instructions are for Linux since I don't have windows. If you
-successfully build on windows, let me know how you did it and I'll update 
-these instructions.
+These instructions are for Linux/Unix. Windows is not offically supported at this time however,
+there are user-contributed builds that will run on window. Search the sourceforge downloads page
+for these.
 
+INSTALLING FROM A PACKAGE MANAGER
+---------------------------------
+
+There are prebuilt packages for many Linux distros.
+
+Gentoo:
+    emerge ffmpeg-php
+
+Debian/Ubuntu:
+    apt-get install php5-ffmpeg
+
+Other:
+    check your docs for specific info on how to invoke the package manager.
+
+
 BUILDING FFMPEG
 ---------------
 
@@ -92,7 +107,7 @@
 ---------------
 
 Q: I get '`gdImage' undeclared or `gdImagePtr''undeclared when I try to 
-   'make' ffmpeg-php
+   build ffmpeg-php
 
 A: Your version of php is compiled without gd support. Make sure to use the 
    '--with-gd' flag when configuring php. If you're sure you have gd but 
@@ -108,7 +123,8 @@
 
 Q: Can I just pay you to install it?
 
-A: Yes. I will install ffmpeg-php and prerequisites on your server for $75 USD.
+A: Yes. I will install ffmpeg + codecs, ffmpeg-php and flvtool2 on your server for $75 USD. This
+   is everything you need to convert just about any movie type to flash.
    Shoot me an email at ffmpeg.php AT gmail.com if you are interested.
  
 FURTHER HELP

Property changes on: INSTALL
___________________________________________________________________
Deleted: svn:keywords
   - Author Date Id Revision
Deleted: svn:eol-style
   - native


Property changes on: gd_io.h
___________________________________________________________________
Deleted: svn:keywords
   - Author Date Id Revision
Deleted: svn:eol-style
   - native

Index: ffmpeg-php.c
===================================================================
--- a/ffmpeg-php.c	(.../branches/ffmpeg-php/ffmpeg-php-0.6.0)
+++ b/ffmpeg-php.c	(.../trunk/ffmpeg-php)
@@ -51,8 +51,9 @@
 #include "ext/standard/info.h"
 
 #include "php_ffmpeg.h"
+#include "ffmpeg_errorhandler.h"
 
-#define FFMPEG_PHP_VERSION "0.6.0-svn"
+#define FFMPEG_PHP_VERSION "0.6.3"
 
 zend_module_entry ffmpeg_module_entry = {
 #if ZEND_MODULE_API_NO >= 20010901
@@ -78,7 +79,6 @@
 
 extern void register_ffmpeg_movie_class(int);
 extern void register_ffmpeg_frame_class(int);
-extern void ffmpeg_errorhandler(void *ptr, int level, const char *msg, va_list args);
 
 PHP_INI_BEGIN()
     PHP_INI_ENTRY("ffmpeg.allow_persistent", "0", PHP_INI_ALL, NULL)
@@ -100,7 +100,9 @@
  
     if (INI_BOOL("ffmpeg.show_warnings")) {
         av_log_set_callback(ffmpeg_errorhandler);
-    } 
+    } else {
+        av_log_set_callback(ffmpeg_hide_errors);
+    }
    
     register_ffmpeg_movie_class(module_number);
     register_ffmpeg_frame_class(module_number);
@@ -119,6 +121,12 @@
             avcodec_build(), CONST_CS | CONST_PERSISTENT);
 #endif
 
+#if HAVE_LIBGD20
+    REGISTER_LONG_CONSTANT("FFMPEG_PHP_GD_ENABLED", 1, CONST_CS | CONST_PERSISTENT);
+#else
+    REGISTER_LONG_CONSTANT("FFMPEG_PHP_GD_ENABLED", 0, CONST_CS | CONST_PERSISTENT);
+#endif // HAVE_LIBGD20
+ 
     return SUCCESS;
 }
 /* }}} */
@@ -138,7 +146,7 @@
 
 
 /* {{{ php info function
-   Add an entry for ffmpeg support in phpinfo() */
+   Add an entry for ffmpeg-php support in phpinfo() */
 PHP_MINFO_FUNCTION(ffmpeg)
 {
     php_info_print_table_start();

Property changes on: ffmpeg-php.c
___________________________________________________________________
Deleted: svn:keywords
   - Author Date Id Revision
Deleted: svn:eol-style
   - native

Index: ffmpeg_tools.h
===================================================================
--- a/ffmpeg_tools.h	(.../branches/ffmpeg-php/ffmpeg-php-0.6.0)
+++ b/ffmpeg_tools.h	(.../trunk/ffmpeg-php)
@@ -31,18 +31,65 @@
    obligated to do so. If you do not wish to do so, delete this exception
    statement from your version.
 
- */
+*/
 
 #ifndef FFMPEG_TOOLS_H
 #define FFMPEG_TOOLS_H
 
 #include <avcodec.h>
 
-int ffmpeg_img_convert(
-        AVPicture *dst, int dst_pix_fmt,
-        AVPicture *src, int src_pix_fmt,
-        int src_width, int src_height);
+#if LIBAVCODEC_VERSION_MAJOR >= 52
 
+#include <swscale.h>
+
+// Starting from this version, ImgReSampleContext doesn't exist anymore.
+// This code implements the previous functions with a similar interface
+typedef struct ImgReSampleContext {
+    /** The context used for resizing */
+    struct SwsContext *context;
+    /** The source's width */
+    int width;
+    /** The source's height */
+    int height;
+    /** The banding used */
+    int bandLeft;
+    /** The banding used */
+    int bandRight;
+    /** The banding used */
+    int bandTop;
+    /** The banding used */
+    int bandBottom;
+    /** The padding used */
+    int padLeft;
+    /** The padding used */
+    int padRight;
+    /** The padding used */
+    int padTop;
+    /** The padding used */
+    int padBottom;
+    /** The output width */
+    int outWidth;
+    /** The output height */
+    int outHeight;
+} ImgReSampleContext;
+
+int img_convert(AVPicture *dst, int dst_pix_fmt,
+        AVPicture *src, int src_pix_fmt, int src_width, int src_height);
+
+void img_resample_close(ImgReSampleContext *s);
+
+void img_resample(ImgReSampleContext * context, AVPicture * out, const AVPicture * in);
+
+ImgReSampleContext * img_resample_full_init (int owidth, int oheight, 
+        int iwidth, int iheight,
+        int topBand, int 
+        bottomBand, int leftBand, int rightBand,
+        int padtop, int 
+        padbottom, int padleft, int padright);
+
+ImgReSampleContext * img_resample_init (int owidth, int oheight, int iwidth, int iheight);
+#endif
+
 #endif // FFMPEG_TOOLS_H
 
 /*

Property changes on: .
___________________________________________________________________
Deleted: svn:ignore
   - CVS
Makefile
Makefile.fragments
Makefile.global
Makefile.objects
acinclude.m4
aclocal.m4
autom4te.cache
build
config.guess
config.h
config.h.in
config.log
config.nice
config.status
config.sub
configure
configure.in
modules
install-sh
libtool
ltmain.sh
missing
mkinstalldirs
.exrc
.libs
.deps
*.lo
*.la

