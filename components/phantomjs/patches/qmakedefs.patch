--- /dev/null	2014-07-14 15:12:34.000000000 +0100
+++ phantomjs-1.9.7/src/qt/mkspecs/solaris-g++/qmake.conf	2014-07-14 15:29:18.953511720 +0100
@@ -0,0 +1,95 @@
+#
+# qmake configuration for solaris-g++
+#
+# The X11 header files used to be broken on Solaris until patches were
+# released in early 2001 for Solaris 2.6, 7, and 8. On Solaris 2.5.1
+# or non-patched systems -fpermissive works around the incompatibility
+# between GCC 2.95 or better and Solaris - but we still get warnings
+# because we don't use -isystem.
+#
+
+MAKEFILE_GENERATOR	= UNIX
+TARGET_PLATFORM		= unix
+TEMPLATE		= app
+CONFIG			+= qt warn_on release link_prl
+QT			+= core gui
+
+QMAKE_CC		= gcc
+QMAKE_LEX		= flex
+QMAKE_LEXFLAGS		=
+QMAKE_YACC		= yacc
+QMAKE_YACCFLAGS		= -d
+QMAKE_CFLAGS		=
+QMAKE_CFLAGS_DEPS	= -M
+QMAKE_CFLAGS_WARN_ON	= -Wall -W
+QMAKE_CFLAGS_WARN_OFF	= -w
+QMAKE_CFLAGS_RELEASE	= -O2
+QMAKE_CFLAGS_DEBUG	= -g
+QMAKE_CFLAGS_SHLIB	= -fPIC
+QMAKE_CFLAGS_STATIC_LIB	= $$QMAKE_CFLAGS_SHLIB
+QMAKE_CFLAGS_YACC	= -Wno-unused -Wno-parentheses
+QMAKE_CFLAGS_THREAD	= -D_REENTRANT
+
+QMAKE_CXX		= g++
+QMAKE_CXXFLAGS		= $$QMAKE_CFLAGS
+QMAKE_CXXFLAGS_DEPS	= $$QMAKE_CFLAGS_DEPS
+QMAKE_CXXFLAGS_WARN_ON	= $$QMAKE_CFLAGS_WARN_ON
+QMAKE_CXXFLAGS_WARN_OFF	= $$QMAKE_CFLAGS_WARN_OFF
+QMAKE_CXXFLAGS_RELEASE	= $$QMAKE_CFLAGS_RELEASE
+QMAKE_CXXFLAGS_DEBUG	= $$QMAKE_CFLAGS_DEBUG
+QMAKE_CXXFLAGS_SHLIB	= $$QMAKE_CFLAGS_SHLIB
+QMAKE_CXXFLAGS_STATIC_LIB = $$QMAKE_CFLAGS_STATIC_LIB
+QMAKE_CXXFLAGS_YACC	= $$QMAKE_CFLAGS_YACC
+QMAKE_CXXFLAGS_THREAD	= $$QMAKE_CFLAGS_THREAD
+
+QMAKE_INCDIR		= /ec/include
+QMAKE_LIBDIR		= /ec/lib
+QMAKE_INCDIR_X11	= /ec/include
+QMAKE_LIBDIR_X11	= /ec/lib
+QMAKE_INCDIR_QT		= $$[QT_INSTALL_HEADERS]
+QMAKE_LIBDIR_QT		= $$[QT_INSTALL_LIBS]
+QMAKE_INCDIR_OPENGL	= /ec/include
+QMAKE_LIBDIR_OPENGL	= /ec/lib
+
+QMAKE_LINK		= g++
+QMAKE_LINK_SHLIB	= g++
+QMAKE_LINK_C		= gcc
+QMAKE_LINK_C_SHLIB	= gcc
+QMAKE_LFLAGS		=
+QMAKE_LFLAGS_RELEASE	=
+QMAKE_LFLAGS_DEBUG	= -g
+QMAKE_LFLAGS_SHLIB	= -shared
+QMAKE_LFLAGS_PLUGIN	= $$QMAKE_LFLAGS_SHLIB
+QMAKE_LFLAGS_SONAME	= -h$$LITERAL_WHITESPACE
+QMAKE_LFLAGS_THREAD	=
+QMAKE_LFLAGS_NOUNDEF	= -z defs
+QMAKE_LFLAGS_RPATH	= -Wl,-R,
+
+QMAKE_LIBS		=
+QMAKE_LIBS_DYNLOAD	= -ldl
+QMAKE_LIBS_X11		= -lXext -lX11 -lresolv -lsocket -lnsl
+QMAKE_LIBS_X11SM	= -lSM -lICE
+QMAKE_LIBS_NIS		=
+QMAKE_LIBS_OPENGL	= -lGL
+QMAKE_LIBS_OPENGL_QT	= -lGL
+QMAKE_LIBS_THREAD	= -lpthread -lrt
+QMAKE_LIBS_NETWORK      = -lresolv -lsocket -lxnet -lnsl
+
+QMAKE_MOC		= $$[QT_INSTALL_BINS]/moc
+QMAKE_UIC		= $$[QT_INSTALL_BINS]/uic
+
+QMAKE_AR		= ar cq
+QMAKE_OBJCOPY           = objcopy
+QMAKE_RANLIB		=
+
+QMAKE_TAR		= tar -cf
+QMAKE_GZIP		= gzip -9f
+
+QMAKE_COPY		= cp -f
+QMAKE_MOVE		= mv -f
+QMAKE_DEL_FILE		= rm -f
+QMAKE_DEL_DIR		= rmdir
+QMAKE_CHK_DIR_EXISTS	= test -d
+QMAKE_MKDIR		= mkdir -p
+include(../common/unix.conf)
+load(qt_config)
--- /dev/null	2014-07-14 15:12:34.000000000 +0100
+++ phantomjs-1.9.7/src/qt/mkspecs/solaris-g++/qplatformdefs.h	2014-07-14 15:29:24.999432822 +0100
@@ -0,0 +1,135 @@
+/****************************************************************************
+**
+** Copyright (C) 2014 Digia Plc and/or its subsidiary(-ies).
+** Contact: http://www.qt-project.org/legal
+**
+** This file is part of the qmake spec of the Qt Toolkit.
+**
+** $QT_BEGIN_LICENSE:LGPL$
+** Commercial License Usage
+** Licensees holding valid commercial Qt licenses may use this file in
+** accordance with the commercial license agreement provided with the
+** Software or, alternatively, in accordance with the terms contained in
+** a written agreement between you and Digia.  For licensing terms and
+** conditions see http://qt.digia.com/licensing.  For further information
+** use the contact form at http://qt.digia.com/contact-us.
+**
+** GNU Lesser General Public License Usage
+** Alternatively, this file may be used under the terms of the GNU Lesser
+** General Public License version 2.1 as published by the Free Software
+** Foundation and appearing in the file LICENSE.LGPL included in the
+** packaging of this file.  Please review the following information to
+** ensure the GNU Lesser General Public License version 2.1 requirements
+** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
+**
+** In addition, as a special exception, Digia gives you certain additional
+** rights.  These rights are described in the Digia Qt LGPL Exception
+** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
+**
+** GNU General Public License Usage
+** Alternatively, this file may be used under the terms of the GNU
+** General Public License version 3.0 as published by the Free Software
+** Foundation and appearing in the file LICENSE.GPL included in the
+** packaging of this file.  Please review the following information to
+** ensure the GNU General Public License version 3.0 requirements will be
+** met: http://www.gnu.org/copyleft/gpl.html.
+**
+**
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+#ifndef QPLATFORMDEFS_H
+#define QPLATFORMDEFS_H
+
+// Get Qt defines/settings
+
+#include "qglobal.h"
+
+// Set any POSIX/XOPEN defines at the top of this file to turn on specific APIs
+#ifndef _POSIX_PTHREAD_SEMANTICS
+#define _POSIX_PTHREAD_SEMANTICS
+#endif
+
+#include <unistd.h>
+
+
+// We are hot - unistd.h should have turned on the specific APIs we requested
+
+
+#include <pthread.h>
+#include <dirent.h>
+#include <fcntl.h>
+#include <grp.h>
+#include <pwd.h>
+#include <signal.h>
+#include <dlfcn.h>
+
+#include <sys/types.h>
+#include <sys/ioctl.h>
+#include <sys/filio.h>
+#include <sys/ipc.h>
+#include <sys/time.h>
+#include <sys/shm.h>
+#include <sys/socket.h>
+#include <sys/stat.h>
+#include <sys/wait.h>
+#include <netinet/in.h>
+#ifndef QT_NO_IPV6IFNAME
+#include <net/if.h>
+#endif
+
+#define QT_USE_XOPEN_LFS_EXTENSIONS
+#include "../common/posix/qplatformdefs.h"
+
+#undef QT_SOCKLEN_T
+#undef QT_SOCKET_CONNECT
+#undef QT_SOCKET_BIND
+
+#define QT_SOCKET_CONNECT       qt_socket_connect
+#define QT_SOCKET_BIND          qt_socket_bind
+
+#if defined(_XOPEN_SOURCE) && (_XOPEN_SOURCE-0 >= 500) && (_XOPEN_VERSION-0 >= 500)
+// Solaris 7 and better with specific feature test macros
+#define QT_SOCKLEN_T            socklen_t
+#elif defined(_XOPEN_SOURCE_EXTENDED) && defined(_XOPEN_UNIX)
+// Solaris 2.6 and better with specific feature test macros
+#define QT_SOCKLEN_T            size_t
+#else
+// always this case in practice
+#define QT_SOCKLEN_T            int
+#endif
+
+// Solaris redefines connect -> __xnet_connect with _XOPEN_SOURCE_EXTENDED
+static inline int qt_socket_connect(int s, struct sockaddr *addr, QT_SOCKLEN_T addrlen)
+{ return  ::connect(s, addr, addrlen); }
+#if defined (connect)
+# undef connect
+#endif
+
+// Solaris redefines bind -> __xnet_bind with _XOPEN_SOURCE_EXTENDED
+static inline int qt_socket_bind(int s, struct sockaddr *addr, QT_SOCKLEN_T addrlen)
+{ return ::bind(s, addr, addrlen); }
+#if defined(bind)
+# undef bind
+#endif
+
+#if !defined(_XOPEN_UNIX)
+// Solaris 2.5.1
+// Function usleep() is defined in C library but not declared in header files
+// on Solaris 2.5.1. Not really a surprise, usleep() is specified by XPG4v2
+// and XPG4v2 is only supported by Solaris 2.6 and better.
+// Function gethostname() is also defined in C library but not declared in
+// header files on Solaris 2.5.1.
+typedef unsigned int useconds_t;
+extern "C" int usleep(useconds_t);
+extern "C" int gethostname(char *, int);
+#endif
+
+#if defined(_XOPEN_UNIX)
+// Solaris 2.6 and better
+#define QT_SNPRINTF		::snprintf
+#define QT_VSNPRINTF		::vsnprintf
+#endif
+
+#endif // QPLATFORMDEFS_H
--- /dev/null	2014-07-14 15:12:34.000000000 +0100
+++ phantomjs-1.9.7/src/qt/mkspecs/solaris-g++-64/qmake.conf	2014-07-14 15:29:46.171555746 +0100
@@ -0,0 +1,112 @@
+#
+# qmake configuration for solaris-g++64
+#
+# The X11 header files used to be broken on Solaris until patches were
+# released in early 2001 for Solaris 2.6, 7, and 8. On Solaris 2.5.1
+# or non-patched systems -fpermissive works around the incompatibility
+# between GCC 2.95 or better and Solaris - but we still get warnings
+# because we don't use -isystem.
+#
+# From the standards(5) manual page:
+# 	The XNS4 specification is safe for use only in ILP32 (32-bit)
+# 	environments and should not be used for LP64 (64-bit)
+# 	application environments. Use XNS5, which has LP64-clean
+# 	interfaces that are portable across ILP32 and LP64 environments.
+# 	[...]
+# 	For platforms supporting the LP64 (64-bit) programming environment
+# 	where the SC5.0 Compilers have been installed, SUSv2-conforming LP64
+# 	applications using XNS5 library calls should be built with command
+# 	lines of the form:
+# 		c89 $(getconf XBS5_LP64_OFF64_CFLAGS) -D_XOPEN_SOURCE=500 \
+# 		    $(getconf XBS5_LP64_OFF64_LDFLAGS) foo.c -o foo \
+# 		    $(getconf XBS5_LP64_OFF64_LIBS) -lxnet
+# So it appears that _XOPEN_SOURCE=500 should be defined when building
+# 64-bit applications (on Solaris 7 and better). But then __EXTENSIONS__
+# should be defined as well to recover all the default system interface.
+#
+
+MAKEFILE_GENERATOR	= UNIX
+TARGET_PLATFORM		= unix
+TEMPLATE		= app
+CONFIG			+= qt warn_on release link_prl
+QT			+= core gui
+
+QMAKE_CC		= gcc
+QMAKE_LEX		= flex
+QMAKE_LEXFLAGS		=
+QMAKE_YACC		= yacc
+QMAKE_YACCFLAGS		= -d
+QMAKE_CFLAGS		= -m64
+QMAKE_CFLAGS_DEPS	= -M
+QMAKE_CFLAGS_WARN_ON	= -Wall -W
+QMAKE_CFLAGS_WARN_OFF	= -w
+QMAKE_CFLAGS_RELEASE	= -O2
+QMAKE_CFLAGS_DEBUG	= -g
+QMAKE_CFLAGS_SHLIB	= -fPIC
+QMAKE_CFLAGS_STATIC_LIB	= $$QMAKE_CFLAGS_SHLIB
+QMAKE_CFLAGS_YACC	= -Wno-unused -Wno-parentheses
+QMAKE_CFLAGS_THREAD	= -D_REENTRANT
+
+QMAKE_CXX		= g++
+QMAKE_CXXFLAGS		= $$QMAKE_CFLAGS
+QMAKE_CXXFLAGS_DEPS	= $$QMAKE_CFLAGS_DEPS
+QMAKE_CXXFLAGS_WARN_ON	= $$QMAKE_CFLAGS_WARN_ON
+QMAKE_CXXFLAGS_WARN_OFF	= $$QMAKE_CFLAGS_WARN_OFF
+QMAKE_CXXFLAGS_RELEASE	= $$QMAKE_CFLAGS_RELEASE
+QMAKE_CXXFLAGS_DEBUG	= $$QMAKE_CFLAGS_DEBUG
+QMAKE_CXXFLAGS_SHLIB	= $$QMAKE_CFLAGS_SHLIB
+QMAKE_CXXFLAGS_STATIC_LIB = $$QMAKE_CFLAGS_STATIC_LIB
+QMAKE_CXXFLAGS_YACC	= $$QMAKE_CFLAGS_YACC
+QMAKE_CXXFLAGS_THREAD	= $$QMAKE_CFLAGS_THREAD
+
+QMAKE_INCDIR		= /ec/include
+QMAKE_LIBDIR		= /ec/lib/amd64
+QMAKE_INCDIR_X11	= /ec/include
+QMAKE_LIBDIR_X11	= /ec/lib/amd64
+QMAKE_INCDIR_QT		= $$[QT_INSTALL_HEADERS]
+QMAKE_LIBDIR_QT		= $$[QT_INSTALL_LIBS]
+QMAKE_INCDIR_OPENGL	= /ec/include
+QMAKE_LIBDIR_OPENGL	= /ec/lib/amd64
+
+QMAKE_LINK		= g++
+QMAKE_LINK_SHLIB	= g++
+QMAKE_LINK_C		= gcc
+QMAKE_LINK_C_SHLIB	= gcc
+QMAKE_LFLAGS		= -m64
+QMAKE_LFLAGS_RELEASE	=
+QMAKE_LFLAGS_DEBUG	= -g
+QMAKE_LFLAGS_SHLIB	= -shared
+QMAKE_LFLAGS_PLUGIN	= $$QMAKE_LFLAGS_SHLIB
+QMAKE_LFLAGS_SONAME	= -h$$LITERAL_WHITESPACE
+QMAKE_LFLAGS_THREAD	=
+QMAKE_LFLAGS_NOUNDEF	= -z defs
+QMAKE_LFLAGS_RPATH	= -Wl,-R,
+
+QMAKE_LIBS		= -m64
+QMAKE_LIBS_DYNLOAD	= -ldl
+QMAKE_LIBS_X11		= -lXext -lX11 -lresolv -lsocket -lnsl
+QMAKE_LIBS_X11SM	= -lSM -lICE
+QMAKE_LIBS_NIS		=
+QMAKE_LIBS_OPENGL	= -lGL
+QMAKE_LIBS_OPENGL_QT	= -lGL
+QMAKE_LIBS_THREAD	= -lpthread -lrt
+QMAKE_LIBS_NETWORK      = -lresolv -lsocket -lxnet -lnsl
+
+QMAKE_MOC		= $$[QT_INSTALL_BINS]/moc
+QMAKE_UIC		= $$[QT_INSTALL_BINS]/uic
+
+QMAKE_AR		= ar cq
+QMAKE_OBJCOPY           = objcopy
+QMAKE_RANLIB		=
+
+QMAKE_TAR		= tar -cf
+QMAKE_GZIP		= gzip -9f
+
+QMAKE_COPY		= cp -f
+QMAKE_MOVE		= mv -f
+QMAKE_DEL_FILE		= rm -f
+QMAKE_DEL_DIR		= rmdir
+QMAKE_CHK_DIR_EXISTS	= test -d
+QMAKE_MKDIR		= mkdir -p
+include(../common/unix.conf)
+load(qt_config)
--- /dev/null	2014-07-14 15:12:34.000000000 +0100
+++ phantomjs-1.9.7/src/qt/mkspecs/solaris-g++-64/qplatformdefs.h	2014-07-14 15:29:39.659758154 +0100
@@ -0,0 +1,106 @@
+/****************************************************************************
+**
+** Copyright (C) 2014 Digia Plc and/or its subsidiary(-ies).
+** Contact: http://www.qt-project.org/legal
+**
+** This file is part of the qmake spec of the Qt Toolkit.
+**
+** $QT_BEGIN_LICENSE:LGPL$
+** Commercial License Usage
+** Licensees holding valid commercial Qt licenses may use this file in
+** accordance with the commercial license agreement provided with the
+** Software or, alternatively, in accordance with the terms contained in
+** a written agreement between you and Digia.  For licensing terms and
+** conditions see http://qt.digia.com/licensing.  For further information
+** use the contact form at http://qt.digia.com/contact-us.
+**
+** GNU Lesser General Public License Usage
+** Alternatively, this file may be used under the terms of the GNU Lesser
+** General Public License version 2.1 as published by the Free Software
+** Foundation and appearing in the file LICENSE.LGPL included in the
+** packaging of this file.  Please review the following information to
+** ensure the GNU Lesser General Public License version 2.1 requirements
+** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
+**
+** In addition, as a special exception, Digia gives you certain additional
+** rights.  These rights are described in the Digia Qt LGPL Exception
+** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
+**
+** GNU General Public License Usage
+** Alternatively, this file may be used under the terms of the GNU
+** General Public License version 3.0 as published by the Free Software
+** Foundation and appearing in the file LICENSE.GPL included in the
+** packaging of this file.  Please review the following information to
+** ensure the GNU General Public License version 3.0 requirements will be
+** met: http://www.gnu.org/copyleft/gpl.html.
+**
+**
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+#ifndef QPLATFORMDEFS_H
+#define QPLATFORMDEFS_H
+
+// Get Qt defines/settings
+
+#include "qglobal.h"
+
+// Set any POSIX/XOPEN defines at the top of this file to turn on specific APIs
+#ifndef _POSIX_PTHREAD_SEMANTICS
+#define _POSIX_PTHREAD_SEMANTICS
+#endif
+
+#include <unistd.h>
+
+
+// We are hot - unistd.h should have turned on the specific APIs we requested
+
+
+#include <pthread.h>
+#include <dirent.h>
+#include <fcntl.h>
+#include <grp.h>
+#include <pwd.h>
+#include <signal.h>
+#include <dlfcn.h>
+
+#include <sys/types.h>
+#include <sys/ioctl.h>
+#include <sys/filio.h>
+#include <sys/ipc.h>
+#include <sys/time.h>
+#include <sys/shm.h>
+#include <sys/socket.h>
+#include <sys/stat.h>
+#include <sys/wait.h>
+#include <netinet/in.h>
+#ifndef QT_NO_IPV6IFNAME
+#include <net/if.h>
+#endif
+
+#define QT_USE_XOPEN_LFS_EXTENSIONS
+#include "../common/posix/qplatformdefs.h"
+
+#undef QT_SOCKET_CONNECT
+#define QT_SOCKET_CONNECT       qt_socket_connect
+
+// Solaris redefines connect -> __xnet_connect with _XOPEN_SOURCE_EXTENDED
+static inline int qt_socket_connect(int s, struct sockaddr *addr, QT_SOCKLEN_T addrlen)
+{ return ::connect(s, addr, addrlen); }
+#if defined (connect)
+# undef connect
+#endif
+
+// Solaris redefines bind -> __xnet_bind with _XOPEN_SOURCE_EXTENDED
+static inline int qt_socket_bind(int s, struct sockaddr *addr, QT_SOCKLEN_T addrlen)
+{ return ::bind(s, addr, addrlen); }
+#if defined(bind)
+# undef bind
+#endif
+
+// Only Solaris 7 and better support 64-bit
+#define QT_SNPRINTF		::snprintf
+#define QT_VSNPRINTF		::vsnprintf
+
+#endif // QPLATFORMDEFS_H
